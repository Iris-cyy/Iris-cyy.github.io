<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花落知多少</title>
  
  <subtitle>Nice to meet you :)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iris-cyy.github.io/"/>
  <updated>2020-03-13T06:49:30.656Z</updated>
  <id>https://iris-cyy.github.io/</id>
  
  <author>
    <name>Irisssy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Compilation Principle】Context-Free Grammars and Parsing</title>
    <link href="https://iris-cyy.github.io//Notes/Compilation-Principle/2020-03-10/cp_parsing/"/>
    <id>https://iris-cyy.github.io//Notes/Compilation-Principle/2020-03-10/cp_parsing/</id>
    <published>2020-03-10T06:35:55.000Z</published>
    <updated>2020-03-13T06:49:30.656Z</updated>
    
    <content type="html"><![CDATA[<p>语法分析树的结构取决于语言的结构，且是一种动态的数据结构（可以增、删、改）</p><h2 id="Context-Free-Grammar-CFG"><a href="#Context-Free-Grammar-CFG" class="headerlink" title="Context-Free Grammar (CFG)"></a>Context-Free Grammar (CFG)</h2><p>$RE ⊆ CFG$</p><p>产生式左边（LHS，left-hand sides）只有一个符号，且是非终结符</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>A Context-Free Grammar is a 4-tuple $(V,Σ,S,→)$, where</p><ul><li>$V$ is a finite set of nonterminal symbols</li><li>$Σ$ is a finite set of terminal symbols</li><li>$S ∈ V $ is a distinguished nonterminal, the start symbol</li><li>$→ ⊆  V × (V ∪ Σ)^<em>  Σ)^</em>$ is a finite relation, the productions</li></ul><p>更加正式的定义：</p><p>$G = (T,N,P,S)$</p><ul><li>$T$: Terminals</li><li>$N$: Nonterminals (disjoint from T)</li><li>$P$: Productions (Grammar rules), $A \rightarrow a,\;A \in N, \; a \in (T \cup N)^*$</li><li>$S$: Start symbol ($S \in N$)</li><li>sentencial from: a string in  $(T \cup N)^*$</li><li>sentence: $T^*$，只能由终结符组成</li><li>$T \cup N$ 表示文法的所有符号</li><li>$\alpha \Rightarrow^* \beta$ 表示$\alpha$可以通过 $n \; (n\geq 0)$ 步变换为$\beta$</li><li>derivation: $S \Rightarrow^<em> w \; (w \in T^</em>)$</li><li>$L(G)$: 由文法生成的语言，$L(G) = {w \in T^<em>\;|\;there \; exists \; a derivation\; S \Rightarrow^</em> w \; of \; G}$</li><li>rightmost derivation: $S \Rightarrow_{rm}^<em> w $, $a A \gamma \Rightarrow a \beta \gamma, \, a \in T^</em>$</li><li>leftmost derivation: $S \Rightarrow_{lm}^<em> w $, $a A \gamma \Rightarrow a \beta \gamma, \, \gamma \in T^</em>$</li></ul><h3 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h3><p>$G$：grammar，文法</p><p>$s$：sentence，由终结符组成的串</p><p>$L(G)$：文法产生的语言（sentence的集合）</p><p>BNF范式</p><p>通常用大写字母表示非终结符，用小写表示终结符</p><h4 id="递归（recursion）"><a href="#递归（recursion）" class="headerlink" title="递归（recursion）"></a>递归（recursion）</h4><ul><li>左递归：LHS的非终结符出现在RHS的第一个字符$A \rightarrow A \, \alpha \, | \, \beta$ 等价于 $(\beta\alpha^*)$</li><li>右递归：LHS的非终结符出现在RHS的最后一个字符$A \rightarrow \alpha \, A \, | \, \beta$  等价于 $(\alpha^*\beta)$</li></ul><p>$\alpha$、$\beta$是任意的串（终结符或非终结符都可），其中$\beta$不以$A$为开头/结尾</p><p>两者在很多情况下不等价</p><h4 id="epsilon-产生式（-epsilon-production-）"><a href="#epsilon-产生式（-epsilon-production-）" class="headerlink" title="$\epsilon$ 产生式（$\epsilon-production$）"></a>$\epsilon$ 产生式（$\epsilon-production$）</h4><p>$empty \, \rightarrow \, \epsilon$</p><p>用于产生空串，如果语言中要有空串，必须要有$\epsilon$ 产生式</p><p>如$a^*$相当于$A \rightarrow A \, \alpha \, | \, \epsilon \; or \; A \rightarrow \alpha \, A \, | \, \epsilon$</p><p>$\epsilon$ 作用：让文法更简洁，效率更高</p><p>eg.  $A \rightarrow (A) \, A \,| \, \epsilon$，生成能够匹配的括号</p><p>正规表达式没有记忆功能，上下文无关语法可以</p><h2 id="Parse-Trees-and-Abstract-Syntax-Trees"><a href="#Parse-Trees-and-Abstract-Syntax-Trees" class="headerlink" title="Parse Trees and  Abstract Syntax Trees"></a>Parse Trees and  Abstract Syntax Trees</h2><h3 id="Parse-Trees"><a href="#Parse-Trees" class="headerlink" title="Parse Trees"></a>Parse Trees</h3><p>用树的形态来表示推导，推导和树是多对一的关系</p><p>非叶节点表示非终结符，叶节点表示终结符</p><p>在树中不体现推导过程，只显示推导结果</p><p>最左推导（leftmost derivation）：每次展开最左边的非终结符，对应parse tree的前序遍历</p><p>最右推导（rightmost derivation）：每次展开最右边的非终结符，对应parse tree的后序遍历</p><p>每一棵树都只有唯一的最左推导和最右推导</p><p>eg.</p><p><img src="/images/comp/com-prin3.assets/image-20200313125644213.png" alt="image-20200313125644213" style="zoom:77%;" /></p><p>要注意的是在文法分析中关注的是类型而不是语义（因此parse tree的叶节点推出的是number而不是具体的3or4），词义在语义分析中进行处理</p><h3 id="Abstract-Syntax-Trees"><a href="#Abstract-Syntax-Trees" class="headerlink" title="Abstract Syntax Trees"></a>Abstract Syntax Trees</h3><p>parse tree 的压缩版（更简洁）</p><p><img src="/images/comp/com-prin3.assets/image-20200313130211688.png" alt="image-20200313130211688" style="zoom:67%;" /></p><p>（+其实代表相加的结果）</p><blockquote><p>eg.  </p><p><img src="/images/comp/com-prin3.assets/image-20200313135958685.png" alt="image-20200313135958685" style="zoom:60%;" /></p><p>parse tree:</p><p><img src="/images/comp/com-prin3.assets/image-20200313132604830.png" alt="image-20200313132604830" style="zoom:60%;" /></p><p>syntax tree:</p><p><img src="/images/comp/com-prin3.assets/image-20200313132630115.png" alt="image-20200313132630115" style="zoom:60%;" /></p></blockquote><p>孩子个数可能不定，可以用leftmost-child right sibling来表达</p><p><img src="/images/comp/com-prin3.assets/image-20200313134540122.png" alt="image-20200313134540122" style="zoom:67%;" /></p><p><br></p><h2 id="歧义（ambiguity）"><a href="#歧义（ambiguity）" class="headerlink" title="歧义（ambiguity）"></a>歧义（ambiguity）</h2><p>一个可以构建两个不同结构的parse tree的语法具有歧义（可能会因为没有区分优先级和结合律造成）</p><p>符号离树根越远优先级越高</p><p>解决方法：</p><ol><li><p>定义一个消除歧义的规则，例如指明哪一种tree是对的</p><p>优点：不需要改变原来的语法</p><p>缺点：文法结构并非只由语法来规定（grammar+rule）</p></li><li><p>改造文法，使得没有语法错误</p><p>缺点：改造文法可能会降低可读性（有时候为了简洁性，可能还是会选择保留原来有歧义的形态）</p></li></ol><blockquote><p>eg1.</p><p><img src="/images/comp/com-prin3.assets/image-20200313135853556.png" alt="image-20200313135853556" style="zoom:60%;" /></p><p>会有歧义，因为没有规定*和+-的优先级，如34-3*42</p><p>改成规定*优先级更高之后可以消除歧义（但parse tree会变得更加复杂）：</p><p><img src="/images/comp/com-prin3.assets/image-20200313135907660.png" alt="image-20200313135907660" style="zoom:60%;" /></p></blockquote><h3 id="Dangling-else-problem"><a href="#Dangling-else-problem" class="headerlink" title="Dangling else problem"></a>Dangling else problem</h3><p>if语句的else匹配可能会带来歧义</p><p>C中引入了{}来消除歧义，在Ada中引入end if</p><p>在文法中，可以用类似以下的方法：</p><p><img src="/images/comp/com-prin3.assets/image-20200313140454490.png" alt="image-20200313140454490" style="zoom:67%;" /></p><p>Ada的文法（用BNF表示）</p><p><img src="/images/comp/com-prin3.assets/image-20200313140810313.png" alt="image-20200313140810313" style="zoom:60%;" /></p><h3 id="Inessential-ambiguity"><a href="#Inessential-ambiguity" class="headerlink" title="Inessential ambiguity"></a>Inessential ambiguity</h3><p>有一些歧义无关紧要，具体得看语义</p><p><br></p><h2 id="EBNF（Extended-BNF）"><a href="#EBNF（Extended-BNF）" class="headerlink" title="EBNF（Extended BNF）"></a>EBNF（Extended BNF）</h2><p>在BNF基础上增加重复（{…}）和选择（[]，一次或零次）</p><p><img src="/images/comp/com-prin3.assets/image-20200313142632731.png" alt="image-20200313142632731" style="zoom:60%;" /></p><p><img src="/images/comp/com-prin3.assets/image-20200313142721793.png" alt="image-20200313142721793" style="zoom:60%;" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;语法分析树的结构取决于语言的结构，且是一种动态的数据结构（可以增、删、改）&lt;/p&gt;
&lt;h2 id=&quot;Context-Free-Grammar-CFG&quot;&gt;&lt;a href=&quot;#Context-Free-Grammar-CFG&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Compilation Principle" scheme="https://iris-cyy.github.io/categories/Notes/Compilation-Principle/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CP" scheme="https://iris-cyy.github.io/tags/CP/"/>
    
  </entry>
  
  <entry>
    <title>【Compilation Principle】Scanning (Lexical Analysis)</title>
    <link href="https://iris-cyy.github.io//Notes/Compilation-Principle/2020-03-04/cp_scanning/"/>
    <id>https://iris-cyy.github.io//Notes/Compilation-Principle/2020-03-04/cp_scanning/</id>
    <published>2020-03-04T09:21:17.000Z</published>
    <updated>2020-03-10T05:15:46.897Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/comp/com-prin2.assets/image-20200308123221931.png" alt="image-20200308123221931" style="zoom:50%;" /></p><h2 id="Scanning-Process"><a href="#Scanning-Process" class="headerlink" title="Scanning Process"></a>Scanning Process</h2><ul><li>Identifier: x y11 elsen_i00</li><li>Integer: 2 1000 -500 5L</li><li>Floating point: 2.0 0.00020 .02 1. 1e5 0.e-10</li><li>String: “x” “He said, \“Are you?\””</li><li>Comment: /<strong> don’t change this </strong>/</li><li>Keyword: if else while break</li><li>Symbol: + * { } ++ &lt; &lt;&lt; [ ] &gt;=</li></ul><p><br></p><h2 id="正则表达式（Regular-Expression-RE）"><a href="#正则表达式（Regular-Expression-RE）" class="headerlink" title="正则表达式（Regular Expression, RE）"></a>正则表达式（Regular Expression, RE）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>通过递归定义</p><p><img src="/images/comp/com-prin2.assets/image-20200308123456675.png" alt="image-20200308123456675" style="zoom: 50%;" /></p><p>其中运算的优先级：alternation &lt; concatenation &lt; repetition(R*)</p><p>RE的表达形式不唯一</p><p>RE不可计数（不可记忆）</p><p>eg. </p><p><img src="/images/comp/com-prin2.assets/image-20200308123721443.png" alt="image-20200308123721443" style="zoom:50%;" /></p><p>Regular Set: RE 的集合（正规表达式封闭）</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p><code>R+</code> : one or more strings from L(R): <code>R(R*)</code></p></li><li><p><code>R?</code>: optional R（一次或零次）: <code>(R|ε)</code> </p></li><li><p><code>[abce]</code>: one of the listed characters: <code>(a|b|c|e)</code></p></li><li><p><code>[a-z]</code>: one character from this range: <code>(a|b|c|d|e|…|y|z)</code> </p><p>eg. [A-Z a-z]表示包含大小写的所有字母</p></li><li><p><code>[^ab]</code>: anything but one of the listed chars</p></li><li><p><code>[^a-z]</code>: one character not from this range</p></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p><strong>Numbers</strong><br>自然数：<em>nat</em> = [0-9]+<br>有符号自然数：<em>signedNat</em> = (+|-)?<em>nat</em><br>实数（可能包含小数点or科学计数法）：<em>number</em> = <em>signedNat</em>(“．”” <em>nat</em>)? (E <em>signedNat</em>)?</p></li><li><p><strong>Reserved Words and Identifiers</strong><br>保留字（一般枚举表示）：<em>reserved</em> = if | while | do |………<br>字母：<em>letter</em> = [a-z A-Z]<br>数字：<em>digit</em> = [0-9]<br>标识符：<em>identifier</em> = <em>letter</em> (<em>letter</em> | <em>digit</em>)*</p><blockquote><p>$reserved \subset iderntifier$</p></blockquote></li><li><p><strong>Comment</strong></p><p><img src="/images/comp/com-prin2.assets/image-20200308125010856.png" alt="image-20200308125010856" style="zoom:55%;" /></p></li></ul><h3 id="一些原则"><a href="#一些原则" class="headerlink" title="一些原则"></a>一些原则</h3><h4 id="处理歧义"><a href="#处理歧义" class="headerlink" title="处理歧义"></a>处理歧义</h4><ul><li><p>keyword优先</p><p>如果一个标识符可以是keyword，就优先认为它是keyword（如if）</p></li><li><p>最长子串匹配</p><p>如果能被当成是一个identifier，就不会当成多个（例如iff，可以是iff或者if+f，认为是iff）</p><p>明确认为属于其他标记作为分隔符</p></li></ul><h4 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h4><p>用于分割，没有返回</p><p><em>whitespace</em> = ( <em>newline</em> | <em>blank</em> | <em>tab</em> | <em>comment</em> )+</p><h4 id="Lookahead"><a href="#Lookahead" class="headerlink" title="Lookahead"></a>Lookahead</h4><p>缓冲区内可能存在下一个输入的符号，要标记回溯位置</p><p><br></p><h2 id="有限自动机（Finite-Automata-FA）"><a href="#有限自动机（Finite-Automata-FA）" class="headerlink" title="有限自动机（Finite Automata, FA）"></a>有限自动机（Finite Automata, FA）</h2><p>状态个数有限</p><p>state 可以重复</p><ul><li><p><strong>transition</strong>：标记两个状态之间的转换</p></li><li><p><strong>start state</strong>：开始状态前要加无标签箭头</p></li><li><strong>accepting state</strong>：用双环表示接收（结束）状态（单环表示非接收状态），转换可以到接收态结束</li></ul><p>有的状态不接受一些字符，即接收了会进入error state，可以不在图中表示出来</p><h3 id="确定型有限自动机（Deterministic-Finite-Automation-DFA）"><a href="#确定型有限自动机（Deterministic-Finite-Automation-DFA）" class="headerlink" title="确定型有限自动机（Deterministic Finite Automation, DFA）"></a>确定型有限自动机（Deterministic Finite Automation, DFA）</h3><p>状态转移目标确定（唯一）</p><p>状态转移时接收<u>一个</u>符号（可以用名字表示）</p><p>$T:S \times \sum \rightarrow S$，$T(s,c)$ 必须对<u>每一个</u>s和c都有值（error state可以不画在图中）</p><p><strong>Typical action</strong></p><ol><li>making an transition：从输入缓冲区得到字符，得到字符串（字符串值或者词义）</li><li>reaching an accepting state：将token和相关属性（字符串内容、数字值等）返回给词法分析器</li><li>reaching an error state：回退（之前分析的可能不对）或者生成error token</li></ol><p>eg.</p><p><img src="/images/comp/com-prin2.assets/image-20200308184915152.png" alt="image-20200308184915152" style="zoom:60%;" /></p><h3 id="非确定型有限自动机（Nondeterministic-Finite-Automaton-NFA）"><a href="#非确定型有限自动机（Nondeterministic-Finite-Automaton-NFA）" class="headerlink" title="非确定型有限自动机（Nondeterministic Finite Automaton, NFA）"></a>非确定型有限自动机（Nondeterministic Finite Automaton, NFA）</h3><p>NFA与DFA功能等价，可以相互转换</p><p>主要区别在于，NFA有 $\epsilon - transition$（不消耗输入的转移）</p><p>$\epsilon - transition$ 的两个主要作用：</p><ol><li>选择功能（不用合并新来的状态，而是增加一个新的状态）</li><li>匹配外部输入的空串</li></ol><p>NFA的定义包括转换关系（不一定是函数）T、开始状态s0、接收状态A、接受语言L(M)</p><p>表达比较灵活，可以有变数（与之对应的是，可能会影响分析效率）</p><p><br></p><h2 id="【IMPORTANT】从RE到DFA的转换"><a href="#【IMPORTANT】从RE到DFA的转换" class="headerlink" title="【IMPORTANT】从RE到DFA的转换"></a>【IMPORTANT】从RE到DFA的转换</h2><p><img src="/images/comp/com-prin2.assets/image-20200308205252875.png" alt="image-20200308205252875" style="zoom: 50%;" /></p><h3 id="RE-gt-NFA"><a href="#RE-gt-NFA" class="headerlink" title="RE -&gt; NFA"></a>RE -&gt; NFA</h3><h4 id="Top-down"><a href="#Top-down" class="headerlink" title="Top-down"></a>Top-down</h4><p><img src="/images/comp/com-prin2.assets/20160927164801462" alt="img" style="zoom: 80%;" /></p><h4 id="Thompson’s-construction-Bottom-up"><a href="#Thompson’s-construction-Bottom-up" class="headerlink" title="Thompson’s construction (Bottom-up)"></a>Thompson’s construction (Bottom-up)</h4><p>对于单个字符，构造一个如下图所示的转换图，作为一个单元：</p><p><img src="/images/comp/com-prin2.assets/20160927182858046" alt="a" style="zoom:90%;" /></p><p>在遇到操作符时，所有的处理都针对单元（在下图上用虚线圈表示）：</p><p><img src="/images/comp/com-prin2.assets/20160927185627441" alt="op" style="zoom:90%;" /></p><p>在处理完操作符之后，形成新的单元，然后继续下一次处理（类似递归），直到转换为NFA</p><h3 id="NFA-gt-DFA"><a href="#NFA-gt-DFA" class="headerlink" title="NFA -&gt; DFA"></a>NFA -&gt; DFA</h3><ol><li>先得到每个状态对应的$\epsilon$闭包（当前状态下能够通过$\epsilon$推出的所有状态的集合，先找出该状态的ε边推出的所有状态，再找那些状态的ε边推出的状态，是一个迭代的过程，直到找出一个状态的ε闭包）</li><li>以原NFA的start state作为DFA的start state，对于当前状态中的每一个子状态，对每一个符号做一次推出操作，构造新的状态和推出过程（注意推出的是NFA对应状态的ε闭包，展开求并得到新的状态）</li><li>重复2直到没有新的状态或转换被创建</li><li>DFA中，包含了NFA中accept state的都是accept state</li></ol><blockquote><p> 举个栗子便于理解：</p><p>得到NFA如下图：</p><p><img src="/images/comp/com-prin2.assets/image-20200308212454788.png" alt="image-20200308212454788" style="zoom:80%;" /></p><p>对各状态求ε闭包：</p><p>$\overline 1 = {1,2,3,5,8}$<br>$\overline 2 = {2,3,5}$<br>$\overline 3 = {3}$<br>$\overline 4 = {2,3,4,5,7,8}$<br>$\overline 5 = {5}$<br>$\overline 6 = {2,3,5,6,7,8}$<br>$\overline 7 = {2,3,5,7,8}$<br>$\overline 8 = {8}$<br>$\overline 9 = {9,10,12,14,15,16}$<br>$\overline{10} = {10}$<br>$\overline{11} = {11,16}$<br>$\overline{12} = {12}$<br>$\overline{13} = {13,16}$<br>$\overline{14} = {14,15,16}$<br>$\overline{15} = {15,16}$<br>$\overline{16} = {16}$</p><p>得到新的状态转换表：</p><p>（例如，从S0中各状态通过a：3-&gt;4, 8-&gt;9，所以S0通过a转移到 {$\overline 4, \overline 9$}，展开如表中所示，其他同理）</p><table><thead><tr><th style="text-align:center">$S’$</th><th style="text-align:center">$S’_a$</th><th style="text-align:center">$S’_b$</th></tr></thead><tbody><tr><td style="text-align:center">S0 = {1,2,3,5,8}</td><td style="text-align:center">S1 = {2,3,4,5,7,8,9,10,12,14,15,16}</td><td style="text-align:center">S2 = {2,3,5,6,7,8}</td></tr><tr><td style="text-align:center">S1 = {2,3,4,5,7,8,9,10,12,14,15,16}</td><td style="text-align:center">S3 = {2,3,4,5,7,8,9,10,11,12,14,15,16}</td><td style="text-align:center">S4 = {2,3,5,6,7,8,13,16}</td></tr><tr><td style="text-align:center">S2 = {2,3,5,6,7,8}</td><td style="text-align:center">S1 = {2,3,4,5,7,8,9,10,12,14,15,16}</td><td style="text-align:center">S2 = {2,3,5,6,7,8}</td></tr><tr><td style="text-align:center">S3 = {2,3,4,5,7,8,9,10,11,12,14,15,16}</td><td style="text-align:center">S3 = {2,3,4,5,7,8,9,10,11,12,14,15,16}</td><td style="text-align:center">S4 = {2,3,5,6,7,8,13,16}</td></tr><tr><td style="text-align:center">S4 = {2,3,5,6,7,8,13,16}</td><td style="text-align:center">S3 = {2,3,4,5,7,8,9,10,11,12,14,15,16}</td><td style="text-align:center">S2 = {2,3,5,6,7,8}</td></tr></tbody></table><p>画出DFA：</p><p><img src="/images/comp/com-prin2.assets/image-20200308213027672.png" alt="image-20200308213027672" style="zoom: 60%;" /></p></blockquote><h3 id="DFA的优化（最小化）"><a href="#DFA的优化（最小化）" class="headerlink" title="DFA的优化（最小化）"></a>DFA的优化（最小化）</h3><p>最小化的需求是，每个等价类只能由一个状态来表示，因此这一步要做的就是划分等价类</p><ol><li><p>先根据是否为终止状态分为两类，非终止状态和终止状态</p></li><li><p>在每一类中继续细分，对等价类的要求是，对同一符号，转换到的新状态要属于同一等价类（注意，是同一等价类，可以是该等价类下不同的状态）。因此对于每一类中的每个子状态，对每一个符号进行转换，一旦有转换结果属于不同的类，则将其分在不同的等价类下。</p></li><li>对每一个类重复2，要注意的是，划分完后面的类之后，要回去看一下前面的类是否需要进一步划分（因为可能之前结果在同一类，但在后面被分开了）</li><li>每个等价类取一个状态作为代表，画新的DFA</li></ol><blockquote><p>上一个例子中简化的结果如下图：</p><p><img src="/images/comp/com-prin2.assets/image-20200308213842871.png" alt="image-20200308213842871" style="zoom: 60%;" /></p></blockquote><p>参考：<a href="https://blog.csdn.net/cuiods/article/details/52673154" target="_blank" rel="noopener">here</a></p><p><br></p><h2 id="Lex"><a href="#Lex" class="headerlink" title="Lex"></a>Lex</h2><p><strong>input</strong>: a text file containing regular expressions, together with the actions to be taken when each expression is matched</p><p><strong>output</strong>: Contains C source code defining a procedure yylex that is\</p><p> a table-driven implementation of a DFA corresponding to the regular expressions of the input file, and that   operates like a <strong>getToken</strong> procedure.</p><h3 id="The-format-of-a-Lex-input-file"><a href="#The-format-of-a-Lex-input-file" class="headerlink" title="The format of a Lex input file"></a>The format of a Lex input file</h3><blockquote><p>{definitions}     –&gt; 定义</p><p>%%    –&gt; 分隔符</p><p>{rules}     –&gt; 核心</p><p>%%</p><p>{auxiliary routines}    –&gt; action中用到的函数等</p></blockquote><h4 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h4><p>放在 %{…%} 的省略号部分中（遇到%不会处理，而是原封放入output）</p><p>RE的命名在这里会被定义（因为RE不唯一，命名之后可以用于简化）</p><h4 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h4><p>将RE和将要运行的代码相对应（一对一关系，RE - action）</p><h4 id="Auxiliary-routines"><a href="#Auxiliary-routines" class="headerlink" title="Auxiliary routines"></a>Auxiliary routines</h4><p>函数定义</p><p>“.”可以用作通配符，匹配除换行符外的所有符号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">&#x2F;* a Lex program that changes all numbers from decimal to hexadecimal notation,</span><br><span class="line">printing a summary statistic to stdeer</span><br><span class="line">*&#x2F;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int count &#x3D; 0;</span><br><span class="line">%&#125;</span><br><span class="line">digit [0-9]</span><br><span class="line">number &#123;digit&#125;+</span><br><span class="line">%%</span><br><span class="line">&#123; number &#125; &#123; int n &#x3D; atoi (yytext);</span><br><span class="line">printf(“%x”, n);</span><br><span class="line">if (n &gt; 9) count ++; &#125;</span><br><span class="line">%%</span><br><span class="line">main( )</span><br><span class="line">&#123; yylex ( );</span><br><span class="line">fprintf(stdeer, “number of replacements &#x3D; %d”, count);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/comp/com-prin2.assets/image-20200308123221931.png&quot; alt=&quot;image-20200308123221931&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;Scann
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Compilation Principle" scheme="https://iris-cyy.github.io/categories/Notes/Compilation-Principle/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CP" scheme="https://iris-cyy.github.io/tags/CP/"/>
    
  </entry>
  
  <entry>
    <title>【Compilation Principle】 Introduction</title>
    <link href="https://iris-cyy.github.io//Notes/Compilation-Principle/2020-03-04/cp_intro/"/>
    <id>https://iris-cyy.github.io//Notes/Compilation-Principle/2020-03-04/cp_intro/</id>
    <published>2020-03-04T09:21:11.000Z</published>
    <updated>2020-03-10T04:53:59.436Z</updated>
    
    <content type="html"><![CDATA[<p>Compilers: computer languages</p><blockquote><p>Translate one language to another<br>Source language(input) to target language (output)<br>Source language : high-level language c or c++<br>Target language : object code, machine code (machine instruction)<br>一般是从高级语言 -&gt; 低级语言，但是不一定</p></blockquote><p><br></p><h2 id="A-Brief-History-of-Compiler"><a href="#A-Brief-History-of-Compiler" class="headerlink" title="A Brief History of Compiler"></a>A Brief History of Compiler</h2><ul><li><p>Machine language: programs were written in machine language in late 1940s (c706 0000 0002)</p></li><li><p>Assembly language</p><blockquote><p>Assembler</p><p>Defects: difficult  to read/understand, depend on the particular machine</p></blockquote></li><li><p>FORTRAN: Between 1954 and 1957, by IBM, John Backus</p><blockquote><p>完全静态的语言（运行前内存分配就已固定，没有指针 -&gt; 指针式动态内存分配的工具）</p><p>多用于工业控制</p><p>对语言进行层次划分，将语法分为type0, type1, type2, type3，四个层次从0-3互为包含关系（从0-3可以看成是从大到小的同心圆）</p></blockquote></li><li><p>Parsing problem: 1960s and 1970s</p></li><li>Optimization techniques: improve compiler efficiency (时间效率、空间效率)</li><li>Compiler-compilers (parser generator, 语法分析器)</li><li>YACC (yet another compiler-compiler, 语法分析器): 1975, by Steve Johnson for UNIX.</li><li>Lex (词法分析器): 1975 by Mike Lest</li></ul><p><br></p><h2 id="Programs-related-to-compilers"><a href="#Programs-related-to-compilers" class="headerlink" title="Programs related to compilers"></a>Programs related to compilers</h2><ul><li><p>Interpreters</p><p>解释器，与编译器功能相同</p></li><li><p>Assemblers</p><p>汇编器，与编译器配合使用</p><p>source code —&gt;（编译器）—&gt; assembly code —&gt;（汇编器）—&gt; object code</p></li><li><p>Linkers</p><p>连接器（拼接成可执行文件）</p></li><li><p>Loaders</p><p>重定位（相对地址）</p></li><li><p>Preprocessors</p><p>预处理，删除注释、做include和宏定义</p></li><li><p>Editors</p><p>编译器，生成标准文件</p></li><li><p>Debuggers</p><p>调试器</p></li><li><p>Profilers</p><p>手机程序运行中的相关信息，为程序改进提供信息</p></li><li><p>Project managers</p><p>多文件操作（project），引入控制、多人协作</p></li></ul><p><br></p><h2 id="The-Translation-Process"><a href="#The-Translation-Process" class="headerlink" title="The Translation Process"></a>The Translation Process</h2><p><img src="/images/comp/com-prin1.assets/image-20200307101832977.png" alt="image-20200307101832977" style="zoom: 60%;" /></p><blockquote><p><strong>Scanner</strong>：词法分析（lexical analysis）</p><p><strong>Token</strong>：单词、令环（不可分割的最小单位）</p><p><strong>Parser</strong>：语法分析（syntax analysis）</p><p><strong>Syntax tree</strong>：语法树</p><p><strong>Semantic Analyzer</strong>：语义分析器（Semantic analysis）</p><p><strong>Annotated tree</strong>：带注释的树（标注语义信息）</p><p><strong>Source code optimizer</strong>：优化器（源程序代码级优化，依赖源代码特性），从而提高效率</p><p><strong>Intermediate code</strong>：中间代码（m种源代码 -&gt; n种目标代码，有m*n种映射；如果有中间代码，减少至m+n种）</p><p><strong>Code generator</strong>：代码生成器</p><p><strong>Target code</strong>：目标码</p><p><strong>Target code optimizer</strong>：目标码优化，依赖目标码特性</p><p><strong>Literal table</strong>：常量表</p><p><strong>Symbol table</strong>：符号表（重要），用于提升性能</p><p><strong>Error handler</strong>：用于错误处理和错误恢复（容错性）</p></blockquote><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>词法分析（lexical analysis）</p><p>输入符号流，输出token（不管值）</p><p>同时将标识符放入<code>symbol table</code>，将常量放入<code>literal table</code></p><p><img src="/images/comp/com-prin1.assets/image-20200307124000496.png" alt="image-20200307124000496" style="zoom:55%;" /></p><h3 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h3><p>语法分析（syntax analysis）</p><p>输入符号（token），输出语法树（syntax tree）或解析树（parse tree）</p><p>在语法树中，叶子对应终结符，非叶节点对应非终结符</p><p><strong>Parse Tree</strong>：（具体）</p><p><img src="/images/comp/com-prin1.assets/image-20200307124410124.png" alt="image-20200307124410124" style="zoom:55%;" /></p><p><strong>Syntax Tree</strong>：（抽象，parse tree的压缩）</p><p><img src="/images/comp/com-prin1.assets/image-20200307124856028.png" alt="image-20200307124856028" style="zoom:50%;" /></p><h3 id="Semantic-analyzer"><a href="#Semantic-analyzer" class="headerlink" title="Semantic analyzer"></a>Semantic analyzer</h3><p>语义分析器</p><ul><li>静态语义（static semantics）：包括声明和类型检查（编译时可以确定）</li><li>动态语义（dynamic semantics）</li></ul><p>根据语义信息得到属性（attribute） –&gt; 语义信息语法化</p><p>例如加入“类型”这一语义属性（作用：保证程序安全）</p><p><strong>Annotated Tree</strong>：</p><p><img src="/images/comp/com-prin1.assets/image-20200307145447835.png" alt="image-20200307145447835" style="zoom:55%;" /></p><h3 id="Source-code-optimizer"><a href="#Source-code-optimizer" class="headerlink" title="Source code optimizer"></a>Source code optimizer</h3><p>源代码级优化</p><p>生成中间代码（intermediate code or IR） –&gt; 表示形态主要有三地址码（three-address code）、P-code两种</p><ul><li>三地址码：比较接近高级语言</li><li>P-code：pascal语言的中间代码（接近机器语言）</li></ul><p>会进行例如常量叠加等操作（不同的编译器执行的优化种类和优化阶段位置都会有差异）</p><p><img src="/images/comp/com-prin1.assets/image-20200307151136599.png" alt="image-20200307151136599" style="zoom:50%;" /></p><p><img src="/images/comp/com-prin1.assets/image-20200307150619488.png" alt="image-20200307150619488" style="zoom:55%;" /></p><h3 id="Code-generator"><a href="#Code-generator" class="headerlink" title="Code generator"></a>Code generator</h3><p>输入中间代码，输出机器码（目标机器用的代码）</p><p><img src="/images/comp/com-prin1.assets/image-20200307165109546.png" alt="image-20200307165109546" style="zoom: 50%;" /></p><h3 id="Target-code-optimizer"><a href="#Target-code-optimizer" class="headerlink" title="Target code optimizer"></a>Target code optimizer</h3><p>目标代码级优化</p><ul><li>选择寻址模式，提高性能</li><li>用更快的指令代替慢的（如，用左移代替*2 –&gt; 速度：左移 &gt; 加法 &gt; 乘法）</li><li>去除多余的和不必要的操作</li></ul><p><img src="/images/comp/com-prin1.assets/image-20200307165319770.png" alt="image-20200307165319770" style="zoom:50%;" /></p><p><br></p><h2 id="Major-Data-Structures-In-A-Compiler"><a href="#Major-Data-Structures-In-A-Compiler" class="headerlink" title="Major Data Structures In A Compiler"></a>Major Data Structures In A Compiler</h2><ul><li><p>Tokens<br>可数，可通过定义枚举变量表示</p></li><li><p>Syntax Tree</p><p>每个节点都是一条记录，递归表示parser和semantic analyzer收集到的信息</p></li><li><p>Symbol Table</p><p>符号表。存储标识符信息（函数、变量、常量、数据类型等）</p></li><li><p>Literal Table</p><p>常量表，存储常数、字符串等</p></li><li><p>Intermediate Code</p><p>中间代码</p></li><li><p>Temporary Files</p><p>用临时文件保存中间步骤</p></li></ul><p><br></p><h2 id="Other-Issues"><a href="#Other-Issues" class="headerlink" title="Other Issues"></a>Other Issues</h2><ul><li><p><strong>Analysis</strong>：lexical analysis（词法分析）、syntax analysis（语法分析）、semantic analysis(optimization)（语义分析）</p></li><li><p><strong>Synthesis</strong>：code generation(optimization)（代码生成）</p></li></ul><p>根据源代码和目标代码来划分前端后端：</p><ul><li><strong>Front end</strong>：scanner, parser, senabtic analyzer, intermediate code synthesis</li><li><strong>Back end</strong>：code generator, optimization</li><li><p>（可能有<strong>middle end</strong>，gcc4.0根据中间代码进行优化）</p></li><li><p><strong>Passes</strong>：Passes是相对于其余编译序列化的一个阶段或一组阶段，它在前一阶段完成之前不会启动，并且在任何后续阶段开始之前完成。对于一个程序要分为几个pass来多次处理，每个pass包含若干个阶段，商业级的编译器的pass数一般在30-40以上</p></li><li>Language definition </li><li>Compiler options and interfaces</li><li>Error handling: static error, execution error</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Compilers: computer languages&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Translate one language to another&lt;br&gt;Source language(input) to target language (output)
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Compilation Principle" scheme="https://iris-cyy.github.io/categories/Notes/Compilation-Principle/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CP" scheme="https://iris-cyy.github.io/tags/CP/"/>
    
  </entry>
  
  <entry>
    <title>关于科学上网</title>
    <link href="https://iris-cyy.github.io//Tricks/2020-02-28/science_online/"/>
    <id>https://iris-cyy.github.io//Tricks/2020-02-28/science_online/</id>
    <published>2020-02-28T09:22:19.000Z</published>
    <updated>2020-02-29T04:59:45.698Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不得不说国庆以来真的越查越严，中间换了有几十个梯子，最长的没撑过半个月（哭），最近甚至平均每三分钟挂掉一个（搭完打开google验证搭成功了，然后打开gmail收一下邮件，然后就没有然后了）。于是意识到ss不香了，不得不另辟蹊径。然后在十五分钟前，我终于时隔五个月又一次成功登上ins🎉🎉🎉</p><p>此处应有配图<br>我太难了.jpg</p></blockquote><p><br></p><p>下面是正文</p><p>参考了许多别的博主，但鉴于这些文章总是会不定期消失，所以还是自己总结一篇更靠谱一点：）</p><p><br></p><h2 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h2><p>首先要买到能用的VPS（vultr大法好</p><p>除了vultr还有digitalocean、linode等等 就不详细说了，聪明的你一定能搞定</p><p><a href="http://www.nocnhost.com/vultr-vs-digitalocean-vs-linode?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">这里有一篇别人写的blog比较上述三家VPS</a></p><p>get到能用的vps之后，记录下ip和password</p><p>先连接，可以直接终端ssh也可以用别的软件（putty等）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh root@&lt;ip&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如 ssh root@192.168.99.99</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果跳出来确认，输yes就行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按要求输入密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果跳出来22端口连接错误，那就说明这个ip不行，重新换一个</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果成功会跳出来:</span></span><br><span class="line">root@vultr:~#</span><br></pre></td></tr></table></figure><p>下面开始搭梯子</p><p>我试过比较成功的有ss和v2ray两种搭法，下面分别介绍</p><p><br></p><h2 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>这个方法我用了两年，最近挂得频繁才开始摸索新的搭法。</p><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><p>安装ss服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install shadowsocks</span><br><span class="line"><span class="meta">#</span><span class="bash"> 中间的确认步骤输y</span></span><br></pre></td></tr></table></figure><p>等它安装好之后编辑配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks/config.json</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进去之后输i进入--INSERT——模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置完成之后按ESC退出——INSERT——模式，输入:wq就可以保存并退出</span></span><br></pre></td></tr></table></figure><p>可能有初始配置也可能没有，大概配置成下面这样就行了（端口可以自己配置，之后如果遇到服务器挂掉，排查完不是ip整个不行了的话，可以到这边来改端口）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>:<span class="string">"服务器的ip"</span>, </span><br><span class="line">  <span class="attr">"server_port"</span>:<span class="number">8000</span>, </span><br><span class="line">  <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>, </span><br><span class="line">  <span class="attr">"local_port"</span>:<span class="number">1080</span>, </span><br><span class="line">  <span class="attr">"password"</span>:<span class="string">"自定义的密码"</span>, </span><br><span class="line">  <span class="attr">"timeout"</span>:<span class="number">300</span>, </span><br><span class="line">  <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>, </span><br><span class="line">  <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/config.json start &amp;</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>下载shadowsocks客户端并按照服务器配置（MacOS、Windows、Linux、Android、iOS等都有对应的版本）</p><p>据说<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">这里</a>可以下载，但我应该不是从这儿下的</p><p>有个github开源地址，也有民间版本的下载链接，聪明的你一定可以找到</p><p>配置完大概长这样：</p><p><img src="/images/tricks/scienceonline.assets/image-20200228175540635.png" alt="image-20200228175540635"></p><p>确定之后开启客户端，推荐使用PAC自动模式</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>这个方法的好处在于可以配置多用户模式（也许前面一个方法也可以，没有尝试）</p><p>参考<a href="https://blog.csdn.net/m0_38031488/article/details/90666355" target="_blank" rel="noopener">这篇博客</a>，复读一下以防404</p><h4 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h4><p>开启加速优化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N — no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure><p>安装ss</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">wget — no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">更改权限</span></span><br><span class="line">chmod 777 shadowsocks.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">开始安装</span></span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>按要求输入密码、端口（大于1000）、加密方式（选择对应数字，推荐7号，aes-256-cfb），按指令完成搭建</p><p>下面的步骤可供选择</p><p>有需求配置多用户使用（多端口）的话进入以下步骤，没有需求则到这里就大功告成</p><p>创建配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>修改为多用户模式，举例如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:&#123;</span><br><span class="line">         <span class="attr">"9000"</span>:<span class="string">"12345"</span>,</span><br><span class="line">         <span class="attr">"9001"</span>:<span class="string">"12345"</span>,</span><br><span class="line">         <span class="attr">"9002"</span>:<span class="string">"12345"</span>,</span><br><span class="line">         <span class="attr">"9003"</span>:<span class="string">"12345"</span>,</span><br><span class="line">         <span class="attr">"9004"</span>:<span class="string">"12345"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中server的初始值是0.0.0.0，设置成这样方便ipv6连接，也可以不改</p><p>port和password都可以自定义</p><p>保存配置之后重启ss</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure><p>完成✅</p><p>客户端的配置和方法一一样</p><p><br></p><h2 id="v2ray"><a href="#v2ray" class="headerlink" title="v2ray"></a>v2ray</h2><p>鉴于最近ss普遍不行，我又翻了很多博客找到v2ray的搭建方法</p><p>请参考<a href="https://www.codercto.com/a/22204.html?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">这篇博客</a></p><p>科学爱国，嗯，科学爱国</p><p>默念100遍社会主义核心价值观</p><p>以下是基础版本的复读</p><h3 id="服务器-2"><a href="#服务器-2" class="headerlink" title="服务器"></a>服务器</h3><p>同样，先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><p>等安装完之后，记录跳出来的<strong>PORT</strong>和<strong>UUID</strong>（划重点）</p><p>如果提示缺少命令可以先升级一下apt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果没有提示任何错误，直接安装完成了，请跳过这步</span></span><br><span class="line">yum update</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>安装完成后开启运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service v2ray start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面这个命令可以用来查看状态，如果显示running则开启成功</span></span><br><span class="line">service v2ray status</span><br></pre></td></tr></table></figure><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><p>下载对应操作系统的v2ray</p><p><a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">🔗1</a> （github链接）</p><p><a href="https://www.v2ray.com" target="_blank" rel="noopener">🔗2</a> （这个有很大概率是坏的）</p><p><a href="https://tlanyan.me/v2ray-clients-download/" target="_blank" rel="noopener">🔗3</a> （我从这里下的）</p><p>配置config.json如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">    <span class="attr">"inbound"</span>: &#123;      </span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">1080</span>,      </span><br><span class="line">        <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>,      </span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"socks"</span>,      </span><br><span class="line">        <span class="attr">"settings"</span>: &#123;        </span><br><span class="line">            <span class="attr">"auth"</span>: <span class="string">"noauth"</span>        </span><br><span class="line">            <span class="string">"udp"</span>: <span class="literal">true</span>      </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="attr">"outbound"</span>: &#123;      </span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,      </span><br><span class="line">        <span class="attr">"settings"</span>: &#123;          </span><br><span class="line">            <span class="attr">"vnext"</span>: [          </span><br><span class="line">                &#123;            </span><br><span class="line">                    <span class="attr">"address"</span>: <span class="string">"服务器的ip"</span>,           </span><br><span class="line">                    <span class="attr">"port"</span>: 记录的port,            </span><br><span class="line">                    <span class="attr">"users"</span>: [              </span><br><span class="line">                        &#123;                </span><br><span class="line">                            <span class="attr">"id"</span>: <span class="string">"记录的UUID"</span>,       </span><br><span class="line">                            <span class="attr">"alterId"</span>: <span class="number">64</span>              </span><br><span class="line">                        &#125;            </span><br><span class="line">                    ]          </span><br><span class="line">                &#125;        </span><br><span class="line">            ]      </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="string">"outboundDetour"</span>: [    </span><br><span class="line">    &#123;      </span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">"tag"</span>: <span class="string">"direct"</span>    </span><br><span class="line">&#125;  </span><br><span class="line">],  </span><br><span class="line"><span class="attr">"routing"</span>: &#123;    </span><br><span class="line">        <span class="attr">"strategy"</span>: <span class="string">"rules"</span>,    </span><br><span class="line">        <span class="attr">"settings"</span>: &#123;      </span><br><span class="line">            <span class="attr">"domainStrategy"</span>: </span><br><span class="line">            <span class="string">"IPIfNonMatch"</span>,      </span><br><span class="line">            <span class="attr">"rules"</span>: [        </span><br><span class="line">                &#123;          </span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"geoip:private"</span>,          </span><br><span class="line">                    <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span>        </span><br><span class="line">                &#125;,        </span><br><span class="line">                &#123;          </span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"geosite:cn"</span>,          </span><br><span class="line">                    <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span>        </span><br><span class="line">                &#125;,        </span><br><span class="line">                &#123;          </span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"geoip:cn"</span>,          </span><br><span class="line">                    <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span>        </span><br><span class="line">                &#125;      </span><br><span class="line">            ]    </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">"mux"</span>: &#123;    </span><br><span class="line">        <span class="attr">"enabled"</span>: <span class="literal">true</span>,    </span><br><span class="line">        <span class="attr">"concurrency"</span>: <span class="number">8</span>  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以不配置，直接在运行软件的时候在页面里配置也成，输入对应IP、port、ID就可</p><p>到这里大功告成</p><p>下面讲手机端的配置</p><p>Android推荐用BifrostV作为客户端，下载链接在<a href="https://www.codercto.com/a/22204.html?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">这里</a></p><p>手动配置，其中顶端选择VMess，Host填IP，Port填port，UserID填UUID，配置完保存退出，开启连接，完事儿</p><p>iOS俺也不会</p><p><br></p><p>下面是几个介绍进阶版配置的链接，收藏了等于学过了，嗯</p><p><a href="https://tlanyan.me/recovery-blocked-ip/" target="_blank" rel="noopener">拯救被墙IP</a></p><p><a href="http://www.nocnhost.com/vultr-vs-digitalocean-vs-linode?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">伪装成HTTP</a></p><p><br></p><p>最后补一句，chorme有一个插件，速度很慢但好像不太容易挂（虽然浏览器会定期自动删掉这个插件</p><p>应急的时候可以尝试</p><p><br></p><p>先到这儿，希望永远不要有研究新方法的需求</p><p>祈祷一下这回梯子能留久一点</p><p>刷ins去了 bye</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;不得不说国庆以来真的越查越严，中间换了有几十个梯子，最长的没撑过半个月（哭），最近甚至平均每三分钟挂掉一个（搭完打开google验证搭成功了，然后打开gmail收一下邮件，然后就没有然后了）。于是意识到ss不香了，不得不另辟蹊径。然后在十五分钟前，
      
    
    </summary>
    
      <category term="Tricks" scheme="https://iris-cyy.github.io/categories/Tricks/"/>
    
    
      <category term="Tricks" scheme="https://iris-cyy.github.io/tags/Tricks/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Basis</title>
    <link href="https://iris-cyy.github.io//Notes/Python/2020-02-25/python_basis/"/>
    <id>https://iris-cyy.github.io//Notes/Python/2020-02-25/python_basis/</id>
    <published>2020-02-25T10:09:53.000Z</published>
    <updated>2020-03-10T04:53:58.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li><p>数字、字母、下划线</p></li><li><p>必须以字母或下划线开头，不能以数字开头</p></li><li><p>大小写敏感</p></li><li><p>不能是关键字（保留字）</p><ul><li><p>Python2 的关键字：<br><img src="/images/python/python-basis.assets/image-20200225182820298.png" alt="image-20200225182820298"></p></li><li><p>Python3 的关键字<br><img src="/images/python/python-basis.assets/image-20200225183717669.png" alt="image-20200225183717669"></p></li></ul></li></ul><h3 id="id函数"><a href="#id函数" class="headerlink" title="id函数"></a><code>id</code>函数</h3><p>变量将名字和对象关联起来，赋值操作并不会实际复制值，只是为数据对象取相关名字。名字是对象的引用而不是对象本身。</p><p>小整数（-5 ～ 256）直接作为对象存储，地址固定，而其他的整数地址要临时分配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">7</span></span><br><span class="line">b = <span class="number">7</span></span><br><span class="line">id(a) == id(b) <span class="comment">#true</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">1000</span></span><br><span class="line">d = <span class="number">1000</span></span><br><span class="line">id(c) == id(d) <span class="comment">#false</span></span><br></pre></td></tr></table></figure><p><code>del()</code>函数用于删除变量</p><p><br></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><code>input()</code>：读入一整行作为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;变量&gt; = input(&lt;提示性文字&gt;)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>input(<span class="string">"请输入："</span>)</span><br><span class="line">请输入：</span><br></pre></td></tr></table></figure><p>输入integer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = int(input())</span><br><span class="line"><span class="comment"># 其实int()是一个方法，完整表示是class int(x, base=10)</span></span><br><span class="line"><span class="comment"># x是字符串或者数字，base是进制，默认是十进制</span></span><br></pre></td></tr></table></figure><p>同时为多个变量赋值</p><p>用<code>split()</code>函数，用于把字符串按” “分开成一个list（每个元素都是字符串），也可以按照其他元素分开，给<code>split()</code>参数即可，例如3#4#5按#分开，用<code>split(&#39;#&#39;)</code>（即<code>split()</code>的参数默认为’ ‘）</p><p>在同行用空格分格读取三个整数的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = map(int, input().split())</span><br></pre></td></tr></table></figure><p>另外一种trick</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = eval(input()) <span class="comment"># 适用输入类似1，2，3情况（eval为直接去除字符串两边的“”，相当于三对三赋值）</span></span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><code>print()</code>：以字符形式输出变量，可以输出各种类型变量的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="number">3</span> <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b, c = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b, c, <span class="number">5</span>)</span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>更改<code>end</code>参数可以做到不换行输出等（<code>end</code>默认是<code>\n</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">3</span>, end=<span class="string">''</span>)</span><br><span class="line">print(<span class="number">4</span>, end=<span class="string">''</span>)</span><br><span class="line"><span class="comment">#输出34</span></span><br></pre></td></tr></table></figure><p>通过<code>%</code>来选择要输出的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "&lt;格式字符串&gt;" %(&lt;输出对象&gt;, &lt;输出对象&gt; ...)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"Celsuis: %3d Fahr: %6.1f"</span> %(celsuis, fahr))</span><br></pre></td></tr></table></figure><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><h5 id=""><a href="#" class="headerlink" title="%"></a><code>%</code></h5><p>整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%o'</span> %<span class="number">20</span>) <span class="comment"># %o 八进制</span></span><br><span class="line"><span class="number">2</span> <span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%d'</span> %<span class="number">20</span>) <span class="comment"># %d 十进制</span></span><br><span class="line"><span class="number">4</span> <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%x'</span> %<span class="number">20</span>) <span class="comment"># %x 十六进制</span></span><br><span class="line"><span class="number">6</span> <span class="number">14</span></span><br></pre></td></tr></table></figure><p>浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %f ——保留小数点后面六位有效数字</span></span><br><span class="line"><span class="comment"># 　　%.3f，保留3位小数位</span></span><br><span class="line"><span class="comment"># %e ——保留小数点后面六位有效数字，指数形式输出</span></span><br><span class="line"><span class="comment"># 　　%.3e，保留3位小数位，使用科学计数法</span></span><br><span class="line"><span class="comment"># %g ——在保证六位有效数字的前提下，使用小数方式，否则使用科学计数法</span></span><br><span class="line"><span class="comment"># 　　%.3g，保留3位有效数字，使用小数或科学计数法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%f'</span> % <span class="number">1.11</span>)  <span class="comment"># 默认保留6位小数</span></span><br><span class="line"><span class="number">1.110000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%.1f'</span> % <span class="number">1.11</span>)  <span class="comment"># 取1位小数</span></span><br><span class="line"><span class="number">1.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%e'</span> % <span class="number">1.11</span>)  <span class="comment"># 默认6位小数，用科学计数法</span></span><br><span class="line"><span class="number">1.110000e+00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%.3e'</span> % <span class="number">1.11</span>)  <span class="comment"># 取3位小数，用科学计数法</span></span><br><span class="line"><span class="number">1.110e+00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%g'</span> % <span class="number">1111.1111</span>)  <span class="comment"># 默认6位有效数字</span></span><br><span class="line"><span class="number">1111.11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%.7g'</span> % <span class="number">1111.1111</span>)  <span class="comment"># 取7位有效数字</span></span><br><span class="line"><span class="number">1111.111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%.2g'</span> % <span class="number">1111.1111</span>)  <span class="comment"># 取2位有效数字，自动转换为科学计数法</span></span><br><span class="line"><span class="number">1.1e+03</span></span><br></pre></td></tr></table></figure><p>字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %s</span></span><br><span class="line"><span class="comment"># %10s——右对齐，占位符10位</span></span><br><span class="line"><span class="comment"># %-10s——左对齐，占位符10位</span></span><br><span class="line"><span class="comment"># %.2s——截取2位字符串</span></span><br><span class="line"><span class="comment"># %10.2s——10位占位符，截取两位字符串</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%s'</span> % <span class="string">'hello world'</span>)  <span class="comment"># 字符串输出</span></span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%20s'</span> % <span class="string">'hello world'</span>)  <span class="comment"># 右对齐，取20位，不够则补位</span></span><br><span class="line">         hello world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%-20s'</span> % <span class="string">'hello world'</span>)  <span class="comment"># 左对齐，取20位，不够则补位</span></span><br><span class="line">hello world         </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%.2s'</span> % <span class="string">'hello world'</span>)  <span class="comment"># 取2位</span></span><br><span class="line">he</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%10.2s'</span> % <span class="string">'hello world'</span>)  <span class="comment"># 右对齐，取2位</span></span><br><span class="line">        he</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%-10.2s'</span> % <span class="string">'hello world'</span>)  <span class="comment"># 左对齐，取2位</span></span><br><span class="line">he</span><br></pre></td></tr></table></figure><h5 id="format-函数"><a href="#format-函数" class="headerlink" title="format()函数"></a><code>format()</code>函数</h5><p>基本格式：<code>str.format()</code></p><p>位置匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(format(<span class="number">57.467645</span>, <span class="string">".3f"</span>))</span><br><span class="line"><span class="number">57.468</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(<span class="string">'hello'</span>,<span class="string">'world'</span>))  <span class="comment"># 不带字段</span></span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'hello'</span>,<span class="string">'world'</span>))  <span class="comment"># 带数字编号</span></span><br><span class="line">hello world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;0&#125; &#123;1&#125; &#123;0&#125;'</span>.format(<span class="string">'hello'</span>,<span class="string">'world'</span>))  <span class="comment"># 打乱顺序</span></span><br><span class="line">hello world hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;1&#125; &#123;1&#125; &#123;0&#125;'</span>.format(<span class="string">'hello'</span>,<span class="string">'world'</span>))</span><br><span class="line">world world hello</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;a&#125; &#123;tom&#125; &#123;a&#125;'</span>.format(tom=<span class="string">'hello'</span>,a=<span class="string">'world'</span>))  <span class="comment"># 带关键字</span></span><br><span class="line">world hello world</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;&#125; and &#123;&#125;'</span>.format(<span class="string">'hello'</span>,<span class="string">'world'</span>))  <span class="comment"># 默认左对齐</span></span><br><span class="line">hello <span class="keyword">and</span> world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:10s&#125; and &#123;:&gt;10s&#125;'</span>.format(<span class="string">'hello'</span>,<span class="string">'world'</span>))  <span class="comment"># 取10位左对齐，取10位右对齐</span></span><br><span class="line">hello      <span class="keyword">and</span>      world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:^10s&#125; and &#123;:^10s&#125;'</span>.format(<span class="string">'hello'</span>,<span class="string">'world'</span>))  <span class="comment"># 取10位中间对齐</span></span><br><span class="line">  hello    <span class="keyword">and</span>   world   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;&#125; is &#123;:.2f&#125;'</span>.format(<span class="number">1.123</span>,<span class="number">1.123</span>))  <span class="comment"># 取2位小数</span></span><br><span class="line"><span class="number">1.123</span> <span class="keyword">is</span> <span class="number">1.12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;0&#125; is &#123;0:&gt;10.2f&#125;'</span>.format(<span class="number">1.123</span>))  <span class="comment"># 取2位小数，右对齐，取10位</span></span><br><span class="line"><span class="number">1.123</span> <span class="keyword">is</span>       <span class="number">1.12</span></span><br></pre></td></tr></table></figure><p>多种格式化：</p><ul><li>‘b’ - 二进制。将数字以2为基数进行输出。</li><li>‘c’ - 字符。在打印之前将整数转换成对应的Unicode字符串。</li><li>‘d’ - 十进制整数。将数字以10为基数进行输出。</li><li>‘o’ - 八进制。将数字以8为基数进行输出。</li><li>‘x’ - 十六进制。将数字以16为基数进行输出，9以上的位数用小写字母。</li><li>‘e’ - 幂符号。用科学计数法打印数字。用’e’表示幂。</li><li>‘g’ - 一般格式。将数值以fixed-point格式输出。当数值特别大的时候，用幂形式打印。</li><li>‘n’ - 数字。当值为整数时和’d’相同，值为浮点数时和’g’相同。不同的是它会根据区域设置插入数字分隔符。</li><li>‘%’ - 百分数。将数值乘以100然后以fixed-point(‘f’)格式打印，值后面会有一个百分号。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;0:b&#125;'</span>.format(<span class="number">3</span>))</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:c&#125;'</span>.format(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:d&#125;'</span>.format(<span class="number">20</span>))</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:o&#125;'</span>.format(<span class="number">20</span>))</span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:x&#125;'</span>.format(<span class="number">20</span>))</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:e&#125;'</span>.format(<span class="number">20</span>))</span><br><span class="line"><span class="number">2.000000e+01</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:g&#125;'</span>.format(<span class="number">20.1</span>))</span><br><span class="line"><span class="number">20.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:f&#125;'</span>.format(<span class="number">20</span>))</span><br><span class="line"><span class="number">20.000000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:n&#125;'</span>.format(<span class="number">20</span>))</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:%&#125;'</span>.format(<span class="number">20</span>))</span><br><span class="line"><span class="number">2000.000000</span>%</span><br></pre></td></tr></table></figure><blockquote><p>格式化输出的做法还挺复杂的，以后写码的时候再具体看吧 ：）</p></blockquote><p><br></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>python没有char没有double，分别用str和float覆盖了</p><p><code>type()</code>可以用来获得数据类型</p><p>True是1，False是0（做算数的时候可以替换，但是<code>type(True)</code>是<code>&lt;class &#39;bool&#39;</code>）</p><h3 id="一些内置的类型转换函数"><a href="#一些内置的类型转换函数" class="headerlink" title="一些内置的类型转换函数"></a>一些内置的类型转换函数</h3><p><code>bool()</code> <code>int()</code> <code>float()</code> <code>str()</code> <code>complex()</code>就不多说了，会自动去掉前后空格、前置0等（但数据中间不能有空格）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">123</span>)</span><br><span class="line"><span class="string">'123'</span></span><br></pre></td></tr></table></figure><p><code>chr()</code>返回整数对应的Unicode字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">65</span>)</span><br><span class="line"><span class="string">'A'</span></span><br></pre></td></tr></table></figure><p><code>ord()</code> 返回Unicode字符对应的整数</p><p>进制转换：<code>bin()</code> <code>oct()</code> <code>hex()</code>（输出是str类型），int可用作转为十进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">3</span>)</span><br><span class="line"><span class="string">'0b11'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">"35"</span>, <span class="number">8</span>) <span class="comment">#把8进制的35转为十进制</span></span><br><span class="line"><span class="number">29</span></span><br></pre></td></tr></table></figure><p><code>list()</code></p><h3 id="整数-int"><a href="#整数-int" class="headerlink" title="整数 int"></a>整数 int</h3><ul><li>二进制：0b或0B</li><li>八进制：0o或0O</li><li>十进制：0x或0X</li></ul><p>64位机器可以表示的最大整数是9223372036854775807（但超过这个范围还是可以被表示）</p><h3 id="浮点数-float"><a href="#浮点数-float" class="headerlink" title="浮点数 float"></a>浮点数 float</h3><p>科学计数法：如<code>1.23e9</code>表示$1.23 \times10^9$，<code>1.2e-5</code>表示0.000012（e前后没有空格，e后面的数字是整数）</p><p>浮点数的表达有误差，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.1</span><span class="number">-2.0</span></span><br><span class="line"><span class="number">0.10000000000000009</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3.2</span>%<span class="number">2</span></span><br><span class="line"><span class="number">1.2000000000000002</span></span><br></pre></td></tr></table></figure><p>可以用<code>sys.float_info</code>查看浮点数信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.float_info</span><br><span class="line">sys.float_info(max=<span class="number">1.7976931348623157e+308</span>, max_exp=<span class="number">1024</span>, max_10_exp=<span class="number">308</span>, min=<span class="number">2.2250738585072014e-308</span>, min_exp=<span class="number">-1021</span>, min_10_exp=<span class="number">-307</span>, dig=<span class="number">15</span>, mant_dig=<span class="number">53</span>, epsilon=<span class="number">2.220446049250313e-16</span>, radix=<span class="number">2</span>, rounds=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p><code>&lt;class &#39;complex&#39;&gt;</code></p><p><code>&lt;real&gt; + &lt;image&gt; j</code> 可以是J或者j</p><p>实部虚部的数据类型都是float</p><p>用<code>complex()</code>函数创建，<code>real</code>方法取实部，<code>imag</code>方法取虚部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = complex(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.real</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.imag</span><br><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure><p>方法conjugate返回复数的共轭复数</p><p>$abs(a+bj) = \sqrt{a^2+b^2}$</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>单引号和双引号没有区别</p><p>当在双引号” “内部还需要使用引号时，可以使用单引号 ’ ’，当在单引号’ ’ 内部需要使用引号时，可以使用双引号” “</p><p>用<code>s[i]</code>访问字符串s中的第i个字符，i=-1时访问最后一个字符</p><p>子串：s[m:n]，访问第m到第n-1组成的子串 </p><p>不以<code>\0</code>作为字符串结尾</p><p><code>\</code>用作转义，<code>\v</code>纵向制表符，<code>\r</code>回车，<code>\f</code>换页</p><p>用三引号时可以在字符串内部换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"""hello </span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">haha"""</span>)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># hello</span></span><br><span class="line"><span class="comment"># world</span></span><br><span class="line"><span class="comment"># haha</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"hello"</span></span><br><span class="line">      <span class="string">"haha"</span>)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># hellohaha</span></span><br></pre></td></tr></table></figure><p>或者可以用<code>\</code>在字符串内部换行，但与三引号不同的是，输出不随之换行，只能用来处理长字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello\</span></span><br><span class="line"><span class="string">world\</span></span><br><span class="line"><span class="string">haha"</span>)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># helloworldhaha</span></span><br></pre></td></tr></table></figure><p><code>+</code>连接两个字符串（必须两个都是str，不能是其他如int等）</p><p><code>*</code>用复制一个字符串若干次形成新的字符串（*后面的必须是整数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ab'</span>*<span class="number">2</span></span><br><span class="line"><span class="string">'abab'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span>*<span class="number">5</span></span><br><span class="line"><span class="string">'aaaaa'</span></span><br></pre></td></tr></table></figure><p><code>s.lower()</code>改成小写，<code>s.upper()</code>改成大写</p><p><code>s.replace(old, new)</code>：把字符串s中的所有子串old都替换成new</p><p>比大小，从前往后按位比，’a’&lt;’b’，’A’&lt;’a’</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&lt;expression&gt; <span class="keyword">for</span> &lt;item&gt; <span class="keyword">in</span> &lt;iterable&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>*n <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum([<span class="number">1</span>/i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>)]) <span class="comment">#求1+1/2+...+1/20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum([ <span class="number">1</span>/i <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span>/i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>)]) <span class="comment">#求1-1/2+1/3-1/4+...前n项和</span></span><br><span class="line"></span><br><span class="line">[&lt;expression&gt; <span class="keyword">for</span> &lt;item&gt; <span class="keyword">in</span> &lt;iterable&gt; <span class="keyword">if</span> &lt;condition&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>*n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">8</span>) <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>]</span><br></pre></td></tr></table></figure><p><br></p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>python中没有++，但是可以用+=</p><p><code>sum()</code>可以给list求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="number">55</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p><code>%</code>模，可以用作浮点数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3.4</span>%<span class="number">2</span></span><br><span class="line"><span class="number">1.4</span></span><br><span class="line"><span class="comment"># 3.4 - 1 * 2 = 1.4</span></span><br><span class="line"><span class="comment"># 但可能会有不精确问题，例如3.2%2=1.2000000000000002</span></span><br></pre></td></tr></table></figure><p><code>/</code>默认是浮点数除法，<code>//</code>默认是整数除法（向下取整，但如果有一个为float则是取整后的float）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>/<span class="number">3</span></span><br><span class="line"><span class="number">1.6666666666666667</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>/<span class="number">2</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>//<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span>//<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">32.2</span>//<span class="number">6</span></span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-3</span>//<span class="number">2</span></span><br><span class="line"><span class="number">-2</span></span><br></pre></td></tr></table></figure><p><code>math.sqrt()</code>或<code>**0.5</code>可以开根号（float类）</p><p>乘方可以用<code>pow()</code>或者<code>**</code></p><p><code>**</code> 运算顺序<u>从右往左</u>，<code>3**2**3</code>先算<code>2**3</code>再算<code>3**8</code></p><p><code>round(x)</code>返回浮点数x的四舍五入的值，<code>round(x,n)</code> 返回浮点数x的四舍五入的小数点后的n位数值</p><blockquote><p>其实是四舍六入五成双。1~4舍去， 6~9进位，当5时，如果5后面还有数字则进位，如果5后面没有数字的情况下，5前面的数字偶数则进位，5前面的数字是奇数则舍去。</p><p>n=0表示精确到个位，-1表示十位，负数以此类推</p></blockquote><p>$ln$：<code>math.log()</code></p><p>$log_{10}$：<code>math.log10()</code></p><p>$log_2$：<code>math.log2()</code></p><p>两个数字之间<code>and</code>，值为后面一个数字（除非有0）</p><p><code>math</code>中的常用函数</p><p><img src="../../../../../../images/python/python-basis.assets/image-20200303103254420.png" width=500></p><p>比大小可以连着来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>&lt;<span class="number">3</span>&lt;<span class="number">5</span> <span class="comment"># 1&lt;3 and 3&lt;5</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>&lt;<span class="number">5</span>&gt;<span class="number">2</span> <span class="comment"># 1&lt;5 and 5&gt;2</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>逻辑运算符，第一个条件符合就不用算第二个（第二个里面有error不会报）</p><p><br></p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>通常一行一条，如一行中有多条，则用分号（;）分开，如果语句太长要跨行，可以续行符（\）跨行表示一个语句</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>不需要事先声明变量名及其类型，直接赋值即可创建各种类型的对象变量</p><p>在c中对变量的赋值，是直接把值给变量，而在python中，变量相当于一个标签，指向一个值。</p><p>所以在python中可以进行同步赋值交换变量的值，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,b = b,a <span class="comment"># 交换变量的值（把a的值给b，把b的值给a）</span></span><br></pre></td></tr></table></figure><h4 id="单变量赋值"><a href="#单变量赋值" class="headerlink" title="单变量赋值"></a>单变量赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k = x + y <span class="comment"># k = 3</span></span><br></pre></td></tr></table></figure><h4 id="序列赋值"><a href="#序列赋值" class="headerlink" title="序列赋值"></a>序列赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y = <span class="number">4</span>,<span class="number">8</span> <span class="comment"># x = 4, y = 8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = <span class="string">"34"</span> <span class="comment"># a = 3, b = 4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = <span class="string">"345"</span> <span class="comment"># error</span></span><br></pre></td></tr></table></figure><h4 id="不等长序列赋值"><a href="#不等长序列赋值" class="headerlink" title="不等长序列赋值"></a>不等长序列赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>i, *j = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># i = 1, j = [2,3], i是int，j是list（注意j前面的*不能漏）</span></span><br></pre></td></tr></table></figure><h4 id="复合赋值"><a href="#复合赋值" class="headerlink" title="复合赋值"></a>复合赋值</h4><p>*=， +=， -= …</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>if-else，注意冒号和缩进，语句块要对齐</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;container&gt;</span><br><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;list&gt;</span><br><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> range(&lt;value&gt;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">range(start, stop, step)</span><br><span class="line"><span class="comment"># 左闭右开，start默认为0，step默认为1，可以为负</span></span><br><span class="line"><span class="comment"># 如果省略了start，必须也省略step</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;h3 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;标识符&lt;/h3&gt;&lt;u
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Python" scheme="https://iris-cyy.github.io/categories/Notes/Python/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="Python" scheme="https://iris-cyy.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Introduction</title>
    <link href="https://iris-cyy.github.io//Notes/Python/2020-02-25/python_intro/"/>
    <id>https://iris-cyy.github.io//Notes/Python/2020-02-25/python_intro/</id>
    <published>2020-02-25T09:50:55.000Z</published>
    <updated>2020-02-26T03:44:13.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>文本编码，二进制编码表示字母、数字、专门符号</p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>业界标准，跨语言、跨平台（可表示汉字）</p><p>可变字节不可变长</p><p>用”\u”表示Unicode码</p><p><a href="https://unicode-table.com" target="_blank" rel="noopener">Unicode字符与编码对照表</a></p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>针对Unicode的<u>可变长度</u>字符编码</p><p>并非存储器中编码，使用时把Unicode字符转换为UTF-8</p><p>每一个ASCII字符有一个UTF-8编码，正好与8位ASCII编码一样</p><p><u>Python3默认为UTF-8编码</u></p><p>输出编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(s.encode(<span class="string">"utf-8"</span>)) <span class="comment"># s为字符串，输出的是每个字符对应的utf-8编码连起来</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>面向对象</p><p>解释型语言</p><p>Python官网：<a href="https://www.python.org" target="_blank" rel="noopener">https://www.python.org</a></p><p>一些IDE：</p><ul><li><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a></li><li><a href="https://github.com/spyder-ide/spyder" target="_blank" rel="noopener">Spyder</a></li><li><p><a href="https://thonny.org/" target="_blank" rel="noopener">Thonny</a></p></li><li><p><a href="https://www.sublimetext.com" target="_blank" rel="noopener">Sublime Text</a></p></li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a></li></ul><p>在线环境：</p><ul><li><a href="https://clin.icourse163.org/py" target="_blank" rel="noopener">https://clin.icourse163.org/py</a></li><li><a href="http://pythontutor.com/" target="_blank" rel="noopener">http://pythontutor.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编码&quot;&gt;&lt;a href=&quot;#编码&quot; class=&quot;headerlink&quot; title=&quot;编码&quot;&gt;&lt;/a&gt;编码&lt;/h2&gt;&lt;h3 id=&quot;ASCII&quot;&gt;&lt;a href=&quot;#ASCII&quot; class=&quot;headerlink&quot; title=&quot;ASCII&quot;&gt;&lt;/a&gt;ASCI
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Python" scheme="https://iris-cyy.github.io/categories/Notes/Python/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="Python" scheme="https://iris-cyy.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1012 The Best Rank</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-16/pat_1012/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-16/pat_1012/</id>
    <published>2020-02-16T09:56:28.000Z</published>
    <updated>2020-02-25T15:50:47.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p><p>For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p><blockquote><table><thead><tr><th>StudentID</th><th>C</th><th>M</th><th>E</th><th>A</th></tr></thead><tbody><tr><td>310101</td><td>98</td><td>85</td><td>88</td><td>90</td></tr><tr><td>310102</td><td>70</td><td>95</td><td>88</td><td>84</td></tr><tr><td>310103</td><td>82</td><td>87</td><td>94</td><td>88</td></tr><tr><td>310104</td><td>91</td><td>91</td><td>91</td><td>91</td></tr></tbody></table></blockquote><p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 2 numbers $N$ and $M (≤2000)$, which are the total number of students, and the number of students who would check their ranks, respectively. Then $N$ lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are $M$ lines, each containing a student ID.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the $M$ students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p><p>The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p><p>If a student is not on the grading list, simply output <code>N/A</code>.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>5 6<br>310101 98 85 88<br>310102 70 95 88<br>310103 82 87 94<br>310104 91 91 91<br>310105 85 90 90<br>310101<br>310102<br>310103<br>310104<br>310105<br>999999</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>1 C<br>1 M<br>1 E<br>1 A<br>3 A<br>N/A</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目不太难，比较考察对STL的应用</p><p>题目对算法复杂度要求不太高，所以直接用STL的sort函数排序，线性遍历</p><p>用到<code>vector</code>以及一些相关的函数</p><p>思路是，用<code>vector</code>存储学生的列表和分数的列表，将分数列表中的分数按从大到小排序之后，下标即对应排名（其中如果有相同分数，取最小的下标）</p><p>需要注意的是：</p><ul><li>相同分数的排序<br>如<code>95 90 90 88</code>排名是<code>1 2 2 4</code></li><li>优先级<code>A &gt; C &gt; M &gt; E</code></li><li>平均分取整（直接<code>int</code>就行）</li></ul><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//0 1 2 3</span></span><br><span class="line"><span class="comment">//A C M E</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> grade[<span class="number">4</span>]; <span class="comment">//各科分数</span></span><br><span class="line">    <span class="keyword">int</span> rank[<span class="number">4</span>]; <span class="comment">//各科排名</span></span><br><span class="line">    <span class="keyword">int</span> bestRank; <span class="comment">//最高排名，0表示还没找</span></span><br><span class="line">    <span class="keyword">int</span> bestCourse; <span class="comment">//最高排名对应的学科</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;struct student&gt; students; <span class="comment">//学生列表</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Rank[<span class="number">4</span>]; <span class="comment">//分数列表，下标对应排名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> course[<span class="number">4</span>] = &#123;<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'E'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> M, N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到该学生各科分数对应的排名</span></span><br><span class="line"><span class="function">struct student <span class="title">findRank</span><span class="params">(struct student stu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ra, rc, rm, re;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;Rank[i].<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Rank[i][j] == stu.grade[i])&#123;</span><br><span class="line">                stu.rank[i] = j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//注意这个break不能漏</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找最高排名，标注对应课程</span></span><br><span class="line">    ra = stu.rank[<span class="number">0</span>];</span><br><span class="line">    rc = stu.rank[<span class="number">1</span>];</span><br><span class="line">    rm = stu.rank[<span class="number">2</span>];</span><br><span class="line">    re = stu.rank[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span>(ra &lt;= rc)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ra &lt;= rm)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ra &lt;= re)&#123;</span><br><span class="line">                stu.bestRank = ra;</span><br><span class="line">                stu.bestCourse = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stu.bestRank = re;</span><br><span class="line">                stu.bestCourse = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(rm &lt;= re)&#123;</span><br><span class="line">                stu.bestRank = rm;</span><br><span class="line">                stu.bestCourse = <span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stu.bestRank = re;</span><br><span class="line">                stu.bestCourse = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rc &lt;= rm)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rc &lt;= re)&#123;</span><br><span class="line">                stu.bestRank = rc;</span><br><span class="line">                stu.bestCourse = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stu.bestRank = re;</span><br><span class="line">                stu.bestCourse = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(rm &lt;= re)&#123;</span><br><span class="line">                stu.bestRank = rm;</span><br><span class="line">                stu.bestCourse = <span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stu.bestRank = re;</span><br><span class="line">                stu.bestCourse = <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">int</span> id, c, m, e, a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">newStu</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; id &gt;&gt; c &gt;&gt; m &gt;&gt; e;</span><br><span class="line">        a = (c + m + e) / <span class="number">3</span>; <span class="comment">//平均分</span></span><br><span class="line">        newStu.id = id;</span><br><span class="line">        newStu.grade[<span class="number">0</span>] = a;</span><br><span class="line">        Rank[<span class="number">0</span>].push_back(a);</span><br><span class="line">        newStu.grade[<span class="number">1</span>] = c;</span><br><span class="line">        Rank[<span class="number">1</span>].push_back(c);</span><br><span class="line">        newStu.grade[<span class="number">2</span>] = m;</span><br><span class="line">        Rank[<span class="number">2</span>].push_back(m);</span><br><span class="line">        newStu.grade[<span class="number">3</span>] = e;</span><br><span class="line">        Rank[<span class="number">3</span>].push_back(e);</span><br><span class="line">        students.push_back(newStu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//各分数列表按从高到低排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">        sort(Rank[i].<span class="built_in">begin</span>(), Rank[i].<span class="built_in">end</span>(), cmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">find</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(students[j].id == id)&#123;</span><br><span class="line">                <span class="built_in">find</span> = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//如果已经找到过最佳排名就不用再调一遍函数，直接输出就好。否则调函数求一下</span></span><br><span class="line">                <span class="comment">//（减少重复检索时候的复杂度）</span></span><br><span class="line">                <span class="keyword">if</span>(students[j].bestRank == <span class="number">0</span>)&#123; </span><br><span class="line">                    students[j] = findRank(students[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; students[j].bestRank &lt;&lt; <span class="string">" "</span> &lt;&lt; course[students[j].bestCourse] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"N/A"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;To evaluate the performance of our first year CS m
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1011 World Cup Betting</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-11/pat_1011/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-11/pat_1011/</id>
    <published>2020-02-11T09:53:20.000Z</published>
    <updated>2020-02-11T09:57:06.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>With the 2010 FIFA World Cup running, football fans the world over were becoming increasingly excited as the best players from the best teams doing battles for the World Cup trophy in South Africa. Similarly, football betting fans were putting their money where their mouths were, by laying all manner of World Cup bets.</p><p>Chinese Football Lottery provided a “Triple Winning” game. The rule of winning was simple: first select any three of the games. Then for each selected game, bet on one of the three possible results – namely <code>W</code> for win, <code>T</code> for tie, and <code>L</code> for lose. There was an odd assigned to each result. The winner’s odd would be the product of the three odds times 65%.</p><p>For example, 3 games’ odds are given as the following:</p><blockquote><p> W    T    L<br>1.1  2.5  1.7<br>1.2  3.1  1.6<br>4.1  1.2  1.1</p></blockquote><p>To obtain the maximum profit, one must buy <code>W</code> for the 3rd game, <code>T</code> for the 2nd game, and <code>T</code> for the 1st game. If each bet takes 2 yuans, then the maximum profit would be (4.1×3.1×2.5×65%−1)×2=39.31 yuans (accurate up to 2 decimal places).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the betting information of 3 games. Each game occupies a line with three distinct odds corresponding to <code>W</code>, <code>T</code> and <code>L</code>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the best bet of each game, and the maximum profit accurate up to 2 decimal places. The characters and the number must be separated by one space.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>1.1 2.5 1.7<br>1.2 3.1 1.6<br>4.1 1.2 1.1</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>T T W 39.31</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>简单题直接上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">maxp</span><span class="params">(<span class="keyword">double</span> w, <span class="keyword">double</span> t, <span class="keyword">double</span> l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(w &gt; t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; w)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"L "</span>;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"W "</span>;</span><br><span class="line">            <span class="keyword">return</span> w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; t)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"L "</span>;</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"T "</span>;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> profit = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> w[<span class="number">3</span>], t[<span class="number">3</span>], l[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w[i] &gt;&gt; t[i] &gt;&gt; l[i];</span><br><span class="line">        profit *= maxp(w[i], t[i], l[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    profit = (profit * <span class="number">0.65</span> - <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, profit);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;With the 2010 FIFA World Cup running, football fan
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 06. Relational Database Design</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs06/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs06/</id>
    <published>2020-02-11T09:17:19.000Z</published>
    <updated>2020-02-11T09:19:53.114Z</updated>
    
    <content type="html"><![CDATA[<p><img src="dbs06.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211171822167.png" width=80%></p><h2 id="First-Normal-Form"><a href="#First-Normal-Form" class="headerlink" title="First Normal Form"></a>First Normal Form</h2><p>atomic</p><h2 id="Functional-dependencies"><a href="#Functional-dependencies" class="headerlink" title="Functional dependencies"></a>Functional dependencies</h2><p>The functional dependency α → β holds on R if and only if for any legal relations r(R), whenever any two tuples t1 and t2 of r agree on the attributes α, they also agree on the attributes β, i.e., t1[α] = t2[α] ⟹ t1[α] = t2[β] </p><p>Trivial: α → β, if β ⊆ α         (平凡的函数依赖) </p><p>Non-trivial: α → β , if β ⊈ α    (非平凡的函数依赖) </p><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>The set of all functional dependencies logically implied by F is the closure of F, denoted by F+ (函数依赖集F的闭包)</p><p>E.g., F = {A → B, B → C}, F+ = {A → B, B → C, A → C, A α A, AB → A, AB → B, AC → C, A → BC, …} </p><p>Armstrong’s Axioms provide inference rules to find F+. </p><p>We can find all of F+ by applying Armstrong’s Axioms: </p><p>If β ⊆ α, then α → β               (reflexivity, 自反律) — trivial </p><p>If α → β, then ?α → ?β (?α → β)    (augmentation, 增补律) </p><p>If α → β, and β → ?, then α → ?   (transitivity, 传递律) </p><p>If α → β and α → ? holds, then α → β? holds (union, 合并律) </p><p>If α → β? holds, then α → β and α → ? holds (decomposition, 分解律) </p><p>If α → β and β? → δ holds, then α? → δ holds (pseudotransitivity, 伪传递律) </p><h2 id="Canonical-cover（正则覆盖）"><a href="#Canonical-cover（正则覆盖）" class="headerlink" title="Canonical cover（正则覆盖）"></a>Canonical cover（正则覆盖）</h2><p>minimal set of functional dependencies in F</p><h2 id="Dependency-preservation（依赖保持）"><a href="#Dependency-preservation（依赖保持）" class="headerlink" title="Dependency preservation（依赖保持）"></a>Dependency preservation（依赖保持）</h2><h2 id="lossless-join-无损分解"><a href="#lossless-join-无损分解" class="headerlink" title="lossless-join 无损分解"></a>lossless-join 无损分解</h2><p>$R_1 \bigcap R_2 \rightarrow R_1 or R_1 \bigcap R_2 \rightarrow R_2$</p><h2 id="Boyce-Codd-Normal-Form"><a href="#Boyce-Codd-Normal-Form" class="headerlink" title="Boyce-Codd Normal Form"></a>Boyce-Codd Normal Form</h2><p><img src="/images/dbs/dbs06.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211171730017.png" alt="在这里插入图片描述"></p><h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><p><img src="/images/dbs/dbs06.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211171730061.png" alt="在这里插入图片描述"></p><p>If a relation is in BCNF, it is in 3NF.</p><p><br></p><hr><p>另外一些相关的博文：</p><p><a href="https://www.cnblogs.com/langdashu/p/5924082.html" target="_blank" rel="noopener">https://www.cnblogs.com/langdashu/p/5924082.html</a></p><p>BCNF 无损分解：<a href="https://blog.csdn.net/panxiqie___/article/details/38899021" target="_blank" rel="noopener">https://blog.csdn.net/panxiqie___/article/details/38899021</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;dbs06.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 09. Storage and File Structure</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs09/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs09/</id>
    <published>2020-02-11T09:13:49.000Z</published>
    <updated>2020-02-11T09:16:59.974Z</updated>
    
    <content type="html"><![CDATA[<p>存储器层次结构（向上变快变贵但是易失）</p><p><img src="/images/dbs/dbs09.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211171459877.png" alt="img"></p><p><strong>基本存储</strong>(primary storage): 高速缓冲存储器(cache)、主存储器(main memory)</p><p><strong>辅助存储</strong>(secondary storage)或<strong>联机存储</strong>(online storage): 基本存储下一层，如磁盘(magnetic disk)</p><p><strong>三级存储</strong>(tertiary storage)或<strong>脱机存储</strong>(offline storage): 最底层，如磁带(magnetic tapes)或光盘(optical disk)</p><p>主存储器以上均为<strong>易失性存储</strong>(volatile storage)：设备断电后失去所有内容</p><p>独立磁盘冗余阵列(RAID)</p><p>平均故障时间(MTTF)</p><p>RAID level:</p><p><img src="/images/dbs/dbs09.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211171600064.png" width=50%></p><h3 id="Choice-of-RAID-Level"><a href="#Choice-of-RAID-Level" class="headerlink" title="Choice of RAID Level"></a>Choice of RAID Level</h3><p>Factors in choosing RAID level </p><ul><li>Monetary cost </li><li>Performance: Number of I/O operations per second, and bandwidth during normal operation </li><li>Performance during failure </li><li>Performance during rebuild of failed disk <ul><li>Including time taken to rebuild failed disk </li></ul></li></ul><p>RAID 0 is used only when data safety is not important </p><ul><li>E.g., data can be recovered quickly from other sources</li></ul><p>Level 2 and 4 never used since they are subsumed by 3 and 5<br>Level 3 is not used anymore since bit-striping forces single block  reads to access all disks, wasting disk arm movement, which block striping (level 5) avoids<br>Level 6 is rarely used since levels 1 and 5 offer adequate safety for almost all applications<br><u>So competition is between 1 and 5 only</u></p><p>Level 1 provides much better write performance than level 5</p><ul><li>Level 5 requires at least 2 block reads and 2 block writes to write a single block, whereas Level 1 only requires 2 block writes</li><li>Level 1 preferred for high update environments such as log disks</li></ul><p>Level 1 had higher storage cost than level 5</p><ul><li>Disk drive capacities increasing rapidly (50%/year) whereas disk access times have decreased much less (x 3 in 10 years) </li><li>I/O requirements have increased greatly, e.g. for Web servers</li><li>When enough disks have been bought to satisfy required rate of I/O, they often have spare storage capacity<ul><li>So there is often no extra monetary cost for Level 1! </li></ul></li></ul><p>Level 5 is preferred for applications with low update rate, and large amounts of data.<br>Level 1 is preferred for all other applications. </p><h3 id="Buffer-Manager"><a href="#Buffer-Manager" class="headerlink" title="Buffer Manager"></a>Buffer Manager</h3><p>当Buffer的空闲区不够，不能容下新读入的Block时，需要将Buffer中 原有Block覆盖(替换)。主要策略为:</p><ul><li>LRU strategy (Least Recently Used, 最近最少使用策略): Replace the block which was least recently used.</li><li>MRU strategy (Most recently used, 最近最常用策略): System must pin the block currently being processed. After the final tuple of that block has been processed, the block is unpinned, and it becomes the most recently used block.（最优）</li><li>Toss-immediate，立即丢弃策略：处理完的元组立即丢弃</li></ul><h3 id="File-Organization"><a href="#File-Organization" class="headerlink" title="File Organization"></a>File Organization</h3><ul><li>定长记录</li><li>变长记录</li></ul><h3 id="Organization-of-Records-in-Files"><a href="#Organization-of-Records-in-Files" class="headerlink" title="Organization of Records in Files"></a>Organization of Records in Files</h3><ul><li>heap file 堆文件，流水文件：<br> a record can be placed anywhere in the file where there is space</li><li>sequential file 顺序文件：<br>store records in sequential order, based on the value of a search key of each record</li><li>hashing file 散列文件：<br>a hash function computed on some attribute of each record; the result specifies in which block of the file the record should be placed</li><li>clustering file organization 聚集文件组织：<br>records of several different relations can be stored in the same file<br>Motivation: store related records in different relations on the same block to minimize I/O</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;存储器层次结构（向上变快变贵但是易失）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dbs/dbs09.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ub
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 10. Indexing and Hashing</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs10/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs10/</id>
    <published>2020-02-11T09:09:01.000Z</published>
    <updated>2020-02-11T09:13:10.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>顺序索引</strong>：基于值的顺序排序<br><strong>散列索引</strong>：基于将值平均分布到若干散列桶中</p><p><strong>聚集索引</strong>（clustering index）or <strong>主索引</strong>（primary index）：如果包含记录的文件按照某个搜索码指定的顺序排序，那么该搜索码对应的索引称为聚集索引。聚集索引的搜索码常常是主码，尽管并非必须如此。<br><strong>非聚集索引</strong>（nonclustering index）or <strong>辅助索引</strong>（secondary index）：搜索码指定的顺序与文件中记录的物理顺序不同的索引称为非聚集索引</p><p><strong>稠密索引</strong>（dense index）：在稠密索引中，文件中的每个搜索码值都有一个索引项。在稠密非聚集索引中，索引必须存储指向所有具有相同搜索码值的记录的指针列表。<br><strong>稀疏索引</strong>（sparse index）：在稀硫索引中，只为搜索码的某些值建立索引项，<u>只有索引是聚集索引时才能使用稀疏索引</u>。<br><br></br></p><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><p>叶结点最多有 $n-1$ 个值，最少有 $\lceil (n-1)/2\rceil$ 个值</p><p>非叶节点最多可容纳 $n$ 个指针，最少必须有 $\lceil n/2\rceil$ 个指针</p><h3 id="insertion"><a href="#insertion" class="headerlink" title="insertion"></a>insertion</h3><p><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>insert  “Adams”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911181.png" alt="在这里插入图片描述"></p><p>insert  “Lamport”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911232.png" alt="在这里插入图片描述"></p><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><p><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911238.png" alt="在这里插入图片描述"></p><p>delete “Srinivasan”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911270.png" alt="在这里插入图片描述"></p><p>delete “Singh” and “Wu”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911259.png" alt="在这里插入图片描述"></p><p>delete “Gold”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911302.png" alt="在这里插入图片描述"></p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p>Similar to B+tree, but B-tree allows search-key values to appear only once; eliminates redundant storage of search keys.</p><p><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911324.png" alt="在这里插入图片描述"></p><ul><li>Advantages of B-Tree indices:<br>➢ May use less tree nodes than a corresponding B+tree (because of duplicate).<br>➢ Sometimes possible to find search-key value before reaching leaf node.</li><li>Disadvantages of B-Tree indices:<br>➢ Only small fraction of all search-key values are found early<br>➢ Non-leaf nodes are larger, so fan-out is reduced. Thus B-Trees typically have greater depth than corresponding B+Tree<br>➢ Insertion and deletion more complicated than in B+Trees<br>➢ Implementation is harder than B+Trees.<br>因而许多数据库实现使用B+树</li></ul><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>bucket overflow（桶溢出）处理：</p><ul><li>close addressing：增加溢出桶、溢出链，用来存储溢出部分</li><li>open addressing：溢出部分放到别的桶中（无溢出链）<br><br></li></ul><h2 id="Dynamic-Hashing-动态散列"><a href="#Dynamic-Hashing-动态散列" class="headerlink" title="Dynamic Hashing   动态散列"></a>Dynamic Hashing   动态散列</h2><p>extendable hashing 可扩充散列</p><p><a href="https://www.cnblogs.com/kegeyang/archive/2012/04/05/2432608.html" target="_blank" rel="noopener">https://www.cnblogs.com/kegeyang/archive/2012/04/05/2432608.html</a><br><br></p><h2 id="Index-Definition-in-SQL"><a href="#Index-Definition-in-SQL" class="headerlink" title="Index Definition in SQL"></a>Index Definition in SQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> &lt;<span class="keyword">index</span>-<span class="keyword">name</span>&gt; <span class="keyword">on</span> &lt;<span class="keyword">table</span>-<span class="keyword">name</span>&gt; (&lt;<span class="keyword">attribute</span>-<span class="keyword">list</span>&gt;)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> uni-acnt-<span class="keyword">index</span> <span class="keyword">on</span> <span class="keyword">account</span>(<span class="keyword">account</span>- <span class="built_in">number</span>)</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> &lt;<span class="keyword">index</span>-<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="Bitmap-Indices"><a href="#Bitmap-Indices" class="headerlink" title="Bitmap Indices"></a>Bitmap Indices</h2><p><img src="/images/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211171147910.png" alt="img"></p><p><br></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/hellojoy/article/details/81740997" target="_blank" rel="noopener">https://blog.csdn.net/hellojoy/article/details/81740997</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;顺序索引&lt;/strong&gt;：基于值的顺序排序&lt;br&gt;&lt;strong&gt;散列索引&lt;/strong&gt;：基于将值平均分布到若干散列桶
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 11. Query Processing</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs11/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs11/</id>
    <published>2020-02-11T08:45:31.000Z</published>
    <updated>2020-02-11T09:08:37.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Meaturing-of-query-cost"><a href="#Meaturing-of-query-cost" class="headerlink" title="Meaturing of query cost"></a>Meaturing of query cost</h2><p>$t_T$ – time to transfer one block. (≈ 0.1ms)<br>$t_S$ – time for one seek. (≈ 4ms)<br>Cost for b block transfers plus S seeks :  $b<em> t_T + S</em> t_S$</p><p><img src="/images/dbs/dbs11.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211164548821.png" alt="11"></p><h2 id="External-merge-sort"><a href="#External-merge-sort" class="headerlink" title="External merge sort"></a>External merge sort</h2><p>cost:<br>M: 缓冲区能容纳的磁盘块数<br>$b_r$: 关系r中记录的磁盘块数<br>$b_b$: 每次从一个归并段读取的数据数<br>merge passes required: $\; \lceil log_{M-1}(b_r/M) \rceil$<br>total number of block transfer:  $\; b_r(2\lceil log_{M-1}(b_r/M) \rceil + 1)$<br>total number of seeks: $\; 2\lceil b_r/M \rceil + \lceil b_r / b_b \rceil (2 \lceil log_{M-1}(b_r/M) \rceil -1 )$<br><br></p><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><p>元组数较少的关系作为外层关系时效果较好</p><h3 id="nested-loop-join-嵌套循环连接"><a href="#nested-loop-join-嵌套循环连接" class="headerlink" title="nested-loop join  嵌套循环连接"></a>nested-loop join  嵌套循环连接</h3><p>n: 元组数（记录数）， b: 磁盘块数</p><p>worst case: $\; n_r * b_s+b_r$ block transfer, plus $n_r +b_r$ disk seeks</p><p>best case: $\; b_r + b_s$ block transfer, plus 2 seeks</p><h3 id="block-nested-loop-join-块嵌套循环连接"><a href="#block-nested-loop-join-块嵌套循环连接" class="headerlink" title="block nested-loop join 块嵌套循环连接"></a>block nested-loop join 块嵌套循环连接</h3><p>worst case: $\; b_r <em> b_s+b_r$ block transfer, plus $2</em>b_r$ seeks</p><p>best case: $\; b_r + b_s$ block transfer, plus 2 seeks</p><p>improve: $\; \lceil b_r / (M-2) * b_s + b_r \rceil$ block transfer, plus $2\lceil b_r / (M-2 ) \rceil$ seeks</p><h3 id="indexed-nested-loop-join-索引嵌套循环连接"><a href="#indexed-nested-loop-join-索引嵌套循环连接" class="headerlink" title="indexed nested-loop join 索引嵌套循环连接"></a>indexed nested-loop join 索引嵌套循环连接</h3><p>c: 用连接条件对s进行单次选择操作的代价</p><p>cost of join: $\; b_r(t_T+t_S)+n_r*c$</p><h3 id="merge-join-排序归并连接"><a href="#merge-join-排序归并连接" class="headerlink" title="merge-join 排序归并连接"></a>merge-join 排序归并连接</h3><p>$b_r+b_s$ block transfers + $\lceil b_r/b_b \rceil + \lceil b_s / b_b \rceil$ seeks</p><h3 id="hash-join"><a href="#hash-join" class="headerlink" title="hash-join"></a>hash-join</h3><p>$M&gt;n_h +1$ 或 $M&gt;(b_s+M)+1$ 或 $M&gt;\sqrt {b_s}$ 时不需要递归划分</p><p>不需要递归划分时：$3(b_r + b_s) +4 * n_h$ block transfers + $2( \lceil b_r / b_b \rceil + \lceil b_s/b_b \rceil)$ seeks</p><p>需要递归划分时：$2(b_r + b_s) \lceil log_{M–1}(b_s) – 1 \rceil + b_r + b_s$ block transfers + $2(\lceil b_r / b_b \rceil + \lceil b_s / b_b \rceil ) \lceil log_{M–1}(b_s) – 1 \rceil$ seeks</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Meaturing-of-query-cost&quot;&gt;&lt;a href=&quot;#Meaturing-of-query-cost&quot; class=&quot;headerlink&quot; title=&quot;Meaturing of query cost&quot;&gt;&lt;/a&gt;Meaturing of quer
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 03. SQL</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs03/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs03/</id>
    <published>2020-02-11T08:41:25.000Z</published>
    <updated>2020-02-11T08:45:16.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Data-Definition-Language"><a href="#Data-Definition-Language" class="headerlink" title="Data Definition Language"></a>Data Definition Language</h2><h3 id="Domain-Types-in-SQL"><a href="#Domain-Types-in-SQL" class="headerlink" title="Domain Types in SQL"></a>Domain Types in SQL</h3><ul><li><strong>char(n)</strong>: Fixed length character string, with user-specified length. </li><li><strong>varchar(n)</strong>: Variable length character strings, with user-specified maximum length n. </li><li><strong>int</strong>: Integer (a finite subset of the integers that is machine-dependent). </li><li><strong>smallint</strong>: Small integer (a machine-dependent subset of the integer domain type). </li><li><strong>numeric(p, d)</strong>: Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. </li><li><p><strong>real, double precision</strong>: Floating point and double-precision floating point numbers, with machine-dependent precision. </p></li><li><p><strong>float(n)</strong>: Floating point number, with user-specified precision of at least <em>n</em> digits. </p></li><li><p>Null values are allowed in all the domain types. Declaring an attribute to be not null prohibits null values for that attribute. </p></li><li><p><strong>date</strong>: Dates, containing a (4 digits) year, month and date. </p><p>E.g., date ‘2007-2-27’  </p></li><li><p><strong>Time</strong>: Time of day, in hours, minutes and seconds. </p><p>E.g., time ‘11:18:16’, time ‘11:18:16.28’ </p></li><li><p><strong>timestamp</strong>: date plus time of day. </p><p>E.g., timestamp ‘2011-3-17 11:18:16.28’ </p></li></ul><h3 id="Creat-Table"><a href="#Creat-Table" class="headerlink" title="Creat Table"></a>Creat Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> r (A1 D1, A2 D2, ..., An Dn,</span><br><span class="line">              (integrity constraint1), </span><br><span class="line">              ..., </span><br><span class="line">              (integrity constraintk))</span><br></pre></td></tr></table></figure><ul><li><p>r  is the name of the relation </p></li><li><p>Each Ai  is an attribute name in the schema of relation r </p></li><li><p>Di  is the data type of values in the domain of attribute Ai </p></li></ul><h3 id="Drop-Table"><a href="#Drop-Table" class="headerlink" title="Drop Table"></a>Drop Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> r</span><br></pre></td></tr></table></figure><h3 id="Alter-Table（增减属性）"><a href="#Alter-Table（增减属性）" class="headerlink" title="Alter Table（增减属性）"></a>Alter Table（增减属性）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> r <span class="keyword">ADD</span> A D;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> r <span class="keyword">ADD</span> (A1D1,…,AnDn);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> r <span class="keyword">DROP</span> A</span><br></pre></td></tr></table></figure><h3 id="Creat-Index-or-Drop-Index（构建索引）"><a href="#Creat-Index-or-Drop-Index（构建索引）" class="headerlink" title="Creat Index or Drop Index（构建索引）"></a>Creat Index or Drop Index（构建索引）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> &lt;i-<span class="keyword">name</span>&gt; <span class="keyword">ON</span> &lt;<span class="keyword">table</span>-<span class="keyword">name</span>&gt;(&lt;<span class="keyword">attribute</span>-<span class="keyword">list</span>&gt;)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> &lt;i-<span class="keyword">name</span>&gt; <span class="keyword">ON</span> &lt;<span class="keyword">table</span>-<span class="keyword">name</span>&gt;(&lt;<span class="keyword">attribute</span>-<span class="keyword">list</span>&gt;)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> &lt;i-<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//allow duplicates</span><br><span class="line"><span class="keyword">SELECT</span> branch_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"></span><br><span class="line">//<span class="keyword">no</span> duplicates</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> branch_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"></span><br><span class="line">//<span class="keyword">allow</span> duplicates</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">all</span> branch_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"></span><br><span class="line">//<span class="keyword">all</span> <span class="keyword">attributes</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> loan</span><br></pre></td></tr></table></figure><p>allow arithmetic expressions</p><h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><p>SELECT branch_name<br>FROM loan</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> branch_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"><span class="keyword">WHERE</span> branch_name = <span class="string">"Perryridge"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> loan_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"><span class="keyword">WHERE</span> amout <span class="keyword">BETWEEN</span> <span class="number">90000</span> <span class="keyword">AND</span> <span class="number">100000</span></span><br></pre></td></tr></table></figure><h3 id="From"><a href="#From" class="headerlink" title="From"></a>From</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//Cartesian product borrow x loan</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> borrow,loan</span><br></pre></td></tr></table></figure><h3 id="String-Operations"><a href="#String-Operations" class="headerlink" title="String Operations"></a>String Operations</h3><ul><li><p>% — matches any substring (like * in the file system). </p></li><li><p>_ — matches any character (like ? in the file system). </p></li><li><p>Converting from upper to lower case (and vice versa) using Functions lower( ) and upper( )</p></li><li><p>Concatenation (using “||” )</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ‘客户名=’ || customer_name </span><br><span class="line"><span class="keyword">FROM</span> *customer* </span><br><span class="line"><span class="keyword">WHERE</span> …</span><br></pre></td></tr></table></figure></li></ul><h3 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h3><p>We may specify <strong>desc</strong> for descending order or <strong>asc</strong> for ascending order, and for each attribute, ascending order is the default. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY customer_name asc</span><br></pre></td></tr></table></figure><h3 id="Set-Operations"><a href="#Set-Operations" class="headerlink" title="Set Operations"></a>Set Operations</h3><p>UNION: ⋃</p><p>INTERSECT: ⋂</p><p>EXCEPT: -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> depositor)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> borrower) </span><br><span class="line"></span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> depositor) </span><br><span class="line"><span class="keyword">INTERSECT</span> </span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> borrower) </span><br><span class="line"></span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> depositor) </span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> borrower)</span><br></pre></td></tr></table></figure><h3 id="Aggregate-Functions"><a href="#Aggregate-Functions" class="headerlink" title="Aggregate Functions"></a>Aggregate Functions</h3><ul><li><p>avg(col): average value </p></li><li><p>min(col): minimum value </p></li><li><p>max(col): maximum value </p></li><li><p>sum(col): sum of values </p></li><li><p>count(col): number of values </p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">avg</span>(balance) avg_bal </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">account</span> </span><br><span class="line"><span class="keyword">WHERE</span> branch_name = ‘Perryridge’</span><br></pre></td></tr></table></figure><p>Attributes in select clause outside of aggregate functions must appear in group by list. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> branch_name, <span class="keyword">avg</span>(balance) avg_bal </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">account</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> brach_name</span><br></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><ul><li><p>The meaning is “missing information” or “inapplicable information”, i.e., unknown value or that a value does not exist. </p></li><li><p>The result of any arithmetic expression involving ‘null’ is null.   eg. 5 + null returns null. </p></li><li><p>Any comparison with null returns “unknown”   eg. 5 &lt; null or null &lt;&gt; null or null = null </p></li></ul><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> &lt;v_name&gt; <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> c1, c2, … <span class="keyword">From</span> … </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> &lt;v_name&gt; (c1, c2, …) <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> e1, e2, … <span class="keyword">FROM</span> … </span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> &lt;V_NAME&gt;</span><br></pre></td></tr></table></figure><h3 id="With"><a href="#With" class="headerlink" title="With"></a>With</h3><p>allows views to be defined <strong>locally</strong> for a query<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> max_balance(<span class="keyword">value</span>) <span class="keyword">as</span> </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">max</span>(balance)</span><br><span class="line">  <span class="keyword">FROM</span> <span class="keyword">account</span></span><br><span class="line"><span class="keyword">SELECT</span> account_number</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">account</span>, max_balance</span><br><span class="line"><span class="keyword">WHERE</span> account.balance = max_balance.value</span><br></pre></td></tr></table></figure></p><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;<span class="keyword">table</span>|<span class="keyword">view</span>&gt;</span><br><span class="line">[<span class="keyword">WHERE</span> &lt;condition&gt;&#125;</span><br></pre></td></tr></table></figure><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;<span class="keyword">table</span>|<span class="keyword">view</span>&gt;[(c1,c2,...)]</span><br><span class="line"><span class="keyword">VALUES</span>(e1,e2,...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;<span class="keyword">table</span>|<span class="keyword">view</span>&gt;[(c1,c2,...)]</span><br><span class="line"><span class="keyword">SELECT</span> e1,e2,...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span></span><br><span class="line"><span class="keyword">SET</span> balance = <span class="keyword">case</span></span><br><span class="line">                <span class="keyword">when</span> balance &lt;= <span class="number">10000</span></span><br><span class="line">                <span class="keyword">then</span> balance*<span class="number">1.05</span></span><br><span class="line">                <span class="keyword">else</span> balance*<span class="number">1.06</span></span><br><span class="line">              <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><ul><li>commit work: makes all updates of the transaction permanent in the database</li><li>rollback work: undoes all updates performed by the transaction<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance - <span class="number">100</span> <span class="keyword">WHERE</span></span><br><span class="line">account_number = <span class="string">'A-101'</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance + <span class="number">100</span> <span class="keyword">WHERE</span></span><br><span class="line">account_number = <span class="string">'A-201'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Joined-Relations"><a href="#Joined-Relations" class="headerlink" title="Joined Relations"></a>Joined Relations</h3><ul><li>Join types:<ul><li>inner join</li><li>left outer join</li><li>right outer join</li><li>full outer join</li></ul></li><li>Join Conditions<ul><li>natual</li><li>on <predicate></li><li>using (A1,A1,…,An)</li></ul></li></ul><p><img src="/images/dbs/dbs03.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211164138236.png" alt="jr"></p><p>Natural join: 以同名属性相等作为连接条件<br>Inner join：只输出匹配成功的元组<br>Outer join：还要考虑不能匹配的元组<br>非自然连接，容许不同名属性的比较，且结果关系中不消去重名属性。</p><p><br></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/grandyang/p/5346963.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/5346963.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Data-Definition-Language&quot;&gt;&lt;a href=&quot;#Data-Definition-Language&quot; class=&quot;headerlink&quot; title=&quot;Data Definition Language&quot;&gt;&lt;/a&gt;Data Definitio
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 04. Advanced SQL</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs04/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs04/</id>
    <published>2020-02-11T08:32:39.000Z</published>
    <updated>2020-02-11T08:39:21.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Integrity-Constraint"><a href="#Integrity-Constraint" class="headerlink" title="Integrity Constraint"></a>Integrity Constraint</h3><ul><li>not null (主码不可为空)</li><li>unique</li><li>check ( \<predicate> )</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> branch2(branch_name <span class="built_in">varchar</span>(<span class="number">30</span>) primary <span class="keyword">key</span>,</span><br><span class="line">                     branch_city <span class="built_in">varchar</span>(<span class="number">30</span>),</span><br><span class="line">                     assets <span class="built_in">integer</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">                     <span class="keyword">check</span> (assets &gt;= <span class="number">100</span>) );</span><br></pre></td></tr></table></figure><h3 id="Domain-Constraint"><a href="#Domain-Constraint" class="headerlink" title="Domain Constraint"></a>Domain Constraint</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">domain</span> hourly-wage <span class="built_in">numeric</span>(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">constraint value-test <span class="keyword">check</span> (<span class="keyword">value</span> &gt;= <span class="number">4.00</span>);</span><br></pre></td></tr></table></figure><h3 id="Referential-Integrity"><a href="#Referential-Integrity" class="headerlink" title="Referential Integrity"></a>Referential Integrity</h3><p>Account (<u>account-number</u>, branch-name, balance) — 参照关系 </p><p>Branch (<u>branch-name</u>, branch-city, assets) — 被参照关系 </p><p><img src="/images/dbs/dbs04.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211163658066.png" width=80%></p><p><strong>cascading action</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> course</span><br><span class="line">(...</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span> (dept_name) <span class="keyword">references</span> department</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>,</span><br><span class="line">...);</span><br></pre></td></tr></table></figure><h3 id="Assertion"><a href="#Assertion" class="headerlink" title="Assertion"></a>Assertion</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">assertion</span> &lt;<span class="keyword">assertion</span>-<span class="keyword">name</span>&gt;</span><br><span class="line"><span class="keyword">CHECK</span> &lt;predicate&gt;;</span><br></pre></td></tr></table></figure><p>But SQL does not provide a construct for asserting: <u>for all X, P (X)</u></p><p>So it is achieved in a round -about fashion, using: <u>not exists X, such that not P (X)</u></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">assertion</span> credits_earned_constraint <span class="keyword">check</span></span><br><span class="line">  (<span class="keyword">not</span> <span class="keyword">exists</span>  (<span class="keyword">select</span> <span class="keyword">ID</span></span><br><span class="line">                <span class="keyword">from</span> student</span><br><span class="line">                <span class="keyword">where</span> tot_cred &lt;&gt; (<span class="keyword">select</span> <span class="keyword">sum</span> (credits) </span><br><span class="line">                                   <span class="keyword">from</span> takes <span class="keyword">natural</span> <span class="keyword">join</span> course </span><br><span class="line">                                   <span class="keyword">where</span> student. <span class="keyword">ID</span> = takes. <span class="keyword">ID</span></span><br><span class="line">                                   <span class="keyword">and</span> grade <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> grade &lt;&gt; <span class="string">'F'</span>)</span><br><span class="line">                )</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><p><br></p><h3 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a>Trigger</h3><p><img src="/images/dbs/dbs04.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211163247840.png" alt="trigger"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;CREATE/REPLACE&gt; trigger secure_ student before &lt;insert/delete/update&gt; on student</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line"><span class="keyword">IF</span>(to_char(<span class="keyword">sysdate</span>, <span class="string">'DY'</span>) <span class="keyword">in</span>（<span class="string">'星期六'</span>，<span class="string">'星期日'</span>))</span><br><span class="line"><span class="keyword">OR</span>(to_char(<span class="keyword">sysdate</span>, <span class="string">'HH24'</span>) <span class="keyword">NOT</span> <span class="keyword">Between</span> <span class="number">8</span> <span class="keyword">and</span> <span class="number">17</span>) </span><br><span class="line"><span class="keyword">THEN</span> raise_ application_error(<span class="number">-20506</span>, <span class="string">'你只能在上班时间修改数据'</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> &lt;trigger_name&gt;</span><br></pre></td></tr></table></figure><h3 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h3><ul><li>Security Specification</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> &lt;privilege <span class="keyword">list</span>&gt; <span class="keyword">on</span> &lt;<span class="keyword">table</span>/<span class="keyword">view</span>&gt;</span><br><span class="line"><span class="keyword">TO</span> &lt;<span class="keyword">user</span> <span class="keyword">list</span>&gt;</span><br></pre></td></tr></table></figure><p>  \<user list>: user-ids / public / a role</p><ul><li>Privilege</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span>,<span class="keyword">insert</span> <span class="keyword">ON</span> branch <span class="keyword">TO</span> U1,U2,U3</span><br></pre></td></tr></table></figure><p>  select / insert / update / delete / references / all privileges / all</p><ul><li><p>Roles</p><p>permit common privileges for a class of users can be specified just once</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">role</span> teller; </span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">role</span> manager; </span><br><span class="line"><span class="keyword">Grant</span> <span class="keyword">select</span> <span class="keyword">on</span> branch <span class="keyword">to</span> teller; </span><br><span class="line"><span class="keyword">Grant</span> <span class="keyword">update</span> (balance) <span class="keyword">on</span> <span class="keyword">account</span> <span class="keyword">to</span> teller; </span><br><span class="line"><span class="keyword">Grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> <span class="keyword">account</span> <span class="keyword">to</span> manager; </span><br><span class="line"><span class="keyword">Grant</span> teller <span class="keyword">to</span> manager; </span><br><span class="line"><span class="keyword">Grant</span> teller <span class="keyword">to</span> alice, bob; </span><br><span class="line"><span class="keyword">Grant</span> manager <span class="keyword">to</span> avi;</span><br></pre></td></tr></table></figure><ul><li>Revoke</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> &lt;privilege <span class="keyword">list</span>&gt; <span class="keyword">ON</span> &lt;<span class="keyword">table</span>/<span class="keyword">view</span>&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;<span class="keyword">user</span> <span class="keyword">list</span>&gt; [restrict/<span class="keyword">cascade</span>]</span><br></pre></td></tr></table></figure><p>  restrict：仅撤回用户本人</p><p>  cascade：连锁撤回，同时撤回用户对外的授权</p><h3 id="Audit-Trails"><a href="#Audit-Trails" class="headerlink" title="Audit Trails"></a>Audit Trails</h3><p>log all changes to the database</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUDIT &lt;st-opt&gt;[BY &lt;users&gt;][BY session/access][whenever successful / whenever not seccessful]</span><br></pre></td></tr></table></figure><p>\<st-opt>:  table, view, role, index</p><p>NOAUDIT… 取消审计</p><p>by\<users>缺省时对所有用户审计</p><p>by session：每次会话期间，相同类型需审计的SQL语句仅记录一次</p><ul><li>Audit in oracle:</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUDIT &lt;obj-opt&gt; ON &lt;obj&gt;/DEFAULT [by session / by access][whenever successful / whenever not successful]</span><br></pre></td></tr></table></figure><p>  实体审计对所有用户起作用</p><p>  ON \<obj> 指出审计对象表、视图名。 </p><p>  ON DEFAULT 对其后创建的所有对象起作用。 </p><p>  取消审计：NOAUDIT … </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Integrity-Constraint&quot;&gt;&lt;a href=&quot;#Integrity-Constraint&quot; class=&quot;headerlink&quot; title=&quot;Integrity Constraint&quot;&gt;&lt;/a&gt;Integrity Constraint&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 05. E-R Model</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs05/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs05/</id>
    <published>2020-02-11T08:17:10.000Z</published>
    <updated>2020-02-11T08:31:26.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h2><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70.png" alt="keys"></p><h2 id="E-R-Diagram"><a href="#E-R-Diagram" class="headerlink" title="E-R Diagram"></a>E-R Diagram</h2><ul><li>Rectangles represent entity sets. </li><li>Diamonds represent relationship sets. </li><li>Lines link attributes to entity sets and entity sets to relationship sets. </li><li>Ellipses represent attributes. <ul><li>Double ellipses represent multivalued attributes. </li><li>Dashed ellipses denote derived attributes. </li></ul></li><li>Underline indicates primary key attributes.</li></ul><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722463.png" alt="er"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722236.png" alt="er2"></p><ul><li><p>We express cardinality constraints by drawing either a directed line (→), signifying “one”, or an undirected line (—), signifying “many”,  between the relationship set and the entity set. </p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722257.png" alt="er3"></p></li><li><p>Total participation (全参与) (indicated by double line): every entity in the entity set participates in at least one relationship in the relationship set.<br>E.g., participation of loan in borrower is total.<br>Every loan must have a customer associated to it via borrower. </p></li><li><p>Partial participation (部分参与): some entities may not participate in any relationship in the relationship set.<br><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722427.png" alt="er4"></p></li><li><p>An entity set that does not have a primary key is referred to as a weak entity set<br>The discriminator or partial key (分辨符或部分码) of a weak entity set is the set of attributes that distinguishes among all those entities in a weak entity set that depend on one particular strong entity </p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722430.png" alt="er5"><br><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722331.png" alt="er6"><br><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722357.png" alt="er7"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722421.png" alt="er8"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722456.png" alt="er9"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722459.png" alt="er10"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722547.png" alt="er11"></p></li><li><p>若一个对象只对其名字及单值感兴趣，则可作为属性，如性别；若一个对象除名字外，本身还有其他属性需描述，则该对象应定义为实体集。如电话, 部门. </p></li><li><p>一个对象不能同时作为实体和属性. </p></li><li><p>一个实体集不能与另一实体集的属性相关联，只能实体与实体相联系</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Keys&quot;&gt;&lt;a href=&quot;#Keys&quot; class=&quot;headerlink&quot; title=&quot;Keys&quot;&gt;&lt;/a&gt;Keys&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5n
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1010 Radix</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-08/pat_1010/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-08/pat_1010/</id>
    <published>2020-02-08T03:22:27.000Z</published>
    <updated>2020-02-08T15:48:06.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is <code>yes</code>, if 6 is a decimal number and 110 is a binary number.</p><p>Now for any pair of positive integers $N_1$ and $N_2$, your task is to find the radix of one number while that of the other is given.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p><blockquote><p>$N_1$ $N_2$ tag radix</p></blockquote><p>Here <code>N1</code> and <code>N2</code> each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, <code>a</code>-<code>z</code> } where 0-9 represent the decimal numbers 0-9, and <code>a</code>-<code>z</code> represent the decimal numbers 10-35. The last number <code>radix</code> is the radix of <code>N1</code> if <code>tag</code> is 1, or of <code>N2</code> if <code>tag</code> is 2.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the radix of the other number so that the equation <code>N1</code> = <code>N2</code> is true. If the equation is impossible, print <code>Impossible</code>. If the solution is not unique, output the smallest possible radix.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><blockquote><p>6 110 1 10</p></blockquote><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><blockquote><p>2</p></blockquote><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><blockquote><p>1 ab 1 2</p></blockquote><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><blockquote><p>Impossible</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这题的意思和解题思路不太难，但是巨坑，过了很多次才过去。</p><p>题目意思大概就是进制转换，需要注意的有以下几个点</p><ul><li><p>radix和N可能会很大，要用<code>long long</code>而不是<code>int</code></p></li><li><p>可能会出现多种可能进制的情况，这种情况下输出最小的radix。例如<code>8 8 1 10</code>这组输入，可以是9以上任何进制，这时输出9。要注意的是，只有输入的未知进制的数是一位数的时候可能会出现这种情况，因此只要在输入是一位数的时候考虑出现多种可能进制。</p></li><li><p>还是上面那个例子，<code>8 8 1 10</code>的输入，输出是9，因为最大位数是8，只有在9以上的进制会出现8这个数字。这意味着要做一个判定，根据出现的数字或字符找到可能的最小进制。</p></li><li><p>最简单的方式是在范围内线性遍历找到对应的radix，做法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(radix2 = minR(N2); ; radix2++)&#123;</span><br><span class="line">        dec2 = toDec(N2, radix2);</span><br><span class="line">        <span class="keyword">if</span>(dec1 == dec2)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; radix2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dec2 &gt; dec1 || radix2 &gt; dec1)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中<code>minR</code>用于做上一个注意点的判定，<code>toDec</code>用于把不同进制的数转为十进制，<code>dec1</code>是已知进制的数的十进制值。</p><p>这样做会有一个测试点过不去，显示<code>运行超时</code>。问题在于线性遍历太慢，可以用二分遍历降低复杂度。在改为二分遍历之后能够过这个点。</p></li><li><p>在判断的时候要注意溢出问题，如果溢出则要减小二分范围的上界。</p></li></ul><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> N1, N2;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tag, radix, radix2 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dec1, dec2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符转换为对应的数字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">toNum</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'0'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求十进制值</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">toDec</span><span class="params">(<span class="built_in">string</span> num, <span class="keyword">long</span> <span class="keyword">long</span> radix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> next = toNum(num[i]);</span><br><span class="line">        dec = dec * radix + next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到当前数字可能的最小进制，例如12abf最小只能是十六进制</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">minR</span><span class="params">(<span class="built_in">string</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret;</span><br><span class="line">    <span class="keyword">char</span> maxc = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length(); i++)&#123;</span><br><span class="line">        maxc = <span class="built_in">max</span>(maxc, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = toNum(maxc) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        ret = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N1 &gt;&gt; N2 &gt;&gt; tag &gt;&gt; radix;</span><br><span class="line">    <span class="comment">//让已知进制的数作为N1</span></span><br><span class="line">    <span class="keyword">if</span>(tag == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">string</span> temp = N1;</span><br><span class="line">        N1 = N2;</span><br><span class="line">        N2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    dec1 = toDec(N1, radix);</span><br><span class="line">    <span class="comment">//二分遍历</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> rmin = minR(N2);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> rmax = dec1;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> r;</span><br><span class="line">    <span class="keyword">int</span> first = toNum(N2[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//如果只有一位数，且符合，即可能有多种进制情况，输出最小</span></span><br><span class="line">    <span class="keyword">if</span>(N2.length() == <span class="number">1</span> &amp;&amp; dec1 == first)&#123;</span><br><span class="line">        radix2 = rmin;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(rmin &lt;= rmax)&#123;</span><br><span class="line">            r = (rmin + rmax) / <span class="number">2</span>;</span><br><span class="line">            dec2 = toDec(N2, r);</span><br><span class="line">            <span class="comment">//如果溢出，缩小上界</span></span><br><span class="line">            <span class="keyword">if</span>(dec2 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                rmax = r - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dec2 == dec1)&#123;</span><br><span class="line">                radix2 = r;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dec2 &gt; dec1)&#123;</span><br><span class="line">                rmax = r - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dec2 &lt; dec1)&#123;</span><br><span class="line">                rmin = r + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(radix2 == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; radix2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Given a pair of positive integers, for example, 6 
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1009 Product of Polynomials</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-07/pat_1009/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-07/pat_1009/</id>
    <published>2020-02-07T05:36:19.000Z</published>
    <updated>2020-02-08T15:49:24.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>This time, you are supposed to find $A×B$ where $A$ and $B$ are two polynomials.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><blockquote><p>$K \; N_1 \; a_{N_1} \; N_2 \; a_{N_2} … N_K \; a_{N_K}$</p></blockquote><p>where $K$ is the number of nonzero terms in the polynomial, $N_i$ and $a_{N_i} (i=1,2,⋯,K)$ are the exponents and coefficients, respectively. It is given that $1≤K≤10$, $0≤N_K&lt;⋯&lt;N_2&lt;N_1≤1000$. </p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the product of $A$ and $B$ in one line, with the same format as the input. Notice that there must be <strong>NO</strong> extra space at the end of each line. Please be accurate up to 1 decimal place. </p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>3 3 3.6 2 6.0 1 1.6</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Advanced-1002的升华版，要注意的是数组的上界，两个多项式的最高次分别可以是1000，则数组上界要开到2000。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXK 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> poly[MAXN];</span><br><span class="line"><span class="keyword">int</span> K1, K2;</span><br><span class="line"><span class="keyword">int</span> expo[MAXK], expo2;</span><br><span class="line"><span class="keyword">double</span> coe[MAXK], coe2;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> first = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXN; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;MAXK)&#123;</span><br><span class="line">            expo[i] = <span class="number">0</span>;</span><br><span class="line">            coe[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        poly[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K1; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; expo[i] &gt;&gt; coe[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K2; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; expo2 &gt;&gt; coe2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;K1; j++)&#123;</span><br><span class="line">            poly[expo2+expo[j]] += coe2 * coe[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MAXN<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first == <span class="number">-1</span>)&#123;</span><br><span class="line">                first = i;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=first; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; poly[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;This time, you are supposed to find $A×B$ where $A
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1008 Elevator</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-07/pat_1008/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-07/pat_1008/</id>
    <published>2020-02-07T05:06:38.000Z</published>
    <updated>2020-02-07T05:08:44.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>The highest building in our city has only one elevator. A request list is made up with <em>N</em> positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.</p><p>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em>, followed by <em>N</em> positive numbers. All the numbers in the input are less than 100.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the total time on a single line. </p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>3 2 3 1</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>41</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>简单题直接上代码</p><p>注意点：</p><ul><li>从0出发</li><li>最后一站也要算停留的5s时间</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">stop</span>, lastStop;</span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; <span class="built_in">stop</span>;</span><br><span class="line">    time += <span class="number">6</span> * <span class="built_in">stop</span> + <span class="number">5</span>;</span><br><span class="line">    lastStop = <span class="built_in">stop</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; <span class="built_in">stop</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">stop</span> &gt; lastStop)&#123;</span><br><span class="line">            time += <span class="number">6</span> * (<span class="built_in">stop</span> - lastStop) + <span class="number">5</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            time += <span class="number">4</span> * (lastStop - <span class="built_in">stop</span>) + <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastStop = <span class="built_in">stop</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; time &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;The highest building in our city has only one elev
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1007 Maximum Subsequence Sum</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-05/pat_1007/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-05/pat_1007/</id>
    <published>2020-02-05T06:18:52.000Z</published>
    <updated>2020-02-05T09:03:32.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a sequence of $K$ integers ${ N_1, N_2, …, N_K }$. A continuous subsequence is defined to be ${ N_i, N_{i+1}, …, N_j }$ where $1≤i≤j≤K$. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p><p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence. </p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer $K (≤10000)$. The second line contains $K$ numbers, separated by a space. </p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices $i​$ and $j​$ (as shown by the sample case). If all the $K​$ numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. </p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>10 1 4</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这题怪坑的，过了好多次才完全过去。</p><p>题目是很经典的题目，最大子序列和，没记错的话是《数据结构与算法分析》第二章讨论了很久的一个问题。</p><p>稍稍整理一下几个经典的算法</p><h3 id="算法一：疯狂穷举"><a href="#算法一：疯狂穷举" class="headerlink" title="算法一：疯狂穷举"></a>算法一：疯狂穷举</h3><p>最差但也是最简单最不需要动脑子的算法，先穷举子序列起点，再穷举子序列终点，然后求和。</p><p>复杂度是$N^3$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ThisSum, MaxSum;</span><br><span class="line">  MaxSum = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//穷举A[i]</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">    <span class="comment">//穷举A[j]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;N; j++)&#123;</span><br><span class="line">      ThisSum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;=j; k++)&#123;</span><br><span class="line">        <span class="comment">//A[i] + ... + A[j]</span></span><br><span class="line">        ThisSum += A[k];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ThisSum &gt; MaxSum)&#123;</span><br><span class="line">      MaxSum = ThisSum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> MaxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法二：算法一的优化"><a href="#算法二：算法一的优化" class="headerlink" title="算法二：算法一的优化"></a>算法二：算法一的优化</h3><p>类似算法一，先穷举起点再穷举终点，但在求和的部分对算法一进行优化。</p><p>复杂度是$N^2$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ThisSum, MaxSum;</span><br><span class="line">  MaxSum = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//穷举A[i]</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">    ThisSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//穷举A[j]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;N; j++)&#123;</span><br><span class="line">        ThisSum += A[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ThisSum &gt; MaxSum)&#123;</span><br><span class="line">      MaxSum = ThisSum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> MaxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法三：分治"><a href="#算法三：分治" class="headerlink" title="算法三：分治"></a>算法三：分治</h3><p>用递归进行分治，把整个序列分成左右两半，整个序列的最大子序列和可能有三种情况，一种是左半个序列的最大子序列和，一种是右半个序列的最大子序列和，另一种是横跨中间分界线。分别计算这三种的最大和，再取其中最大值即可。前两种直接递归可以算出来，第三种，在左半个中求包含右边界的最大和，在右半个中求包含左边界的最大和，两者相加即可。</p><p>复杂度是$NlogN$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MaxSubSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> MaxLeftSum, MaxRightSum;</span><br><span class="line">  <span class="keyword">int</span> MaxLeftBorderSum, MaxRightBorderSum;</span><br><span class="line">  <span class="keyword">int</span> LeftBorderSum, RightBorderSum;</span><br><span class="line">  <span class="keyword">int</span> center;</span><br><span class="line">  <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">    <span class="keyword">if</span>(A[left] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> A[left];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  center = (left + right) / <span class="number">2</span>;</span><br><span class="line">  <span class="comment">//递归求左右两半的最大子序列和</span></span><br><span class="line">  MaxLeftSum = MaxSubSum(A, left, center);</span><br><span class="line">  MaxRightSum = MaxSubSum(A, center+<span class="number">1</span>, right);</span><br><span class="line">  <span class="comment">//求左半部分中包含右边界的最大和</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=center; i&gt;=left; i--)&#123;</span><br><span class="line">    LeftBorderSum += A[i];</span><br><span class="line">    <span class="keyword">if</span>(LeftBorderSum &gt; MaxLeftBorderSum)&#123;</span><br><span class="line">      MaxLeftBorderSum = LeftBorderSum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//求右半部分中包含左边界的最大和</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=center+<span class="number">1</span>; i&lt;=right; i++)&#123;</span><br><span class="line">    LeftBorderSum += A[i];</span><br><span class="line">    <span class="keyword">if</span>(RightBorderSum &gt; MaxRightBorderSum)&#123;</span><br><span class="line">      MaxRightBorderSum = RightBorderSum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>(MaxLeftBorderSum+MaxRightBorderSum, MaxLeftSum, MaxRightSum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> MaxSubSum(A, <span class="number">0</span>, N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法四：动态规划"><a href="#算法四：动态规划" class="headerlink" title="算法四：动态规划"></a>算法四：动态规划</h3><p>一个比较取巧的优秀算法，当遇到一部分和小于零就舍弃，这样就只要进行一次遍历。</p><p>后来才发现这有点动态规划的意思，如果用<code>dp[i]</code>存以<code>A[i]</code>结尾的子序列的最大和，则<code>dp[i+1] = max(dp[i]+A[i+1], A[i+1])</code>，简化完大概就是如果<code>dp[i]&lt;0</code>就不要了酱紫。具体看代码。</p><p>复杂度是$N$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> thisSum, maxSum;</span><br><span class="line">  thisSum = maxSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)&#123;</span><br><span class="line">    thisSum += A[j];</span><br><span class="line">    <span class="keyword">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class="line">      maxSum = thisSum;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(thisSum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      thisSum = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><hr><p>然后说一下遇到的坑</p><ul><li>手动划重点：If all the $K$ numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. </li><li>如果是0+全负，类似于<code>-1 0 -3 -2</code>这样，要输出<code>0 0 0</code></li><li>可以参考一下前人<a href="https://blog.csdn.net/weixin_38097576/article/details/82715413" target="_blank" rel="noopener">避雷经验</a></li></ul><p>下面贴代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> K;</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="keyword">int</span> maxsum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> first, last;</span><br><span class="line"><span class="keyword">int</span> tempf, templ;</span><br><span class="line"><span class="keyword">bool</span> zero = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(K == <span class="number">0</span>)&#123;</span><br><span class="line">        maxsum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            zero = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += num[i];</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; maxsum)&#123;</span><br><span class="line">            maxsum = sum;</span><br><span class="line">            first = tempf;</span><br><span class="line">            templ = last = i;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            tempf = templ = i+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            templ = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(maxsum &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(zero)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"0 0 0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; num[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; num[K<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxsum &lt;&lt; <span class="string">" "</span> &lt;&lt; num[first] &lt;&lt; <span class="string">" "</span> &lt;&lt; num[last] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Given a sequence of $K$ integers ${ N_1, N_2, …, N
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1006 Sign In and Sign Out</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-05/pat_1006/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-05/pat_1006/</id>
    <published>2020-02-05T02:35:48.000Z</published>
    <updated>2020-02-05T09:03:42.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer $M$, which is the total number of records, followed by $M$ lines, each in the format:</p><blockquote><p>ID_number Sign_in_time Sign_out_time</p></blockquote><p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>SC3021234 CS301133</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>直接比较字符串大小就行了。简单题直接上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">    <span class="built_in">string</span> ID, timeIn, timeOut, first, last;</span><br><span class="line">    <span class="built_in">string</span> inMin = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">string</span> outMax = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ID &gt;&gt; timeIn &gt;&gt; timeOut;</span><br><span class="line">        <span class="keyword">if</span>(inMin == <span class="string">""</span> || timeIn &lt; inMin)&#123;</span><br><span class="line">            inMin = timeIn;</span><br><span class="line">            first = ID;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(outMax == <span class="string">""</span> || timeOut &gt; outMax)&#123;</span><br><span class="line">            outMax = timeOut;</span><br><span class="line">            last = ID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; first &lt;&lt; <span class="string">" "</span> &lt;&lt; last &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;At the beginning of every day, the first person wh
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
</feed>
