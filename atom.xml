<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花落知多少</title>
  
  <subtitle>Nice to meet you :)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iris-cyy.github.io/"/>
  <updated>2020-01-29T11:46:03.439Z</updated>
  <id>https://iris-cyy.github.io/</id>
  
  <author>
    <name>Irisssy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【PAT-Advanced】1003 Emergency</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-01-29/pat_1003/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-01-29/pat_1003/</id>
    <published>2020-01-29T08:29:00.000Z</published>
    <updated>2020-01-29T11:46:03.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: $N (≤500)$ - the number of cities (and the cities are numbered from 0 to $N$−1), $M$ - the number of roads, $C_1$ and $C_2$ - the cities that you are currently in and that you must save, respectively. The next line contains <em>N</em> integers, where the $i$-th integer is the number of rescue teams in the $i$-th city. Then $M$ lines follow, each describes a road with three integers $c_1$, $c_2$ and $L$, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from $C_1$ to $C_2$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line two numbers: the number of different shortest paths between $C_1$ and $C_2​$, and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>5 6 0 2<br>1 2 1 5 3<br>0 1 1<br>0 2 2<br>0 3 1<br>1 2 1<br>2 4 1<br>3 4 1</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>2 4</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这是图算法里最短路径问题的变形。</p><p>因为节点数不太大，所以用邻接矩阵来存储路径（其实是懒得动脑）。</p><p>并且因为懒得动脑不想写Dijkstra，就用dfs来遍历，遍历到目的地之后比较路径长度和救援队数量，满足条件则更新对应变量。如果不是目的地则继续往前搜索直到搜不到新的节点。</p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> M; <span class="comment">//number of roads</span></span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">//number of cities</span></span><br><span class="line"><span class="keyword">int</span> C1, C2; <span class="comment">//outset, desitination</span></span><br><span class="line"><span class="keyword">int</span> rt_num[MAXN]; <span class="comment">//number of rescue teams in each city</span></span><br><span class="line"><span class="keyword">int</span> road[MAXN][MAXN]; <span class="comment">//Adjacency matrix</span></span><br><span class="line"><span class="keyword">int</span> visited[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> shortest_path;</span><br><span class="line"><span class="keyword">int</span> max_rt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    M = N = C1 = C2 = cnt = max_rt = <span class="number">0</span>;</span><br><span class="line">    shortest_path = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXN; i++)&#123;</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">        rt_num[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;MAXN; j++)&#123;</span><br><span class="line">            road[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> <span class="built_in">point</span>, <span class="keyword">int</span> length, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    visited[<span class="built_in">point</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(length &gt; shortest_path)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">point</span> == C2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; shortest_path)&#123;</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">            shortest_path = length;</span><br><span class="line">            max_rt = rt;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == shortest_path)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(rt &gt; max_rt)&#123;</span><br><span class="line">                max_rt = rt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(road[<span class="built_in">point</span>][i] != INF &amp;&amp; visited[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                dfs(i, length+road[<span class="built_in">point</span>][i], rt+rt_num[i]);</span><br><span class="line">                visited[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; C1 &gt;&gt; C2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; rt_num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; start &gt;&gt; <span class="built_in">end</span> &gt;&gt; length;</span><br><span class="line">        road[start][<span class="built_in">end</span>] = length;</span><br><span class="line">        road[<span class="built_in">end</span>][start] = length;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(C1, <span class="number">0</span>, rt_num[C1]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">" "</span> &lt;&lt; max_rt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;As an emergency rescue team leader of a city, you 
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT】目录</title>
    <link href="https://iris-cyy.github.io//PAT/index/2020-01-29/pat_index/"/>
    <id>https://iris-cyy.github.io//PAT/index/2020-01-29/pat_index/</id>
    <published>2020-01-29T07:34:25.000Z</published>
    <updated>2020-01-29T08:30:51.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PAT-甲级"><a href="#PAT-甲级" class="headerlink" title="PAT 甲级"></a>PAT 甲级</h2><table><thead><tr><th style="text-align:center">No.</th><th style="text-align:center">题目</th><th style="text-align:center">Intro</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1001</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-26/pat_1001/">A+B Fromat</a></td><td style="text-align:center">字符串处理</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center">1002</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-28/pat_1002/">A+B for Polynomials</a></td><td style="text-align:center">多项式求和</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center">1003</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-29/pat_1003/">Emergency</a></td><td style="text-align:center">图，最短路径</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PAT-甲级&quot;&gt;&lt;a href=&quot;#PAT-甲级&quot; class=&quot;headerlink&quot; title=&quot;PAT 甲级&quot;&gt;&lt;/a&gt;PAT 甲级&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;No.&lt;/t
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="index" scheme="https://iris-cyy.github.io/categories/PAT/index/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1002 A+B for Polynomials</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-01-28/pat_1002/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-01-28/pat_1002/</id>
    <published>2020-01-28T12:22:18.000Z</published>
    <updated>2020-01-29T07:35:57.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>This time, you are supposed to find <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: $K \; N_1 \; a_{N_1} \; N_2 \; a_{N_2} \; … \; N_K \; a_{N_K}$, where $K$ is the number of nonzero terms in the polynomial, $N_i$ and $a_{N_i} (i=1,2,⋯,K)$ are the exponents and coefficients, respectively. It is given that $1≤K≤10$，$0≤N_K&lt;⋯&lt;N_2&lt;N_1≤1000$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>2  1  2.4  0  3.2<br>2  2  1.5  1  0.5   </p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>3  2  1.5  1  2.9  0  3.2</p></blockquote><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>使用数组来存储结果多项式的信息，数组的下标为指数，值为系数。</p><p>题目中要求保留两位小数，方法如下：</p><p><code>cout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; ...</code></p><p>实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> poly[MAX];</span><br><span class="line">    <span class="keyword">int</span> first = MAX;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAX; i++)&#123;</span><br><span class="line">        poly[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n1, n2;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">    <span class="keyword">double</span> coe;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n1; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; <span class="built_in">exp</span> &gt;&gt; coe;</span><br><span class="line">        poly[<span class="built_in">exp</span>] += coe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n2; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; <span class="built_in">exp</span> &gt;&gt; coe;</span><br><span class="line">        poly[<span class="built_in">exp</span>] += coe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MAX<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first == MAX)&#123;</span><br><span class="line">                first = i;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">if</span>(cnt != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=first; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; poly[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;This time, you are supposed to find &lt;em&gt;A&lt;/em&gt;+&lt;em
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】External Sorting</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/external_sort/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/external_sort/</id>
    <published>2020-01-27T04:56:59.000Z</published>
    <updated>2020-01-27T05:02:45.386Z</updated>
    
    <content type="html"><![CDATA[<p>number of passes: $1+ \lceil log_2 (N/M) \rceil$<br>seek time: O(number of passes)</p><p><strong>a k-way merge</strong><br>number of passes: $1+ \lceil log_k (N/M) \rceil$<br>require 2k tapes</p><p><strong>polyphase merge</strong><br>require k+1 tapes</p><p><strong>Huffman tree</strong><br>Total merge time = O ( the weighted external path length )</p><p>If the number of runs is a Fibonacci number $F_N$, then the best way to distribute them is to split them into $F_{N–1}$ and $F_{N–2}$ .<br>For a k-way merge, $F_N^{(k)} = F_{N-1}^{(k)}+F_{N-2}^{(k)}$, where $F_N^{(k)}=0 ; (0 \leq N \leq k-2), F_{k-1}^{(k)}=1$<br><br></p><hr><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><ol><li><p><img src="/images/ads/external-sort/ex1.png" alt="ex1"></p></li><li></li></ol><p><img src="/images/ads/external-sort/ex2.png" alt="ex2"></p><p>hardware</p><p>外部排序主要开销在I/O上</p><ol start="3"><li><p><img src="/images/ads/external-sort/ex3.png" alt="ex3"></p></li></ol><p>$\lceil 1+log_2(100,000,000 \times 256 \div 128 \div 10^6) \rceil = 9$ </p><ol start="4"><li><p><img src="/images/ads/external-sort/ex4.png" alt="ex4"></p></li></ol><p>Huffman tree，每次挑最短的两条链合并</p><ol start="5"><li><p><img src="/images/ads/external-sort/ex5.png" alt="ex5"></p></li></ol><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/ailunlee/article/details/84548950" target="_blank" rel="noopener">https://blog.csdn.net/ailunlee/article/details/84548950</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;number of passes: $1+ \lceil log_2 (N/M) \rceil$&lt;br&gt;seek time: O(number of passes)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a k-way merge&lt;/strong&gt;&lt;br&gt;number of pas
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Splay Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/splay/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/splay/</id>
    <published>2020-01-27T04:55:12.000Z</published>
    <updated>2020-01-27T04:56:30.527Z</updated>
    
    <content type="html"><![CDATA[<p>  将被查找的节点置于根的位置</p><p><img src="/images/ads/splay/sp1.png" alt="sp1"></p><h2 id="deletion"><a href="#deletion" class="headerlink" title="deletion"></a>deletion</h2><ul><li>find x</li><li>remove x</li><li>findmax ( $T_L$ )</li><li>make $T_R$ the right child of the root of $T_L$</li></ul><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51512589" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51512589</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  将被查找的节点置于根的位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ads/splay/sp1.png&quot; alt=&quot;sp1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;deletion&quot;&gt;&lt;a href=&quot;#deletion&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Amortized Analysis</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/amortized/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/amortized/</id>
    <published>2020-01-27T04:52:51.000Z</published>
    <updated>2020-01-27T04:54:44.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ads/amortizedam1.png" alt="am1"></p><ul><li>聚合分析</li><li>核算法</li><li>势能法<br>$\hat c_i - c_i = credit = \Phi (D_i)- \Phi (D_{i-1})$<br>$\sum \hat c_i = \sum c_i + \Phi(D-i) - \Phi(D_{i-1})$</li></ul><p>合并两个skew heap摊还时间为O(logN)<br><br></p><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/images/ads/amortized/ex1.png" alt="ex1"><br>C<br>A light child has at most half weight of its parents. Thus if there are k light nodes not including x along the path from x to y, $w(y) \leq w(x)/2^k$ ( $k \leq log \frac{w(x)}{w(y)}$ )<br>$\Phi$ = the total number of right heavy nodes it contains<br>By lemma 2, any path in a skew heap contains only O(logn) light nodes<br>Any heavy node on such a path is converted from right to left by causing a drop of one in the potential<br>Two heaps $h_1$ and $h_2$, containing $n_1$ and $n_2$ items<br>$n = n_1 + n_2$<br>By lemma 1, the total number of light nodes is at most $2 \lfloor logn \rfloor -1$<br>Let $k_1$ and $k_2$ be the number of heavy nodes on the right path of $h_1$ and $h_2$, and $k_3$ be the number of nodes that become right heavy children of nodes on the merge path.<br>By lemma 2, $k_3 \leq \lfloor logn \rfloor$<br>the number of node on the merge path is at most<br>$c_i \leq 2+ \lfloor logn_1 \rfloor + k_1 + \lfloor logn_2 \rfloor + k_2 \leq  1 + 2 \lfloor logn \rfloor + k_1 + k_2$<br>The increase in the potential caused by the merge is $\Delta \Phi = k_3 - k_2 - k_1 = \lfloor logn \rfloor - k_1 - k_2$<br>This the amortized is at most $3 \lfloor logn \rfloor + 1​$</p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51517446" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51517446</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ads/amortizedam1.png&quot; alt=&quot;am1&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚合分析&lt;/li&gt;
&lt;li&gt;核算法&lt;/li&gt;
&lt;li&gt;势能法&lt;br&gt;$\hat c_i - c_i = credit = \Phi (D_i)- 
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Red-Black Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/rbtree/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/rbtree/</id>
    <published>2020-01-27T04:44:12.000Z</published>
    <updated>2020-01-27T04:52:23.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A red-black tree is a binary search tree that satisfies the following red-black properties:</p><p>(1)  Every node is either red or black.</p><p>(2)  The root is black.</p><p>(3)  Every leaf (NIL) is black.</p><p>(4)  If a node is red, then both its children are black.</p><p>(5)  For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.</p><p>The <strong>black-height</strong> of any node x, denoted by bh(x), is the number of black nodes on any simple path from x (x not included) down to a leaf.  bh(Tree) = bh(root).</p><p><strong>A red-black tree with n internal nodes has height at most 2log(n+1).</strong></p><p>红黑树没有左右子树高度差小于等于1的条件！</p><p><img src="/images/ads/rbTree/rb1.png" alt="rb1"></p><h2 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h2><p>考虑它的叔叔，维护的主要是颜色（性质4）<br>bottom-up</p><p>情况1：N为红，P为红（GP一定为黑），U为红。<br>令X = T.root,在向下遍历的过程中，我们如果遇到X.right.color = x.left.color = RED时我们将x与它孩子的颜色翻转，即把x涂成红色，把x.right和x.left涂成黑色。如果x的父亲为黑色，没有违反性质；如果x的父亲为红色，那么可以把x当成新插入的红色结点N，那么只需要处理情况2即可。</p><p>情况2：N，P都为红（GP一定为黑)，U为黑<br>此情况可分为镜像的四种，可通过旋转转为如下<br><img src="/images/ads/rbTree/rb2.png" width=10%><br>通过交换GP与P的颜色，然后调用right_rotate(T,GP)，此时不再违反任何性质。<br><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RB-INSERT-FIXUP(T,z)</span></span><br><span class="line"><span class="keyword">while</span> z.p.color == RED </span><br><span class="line">  <span class="keyword">if</span> z.p == z.p.p.left</span><br><span class="line">    y = z.p.p.right </span><br><span class="line">    <span class="keyword">if</span> y.color == RED</span><br><span class="line">      z.p.color = BLACK   <span class="comment">//case 1</span></span><br><span class="line">      y.color = BLACK     <span class="comment">//case 1</span></span><br><span class="line">      z.p.p.color = RED   <span class="comment">//case 1</span></span><br><span class="line">      z = z.p.p           <span class="comment">//case 1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> z == z.p.right</span><br><span class="line">      z = z.p             <span class="comment">//case 2</span></span><br><span class="line">      LEFT-ROTATE(T,z)    <span class="comment">//case 2</span></span><br><span class="line">    z.p.color = BLACK     <span class="comment">//case 3</span></span><br><span class="line">    z.p.p.color = RED     <span class="comment">//case 3</span></span><br><span class="line">    RIGHT-ROTATE(T,z.p.p) <span class="comment">//case 3</span></span><br><span class="line">  <span class="keyword">else</span> (same as then clause with <span class="string">"right"</span> <span class="keyword">and</span> <span class="string">"left"</span> exchanged</span><br><span class="line">T.root.color = BLACK</span><br></pre></td></tr></table></figure><p><img src="/images/ads/rbTree/rb3.png" alt="rb3"></p><p>(a) A node z after insertion. Because both z and its parent z.p are red, a violation of property 4 occurs. Since z’s uncle y is red, case 1 in the code applies. We recolor nodes and move the pointer z up the tree, resulting in the tree shown in (b). Once again, z and its parent are both red, but z’s uncle y is black. Since z is the right child of z.p, case 2 applies. We perform a left rotation, and the tree that results is shown in (c). Now, z is the left child of its parent, and case 3 applies. Recoloring and right rotation yield the tree in (d), which is a legal red-black tree.</p><p><strong>Time Complexity: O(log n)</strong></p><h2 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h2><p>考虑它的兄弟,维护的主要是黑色结点数量（性质5）。<br>top-down<br><strong>Time complexity: O(log n)</strong><br><img src="/images/ads/rbTree/rb4.png" alt="rb4"></p><br><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED      0    <span class="comment">// 红色节点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLACK    1    <span class="comment">// 黑色节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> color;        <span class="comment">// 颜色(RED 或 BLACK)</span></span><br><span class="line">    Type   key;                    <span class="comment">// 关键字(键值)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">left</span>;</span>    <span class="comment">// 左孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">right</span>;</span>    <span class="comment">// 右孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">parent</span>;</span>    <span class="comment">// 父结点</span></span><br><span class="line">&#125;Node, *RBTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的根</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span>&#123;</span></span><br><span class="line">    Node *node;</span><br><span class="line">&#125;RBRoot;</span><br></pre></td></tr></table></figure><h3 id="left-rotation"><a href="#left-rotation" class="headerlink" title="left-rotation"></a>left-rotation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(x)进行左旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左旋示意图(对节点x进行左旋)：</span></span><br><span class="line"><span class="comment"> *      px                              px</span></span><br><span class="line"><span class="comment"> *     /                               /</span></span><br><span class="line"><span class="comment"> *    x                               y                </span></span><br><span class="line"><span class="comment"> *   /  \      --(左旋)--&gt;           / \                #</span></span><br><span class="line"><span class="comment"> *  lx   y                          x  ry     </span></span><br><span class="line"><span class="comment"> *     /   \                       /  \</span></span><br><span class="line"><span class="comment"> *    ly   ry                     lx  ly  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_left_rotate</span><span class="params">(RBRoot *root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x的右孩子为y</span></span><br><span class="line">    Node *y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></span><br><span class="line">    <span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        y-&gt;left-&gt;parent = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></span><br><span class="line">    y-&gt;parent = x-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = y;            // 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">        root-&gt;node = y;            <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;parent-&gt;left == x)</span><br><span class="line">            x-&gt;parent-&gt;left = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x-&gt;parent-&gt;right = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 “x” 设为 “y的左孩子”</span></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    <span class="comment">// 将 “x的父节点” 设为 “y”</span></span><br><span class="line">    x-&gt;parent = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="right-rotation"><a href="#right-rotation" class="headerlink" title="right-rotation"></a>right-rotation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(y)进行右旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 右旋示意图(对节点y进行左旋)：</span></span><br><span class="line"><span class="comment"> *            py                               py</span></span><br><span class="line"><span class="comment"> *           /                                /</span></span><br><span class="line"><span class="comment"> *          y                                x                  </span></span><br><span class="line"><span class="comment"> *         /  \      --(右旋)--&gt;            /  \                     #</span></span><br><span class="line"><span class="comment"> *        x   ry                           lx   y  </span></span><br><span class="line"><span class="comment"> *       / \                                   / \                   #</span></span><br><span class="line"><span class="comment"> *      lx  rx                                rx  ry</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_right_rotate</span><span class="params">(RBRoot *root, Node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x是当前节点的左孩子。</span></span><br><span class="line">    Node *x = y-&gt;left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></span><br><span class="line">    <span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></span><br><span class="line">    y-&gt;left = x-&gt;right;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        x-&gt;right-&gt;parent = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></span><br><span class="line">    x-&gt;parent = y-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;parent == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = x;            // 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">        root-&gt;node = x;            <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == y-&gt;parent-&gt;right)</span><br><span class="line">            y-&gt;parent-&gt;right = x;    <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;parent-&gt;left = x;    <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y” 设为 “x的右孩子”</span></span><br><span class="line">    x-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父节点” 设为 “x”</span></span><br><span class="line">    y-&gt;parent = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加节点：将节点(node)插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *y = <span class="literal">NULL</span>;</span><br><span class="line">    Node *x = root-&gt;node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    rb_parent(node) = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; y-&gt;key)</span><br><span class="line">            y-&gt;left = node;                <span class="comment">// 情况2：若“node所包含的值” &lt; “y所包含的值”，则将node设为“y的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;right = node;            <span class="comment">// 情况3：(“node所包含的值” &gt;= “y所包含的值”)将node设为“y的右孩子” </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;node = node;                <span class="comment">// 情况1：若y是空节点，则将node设为根</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置节点的颜色为红色</span></span><br><span class="line">    node-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></span><br><span class="line">    rbtree_insert_fixup(root, node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert-fixup"><a href="#insert-fixup" class="headerlink" title="insert-fixup"></a>insert-fixup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树插入修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert_fixup</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *parent, *gparent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></span><br><span class="line">    <span class="keyword">while</span> ((parent = rb_parent(node)) &amp;&amp; rb_is_red(parent))</span><br><span class="line">    &#123;</span><br><span class="line">        gparent = rb_parent(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若“父节点”是“祖父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">if</span> (parent == gparent-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;right;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;right == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_right_rotate(root, gparent);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span><span class="comment">//若“z的父节点”是“z的祖父节点的右孩子”</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;left;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_left_rotate(root, gparent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将根节点设为黑色</span></span><br><span class="line">    rb_set_black(root-&gt;node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     node 删除的结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbtree_delete</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *child, *parent;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></span><br><span class="line">    <span class="keyword">if</span> ( (node-&gt;left!=<span class="literal">NULL</span>) &amp;&amp; (node-&gt;right!=<span class="literal">NULL</span>) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></span><br><span class="line">        <span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></span><br><span class="line">        Node *replace = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取后继节点</span></span><br><span class="line">        replace = replace-&gt;right;</span><br><span class="line">        <span class="keyword">while</span> (replace-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            replace = replace-&gt;left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></span><br><span class="line">        <span class="keyword">if</span> (rb_parent(node))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rb_parent(node)-&gt;left == node)</span><br><span class="line">                rb_parent(node)-&gt;left = replace;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rb_parent(node)-&gt;right = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="comment">// "node节点"是根节点，更新根节点。</span></span><br><span class="line">            root-&gt;node = replace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></span><br><span class="line">        <span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></span><br><span class="line">        child = replace-&gt;right;</span><br><span class="line">        parent = rb_parent(replace);</span><br><span class="line">        <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">        color = rb_color(replace);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></span><br><span class="line">        <span class="keyword">if</span> (parent == node)</span><br><span class="line">        &#123;</span><br><span class="line">            parent = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// child不为空</span></span><br><span class="line">            <span class="keyword">if</span> (child)</span><br><span class="line">                rb_set_parent(child, parent);</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line"></span><br><span class="line">            replace-&gt;right = node-&gt;right;</span><br><span class="line">            rb_set_parent(node-&gt;right, replace);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replace-&gt;parent = node-&gt;parent;</span><br><span class="line">        replace-&gt;color = node-&gt;color;</span><br><span class="line">        replace-&gt;left = node-&gt;left;</span><br><span class="line">        node-&gt;left-&gt;parent = replace;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">            rbtree_delete_fixup(root, child, parent);</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left !=<span class="literal">NULL</span>)</span><br><span class="line">        child = node-&gt;left;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        child = node-&gt;right;</span><br><span class="line"></span><br><span class="line">    parent = node-&gt;parent;</span><br><span class="line">    <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">    color = node-&gt;color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child)</span><br><span class="line">        child-&gt;parent = parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "node节点"不是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent-&gt;right = child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root-&gt;node = child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">        rbtree_delete_fixup(root, child, parent);</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete-fixup"><a href="#delete-fixup" class="headerlink" title="delete-fixup"></a>delete-fixup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树删除修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 待修正的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_delete_fixup</span><span class="params">(RBRoot *root, Node *node, Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((!node || rb_is_black(node)) &amp;&amp; node != root-&gt;node)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;right;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;right || rb_is_black(other-&gt;right))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;left);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_right_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;right);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;left || rb_is_black(other-&gt;left))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是黑色，右孩子为红色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;right);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_left_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的左孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;left);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        rb_set_black(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rbtree-h"><a href="#rbtree-h" class="headerlink" title="rbtree.h"></a>rbtree.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _RED_BLACK_TREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _RED_BLACK_TREE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED        0    <span class="comment">// 红色节点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLACK    1    <span class="comment">// 黑色节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> color;        <span class="comment">// 颜色(RED 或 BLACK)</span></span><br><span class="line">    Type   key;                    <span class="comment">// 关键字(键值)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">left</span>;</span>    <span class="comment">// 左孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">right</span>;</span>    <span class="comment">// 右孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">parent</span>;</span>    <span class="comment">// 父结点</span></span><br><span class="line">&#125;Node, *RBTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的根</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span>&#123;</span></span><br><span class="line">    Node *node;</span><br><span class="line">&#125;RBRoot;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建红黑树，返回"红黑树的根"！</span></span><br><span class="line"><span class="function">RBRoot* <span class="title">create_rbtree</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁红黑树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点插入到红黑树中。插入成功，返回0；失败返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除结点(key为节点的值)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"><span class="comment">// 中序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"><span class="comment">// 后序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (递归实现)查找"红黑树"中键值为key的节点。找到的话，返回0；否则，返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"><span class="comment">// (非递归实现)查找"红黑树"中键值为key的节点。找到的话，返回0；否则，返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iterative_rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回最小结点的值(将值保存到val中)。找到的话，返回0；否则返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_minimum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"><span class="comment">// 返回最大结点的值(将值保存到val中)。找到的话，返回0；否则返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_maximum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印红黑树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Rbtree-c"><a href="#Rbtree-c" class="headerlink" title="Rbtree.c"></a>Rbtree.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C语言实现的红黑树(Red Black Tree)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> * @date 2013/11/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rbtree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_parent(r)   ((r)-&gt;parent)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_color(r) ((r)-&gt;color)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_is_red(r)   ((r)-&gt;color==RED)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_is_black(r)  ((r)-&gt;color==BLACK)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_black(r)  do &#123; (r)-&gt;color = BLACK; &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_red(r)  do &#123; (r)-&gt;color = RED; &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_parent(r,p)  do &#123; (r)-&gt;parent = (p); &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_color(r,c)  do &#123; (r)-&gt;color = (c); &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建红黑树，返回"红黑树的根"！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">RBRoot* <span class="title">create_rbtree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RBRoot *root = (RBRoot *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RBRoot));</span><br><span class="line">    root-&gt;node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 前序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">        preorder(tree-&gt;left);</span><br><span class="line">        preorder(tree-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder_rbtree</span><span class="params">(RBRoot *root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        preorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 中序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inorder(tree-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">        inorder(tree-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_rbtree</span><span class="params">(RBRoot *root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        inorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 后序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        postorder(tree-&gt;left);</span><br><span class="line">        postorder(tree-&gt;right);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        postorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (递归实现)查找"红黑树x"中键值为key的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">search</span><span class="params">(RBTree x, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="literal">NULL</span> || x-&gt;key==key)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; x-&gt;key)</span><br><span class="line">        <span class="keyword">return</span> search(x-&gt;left, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> search(x-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        <span class="keyword">return</span> search(root-&gt;node, key)? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (非递归实现)查找"红黑树x"中键值为key的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">iterative_search</span><span class="params">(RBTree x, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((x!=<span class="literal">NULL</span>) &amp;&amp; (x-&gt;key!=key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iterative_rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        <span class="keyword">return</span> iterative_search(root-&gt;node, key) ? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 查找最小结点：返回tree为根结点的红黑树的最小结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">minimum</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tree-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        tree = tree-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_minimum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        node = minimum(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    *val = node-&gt;key;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 查找最大结点：返回tree为根结点的红黑树的最大结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">maximum</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tree-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        tree = tree-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_maximum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        node = maximum(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    *val = node-&gt;key;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 找结点(x)的后继结点。即，查找"红黑树中数据值大于该结点"的"最小结点"。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">rbtree_successor</span><span class="params">(RBTree x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果x存在右孩子，则"x的后继结点"为 "以其右孩子为根的子树的最小结点"。</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> minimum(x-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x没有右孩子。则x有以下两种可能：</span></span><br><span class="line">    <span class="comment">// (01) x是"一个左孩子"，则"x的后继结点"为 "它的父结点"。</span></span><br><span class="line">    <span class="comment">// (02) x是"一个右孩子"，则查找"x的最低的父结点，并且该父结点要具有左孩子"，找到的这个"最低的父结点"就是"x的后继结点"。</span></span><br><span class="line">    Node* y = x-&gt;parent;</span><br><span class="line">    <span class="keyword">while</span> ((y!=<span class="literal">NULL</span>) &amp;&amp; (x==y-&gt;right))</span><br><span class="line">    &#123;</span><br><span class="line">        x = y;</span><br><span class="line">        y = y-&gt;parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 找结点(x)的前驱结点。即，查找"红黑树中数据值小于该结点"的"最大结点"。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">rbtree_predecessor</span><span class="params">(RBTree x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果x存在左孩子，则"x的前驱结点"为 "以其左孩子为根的子树的最大结点"。</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> maximum(x-&gt;left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x没有左孩子。则x有以下两种可能：</span></span><br><span class="line">    <span class="comment">// (01) x是"一个右孩子"，则"x的前驱结点"为 "它的父结点"。</span></span><br><span class="line">    <span class="comment">// (01) x是"一个左孩子"，则查找"x的最低的父结点，并且该父结点要具有右孩子"，找到的这个"最低的父结点"就是"x的前驱结点"。</span></span><br><span class="line">    Node* y = x-&gt;parent;</span><br><span class="line">    <span class="keyword">while</span> ((y!=<span class="literal">NULL</span>) &amp;&amp; (x==y-&gt;left))</span><br><span class="line">    &#123;</span><br><span class="line">        x = y;</span><br><span class="line">        y = y-&gt;parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(x)进行左旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左旋示意图(对节点x进行左旋)：</span></span><br><span class="line"><span class="comment"> *      px                              px</span></span><br><span class="line"><span class="comment"> *     /                               /</span></span><br><span class="line"><span class="comment"> *    x                               y                </span></span><br><span class="line"><span class="comment"> *   /  \      --(左旋)--&gt;           / \                #</span></span><br><span class="line"><span class="comment"> *  lx   y                          x  ry     </span></span><br><span class="line"><span class="comment"> *     /   \                       /  \</span></span><br><span class="line"><span class="comment"> *    ly   ry                     lx  ly  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_left_rotate</span><span class="params">(RBRoot *root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x的右孩子为y</span></span><br><span class="line">    Node *y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></span><br><span class="line">    <span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        y-&gt;left-&gt;parent = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></span><br><span class="line">    y-&gt;parent = x-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = y;            // 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">        root-&gt;node = y;            <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;parent-&gt;left == x)</span><br><span class="line">            x-&gt;parent-&gt;left = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x-&gt;parent-&gt;right = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 “x” 设为 “y的左孩子”</span></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    <span class="comment">// 将 “x的父节点” 设为 “y”</span></span><br><span class="line">    x-&gt;parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(y)进行右旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 右旋示意图(对节点y进行左旋)：</span></span><br><span class="line"><span class="comment"> *            py                               py</span></span><br><span class="line"><span class="comment"> *           /                                /</span></span><br><span class="line"><span class="comment"> *          y                                x                  </span></span><br><span class="line"><span class="comment"> *         /  \      --(右旋)--&gt;            /  \                     #</span></span><br><span class="line"><span class="comment"> *        x   ry                           lx   y  </span></span><br><span class="line"><span class="comment"> *       / \                                   / \                   #</span></span><br><span class="line"><span class="comment"> *      lx  rx                                rx  ry</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_right_rotate</span><span class="params">(RBRoot *root, Node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x是当前节点的左孩子。</span></span><br><span class="line">    Node *x = y-&gt;left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></span><br><span class="line">    <span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></span><br><span class="line">    y-&gt;left = x-&gt;right;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        x-&gt;right-&gt;parent = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></span><br><span class="line">    x-&gt;parent = y-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;parent == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = x;            // 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">        root-&gt;node = x;            <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == y-&gt;parent-&gt;right)</span><br><span class="line">            y-&gt;parent-&gt;right = x;    <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;parent-&gt;left = x;    <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y” 设为 “x的右孩子”</span></span><br><span class="line">    x-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父节点” 设为 “x”</span></span><br><span class="line">    y-&gt;parent = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树插入修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert_fixup</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *parent, *gparent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></span><br><span class="line">    <span class="keyword">while</span> ((parent = rb_parent(node)) &amp;&amp; rb_is_red(parent))</span><br><span class="line">    &#123;</span><br><span class="line">        gparent = rb_parent(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若“父节点”是“祖父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">if</span> (parent == gparent-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;right;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;right == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_right_rotate(root, gparent);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span><span class="comment">//若“z的父节点”是“z的祖父节点的右孩子”</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;left;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_left_rotate(root, gparent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将根节点设为黑色</span></span><br><span class="line">    rb_set_black(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加节点：将节点(node)插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *y = <span class="literal">NULL</span>;</span><br><span class="line">    Node *x = root-&gt;node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    rb_parent(node) = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; y-&gt;key)</span><br><span class="line">            y-&gt;left = node;                <span class="comment">// 情况2：若“node所包含的值” &lt; “y所包含的值”，则将node设为“y的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;right = node;            <span class="comment">// 情况3：(“node所包含的值” &gt;= “y所包含的值”)将node设为“y的右孩子” </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;node = node;                <span class="comment">// 情况1：若y是空节点，则将node设为根</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置节点的颜色为红色</span></span><br><span class="line">    node-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></span><br><span class="line">    rbtree_insert_fixup(root, node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     key 是键值。</span></span><br><span class="line"><span class="comment"> *     parent 是父结点。</span></span><br><span class="line"><span class="comment"> *     left 是左孩子。</span></span><br><span class="line"><span class="comment"> *     right 是右孩子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">create_rbtree_node</span><span class="params">(Type key, Node *parent, Node *left, Node* right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    p-&gt;left = left;</span><br><span class="line">    p-&gt;right = right;</span><br><span class="line">    p-&gt;parent = parent;</span><br><span class="line">    p-&gt;color = BLACK; <span class="comment">// 默认为黑色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 新建结点(节点键值为key)，并将其插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     key 插入结点的键值</span></span><br><span class="line"><span class="comment"> * 返回值：</span></span><br><span class="line"><span class="comment"> *     0，插入成功</span></span><br><span class="line"><span class="comment"> *     -1，插入失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;    <span class="comment">// 新建结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许插入相同键值的节点。</span></span><br><span class="line">    <span class="comment">// (若想允许插入相同键值的节点，注释掉下面两句话即可！)</span></span><br><span class="line">    <span class="keyword">if</span> (search(root-&gt;node, key) != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果新建结点失败，则返回。</span></span><br><span class="line">    <span class="keyword">if</span> ((node=create_rbtree_node(key, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    rbtree_insert(root, node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树删除修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 待修正的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_delete_fixup</span><span class="params">(RBRoot *root, Node *node, Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((!node || rb_is_black(node)) &amp;&amp; node != root-&gt;node)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;right;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;right || rb_is_black(other-&gt;right))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;left);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_right_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;right);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;left || rb_is_black(other-&gt;left))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;right);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_left_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;left);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        rb_set_black(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     node 删除的结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbtree_delete</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *child, *parent;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></span><br><span class="line">    <span class="keyword">if</span> ( (node-&gt;left!=<span class="literal">NULL</span>) &amp;&amp; (node-&gt;right!=<span class="literal">NULL</span>) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></span><br><span class="line">        <span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></span><br><span class="line">        Node *replace = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取后继节点</span></span><br><span class="line">        replace = replace-&gt;right;</span><br><span class="line">        <span class="keyword">while</span> (replace-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            replace = replace-&gt;left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></span><br><span class="line">        <span class="keyword">if</span> (rb_parent(node))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rb_parent(node)-&gt;left == node)</span><br><span class="line">                rb_parent(node)-&gt;left = replace;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rb_parent(node)-&gt;right = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="comment">// "node节点"是根节点，更新根节点。</span></span><br><span class="line">            root-&gt;node = replace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></span><br><span class="line">        <span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></span><br><span class="line">        child = replace-&gt;right;</span><br><span class="line">        parent = rb_parent(replace);</span><br><span class="line">        <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">        color = rb_color(replace);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></span><br><span class="line">        <span class="keyword">if</span> (parent == node)</span><br><span class="line">        &#123;</span><br><span class="line">            parent = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// child不为空</span></span><br><span class="line">            <span class="keyword">if</span> (child)</span><br><span class="line">                rb_set_parent(child, parent);</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line"></span><br><span class="line">            replace-&gt;right = node-&gt;right;</span><br><span class="line">            rb_set_parent(node-&gt;right, replace);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replace-&gt;parent = node-&gt;parent;</span><br><span class="line">        replace-&gt;color = node-&gt;color;</span><br><span class="line">        replace-&gt;left = node-&gt;left;</span><br><span class="line">        node-&gt;left-&gt;parent = replace;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">            rbtree_delete_fixup(root, child, parent);</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left !=<span class="literal">NULL</span>)</span><br><span class="line">        child = node-&gt;left;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        child = node-&gt;right;</span><br><span class="line"></span><br><span class="line">    parent = node-&gt;parent;</span><br><span class="line">    <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">    color = node-&gt;color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child)</span><br><span class="line">        child-&gt;parent = parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "node节点"不是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent-&gt;right = child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root-&gt;node = child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">        rbtree_delete_fixup(root, child, parent);</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除键值为key的结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     key 键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *z, *node; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((z = search(root-&gt;node, key)) != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_delete(root, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 销毁红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_destroy</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tree-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(tree-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (tree-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(tree-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 打印"红黑树"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * tree       -- 红黑树的节点</span></span><br><span class="line"><span class="comment"> * key        -- 节点的键值 </span></span><br><span class="line"><span class="comment"> * direction  --  0，表示该节点是根节点;</span></span><br><span class="line"><span class="comment"> *               -1，表示该节点是它的父结点的左孩子;</span></span><br><span class="line"><span class="comment"> *                1，表示该节点是它的父结点的右孩子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_print</span><span class="params">(RBTree tree, Type key, <span class="keyword">int</span> direction)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(direction==<span class="number">0</span>)    <span class="comment">// tree是根节点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d(B) is root\n"</span>, tree-&gt;key);</span><br><span class="line">        <span class="keyword">else</span>                <span class="comment">// tree是分支节点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d(%s) is %2d's %6s child\n"</span>, tree-&gt;key, rb_is_red(tree)?<span class="string">"R"</span>:<span class="string">"B"</span>, key, direction==<span class="number">1</span>?<span class="string">"right"</span> : <span class="string">"left"</span>);</span><br><span class="line"></span><br><span class="line">        rbtree_print(tree-&gt;left, tree-&gt;key, <span class="number">-1</span>);</span><br><span class="line">        rbtree_print(tree-&gt;right,tree-&gt;key,  <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root!=<span class="literal">NULL</span> &amp;&amp; root-&gt;node!=<span class="literal">NULL</span>)</span><br><span class="line">        rbtree_print(root-&gt;node, root-&gt;node-&gt;key, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol><li><blockquote><p>In the red-black tree that results after successively inserting the keys 41; 38; 31; 12; 19; 8 into an initially empty red-black tree, which one of the following statements is FALSE? (2分)<br>B<br>A. 38 is the root<br>B. 19 and 41 are siblings, and they are both red<br>C. 12 and 31 are siblings, and they are both black<br>D. 8 is red</p></blockquote><p><img src="../../../../../../images/ads/rbTree/ex1.png" alt="ex1"></p></li><li><blockquote><p>After deleting 15 from the red-black tree given in the figure, which one of the following statements must be FALSE? (2分)<br>C</p><img src="../../../../../../" width=20%><p>A. 11 is the parent of 17, and 11 is black<br>B. 17 is the parent of 11, and 11 is red<br>C. 11 is the parent of 17, and 11 is red<br>D. 17 is the parent of 11, and 17 is black</p></blockquote></li></ol><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/skywang12345/p/3624177.html" target="_blank" rel="noopener">https://www.cnblogs.com/skywang12345/p/3624177.html</a></p><p><a href="https://blog.csdn.net/weewqrer/article/details/51866488" target="_blank" rel="noopener">https://blog.csdn.net/weewqrer/article/details/51866488</a></p><p><a href="https://www.cnblogs.com/tongy0/p/5460623.html" target="_blank" rel="noopener">https://www.cnblogs.com/tongy0/p/5460623.html</a></p><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51530558" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51530558</a></p><p>《Introduction to Algorithms》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;A red-black tree is a binary search tr
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】B+ Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/bptree/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/bptree/</id>
    <published>2020-01-27T04:38:56.000Z</published>
    <updated>2020-01-27T04:43:26.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A B+ tree of order M is a tree with the following structural properties:<br>(1)  The root is either a leaf or has between 2 and M children.<br>(2)  All nonleaf nodes (except the root) have between $\lceil M/2 \rceil$ and M children.<br>(3)  All leaves are at the same depth.<br>Assume each nonroot leaf also has between $\lceil M/2 \rceil$ and M children<br><br></p><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol><li><blockquote><p>Insert 3, 1, 4, 5, 9, 2, 6, 8, 7, 0 into an initially empty 2-3 tree (with splitting). Which one of the following statements is FALSE? (2分)<br>A<br>A. 7 and 8 are in the same node<br>B. the parent of the node containing 5 has 3 children<br>C. the first key stored in the root is 6<br>D. there are 5 leaf nodes</p></blockquote><p><img src="/images/ads/bpTree/ex1.jpeg" alt="ex1"></p></li><li></li></ol><p><img src="/images/ads/bpTree/ex2.png" alt="ex2"></p><ol start="3"><li><p><img src="/images/ads/bpTree/ex3.png" alt="ex3"></p></li></ol><br><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullzx/p/8729425.html</a></p><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51557672?utm_source=blogxgwz2" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51557672?utm_source=blogxgwz2</a><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;A B+ tree of order M is a tree with th
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Inverted File Index</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/inverted_file_index/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/inverted_file_index/</id>
    <published>2020-01-27T04:32:16.000Z</published>
    <updated>2020-01-27T04:38:24.375Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while ( read a document D ) &#123;</span><br><span class="line">    while ( read a term T in D ) &#123;</span><br><span class="line">        if ( Find( Dictionary, T ) &#x3D;&#x3D; false )</span><br><span class="line">            Insert( Dictionary, T );</span><br><span class="line">        Get T’s posting list;</span><br><span class="line">        Insert a node to T’s posting list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Write the inverted index to disk;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">BlockCnt &#x3D; 0; </span><br><span class="line">while ( read a document D ) &#123;</span><br><span class="line">  while ( read a term T in D ) &#123;</span><br><span class="line">    if ( out of memory ) &#123;</span><br><span class="line">      Write BlockIndex[BlockCnt] to disk;</span><br><span class="line">      BlockCnt ++;</span><br><span class="line">      FreeMemory;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( Find( Dictionary, T ) &#x3D;&#x3D; false )</span><br><span class="line">      Insert( Dictionary, T );</span><br><span class="line">    Get T’s posting list;</span><br><span class="line">    Insert a node to T’s posting list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">for ( i&#x3D;0; i&lt;BlockCnt; i++ )</span><br><span class="line">  Merge( InvertedIndex, BlockIndex[i] );</span><br></pre></td></tr></table></figure><br><h2 id="Distributed-Index"><a href="#Distributed-Index" class="headerlink" title="Distributed Index"></a>Distributed Index</h2><ul><li><p>Term-partitioned</p><img src="/images/ads/ifi/ind1.png" width=50%></li><li><p>Document-partitioned index</p><img src="/images/ads/ifi/ind2.png" width=50%></li></ul><h2 id="Measures-for-a-Search-Engine"><a href="#Measures-for-a-Search-Engine" class="headerlink" title="Measures for a Search Engine"></a>Measures for a Search Engine</h2><ul><li>How fast does it index</li><li>How fast does it search</li><li>Expressiveness of query language</li></ul><p><strong>Data Retrieval Performance Evaluation (after establishing correctness)</strong></p><ul><li>Response time</li><li>Index space</li></ul><p><strong>Information Retrieval Performance Evaluation</strong></p><ul><li>How relevant is the answer set?</li></ul><br><table><thead><tr><th></th><th><strong>Relevant</strong></th><th><strong>Irrelevant</strong></th></tr></thead><tbody><tr><td><strong>Retrieved</strong></td><td>$R_R$</td><td>$I_R$</td></tr><tr><td><strong>Not Retrieved</strong></td><td>$R_N$</td><td>$I_N$</td></tr></tbody></table><p>Precision:  $P=R_R/(R_R+I_R)$</p><p>Recall:  $R=R_R/(R_R+R_N)$<br><br></p><hr><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><p><img src="/images/ads/ifi/ex1.png" alt="ex1"></p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51559937" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51559937</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Leftist Heap</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/leftist/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/leftist/</id>
    <published>2020-01-26T14:30:53.000Z</published>
    <updated>2020-01-26T15:39:18.801Z</updated>
    
    <content type="html"><![CDATA[<p>二叉堆的合并需要耗费O(N)的代价，而leftist heap只需O(logN)</p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Npl (X)<br>The null path length, Npl(X), of any node X is the length of the shortest path from X to a node without two children. Define Npl(NULL) = –1.<br>也就是说，npl是从该节点到第一个没有两个孩子的子节点的路径长度。</p><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PriorityQueue  <span class="title">Merge</span> <span class="params">( PriorityQueue H1, PriorityQueue H2 )</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> ( H1 == <span class="literal">NULL</span> )   <span class="keyword">return</span> H2;  </span><br><span class="line">    <span class="keyword">if</span> ( H2 == <span class="literal">NULL</span> )   <span class="keyword">return</span> H1;  </span><br><span class="line">    <span class="keyword">if</span> ( H1-&gt;Element &lt; H2-&gt;Element )  <span class="keyword">return</span> Merge1( H1, H2 );</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Merge1( H2, H1 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PriorityQueue</span><br><span class="line">Merge1( PriorityQueue H1, PriorityQueue H2 )</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">if</span> ( H1-&gt;Left == <span class="literal">NULL</span> )     <span class="comment">/* single node */</span></span><br><span class="line">        H1-&gt;Left = H2;  <span class="comment">/* H1-&gt;Right is already NULL </span></span><br><span class="line"><span class="comment">                        and H1-&gt;Npl is already 0 */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        H1-&gt;Right = Merge( H1-&gt;Right, H2 );     <span class="comment">/* Step 1 &amp; 2 */</span></span><br><span class="line">        <span class="keyword">if</span> ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl )</span><br><span class="line">            SwapChildren( H1 ); <span class="comment">/* Step 3 */</span></span><br><span class="line">        H1-&gt;Npl = H1-&gt;Right-&gt;Npl + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="comment">/* end else */</span></span><br><span class="line">    <span class="keyword">return</span> H1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><p><img src="/images/ads/leftist/ex1.png" alt="ex1"></p><img src="/images/ads/letist/ex2.png" width=60%><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51571024" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51571024</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二叉堆的合并需要耗费O(N)的代价，而leftist heap只需O(logN)&lt;/p&gt;
&lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definiti
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Skew Heap</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/skew_heap/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/skew_heap/</id>
    <published>2020-01-26T14:22:01.000Z</published>
    <updated>2020-01-26T14:29:29.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/images/ads/skew/ex1.png" alt="ex1"></p><p><img src="/images/ads/skew/ex2.png" alt="ex2"></p><p><img src="/images/ads/skew/ex3.png" alt="ex3"></p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51586384" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51586384</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Exercise&quot;&gt;&lt;a href=&quot;#Exercise&quot; class=&quot;headerlink&quot; title=&quot;Exercise&quot;&gt;&lt;/a&gt;Exercise&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/ads/skew/ex1.png&quot; alt=&quot;ex1&quot;&gt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Binomial Queue</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/binomial_queue/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/binomial_queue/</id>
    <published>2020-01-26T14:20:26.000Z</published>
    <updated>2020-01-26T14:21:33.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Time-complexity"><a href="#Time-complexity" class="headerlink" title="Time complexity"></a>Time complexity</h2><p>Find min: O(logN)</p><p>Merge: O(logN)</p><p>Insert: average time is const, worst case is O(N)</p><p>A binomial queue of N elements can be built by N successive insertions in O(N) time.</p><p>$T_{worst} = O(log N),$  but  $T_{amortized} = 2$</p><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><p>left-child-next-sibling</p><p>the new tree will be the largest</p><p>maintain the subtrees in decreasing order</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"binomialqueue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"fatal.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXTREES 25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAPACITY ((1&lt;&lt;MAXTREES)-1)<span class="comment">//容量是2^0+2^1+2^3+2^(MAXTREES-1)</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span> &#123;</span></span><br><span class="line">ElementType element;</span><br><span class="line">Position leftChild;</span><br><span class="line">Position nextSibling;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Collection</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> currentSize;</span><br><span class="line">BinTree theTrees[MAXTREES];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">BinQueue <span class="title">initialize</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">BinQueue h = (BinQueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Collection));</span><br><span class="line"><span class="keyword">if</span> (h == <span class="literal">NULL</span>)</span><br><span class="line">Error(<span class="string">"OUT OF MEMORY"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXTREES; i++)</span><br><span class="line">h-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h-&gt;currentSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ElementType <span class="title">findMin</span><span class="params">(BinQueue h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(h))</span><br><span class="line">Error(<span class="string">"EMPTY HEAP"</span>);</span><br><span class="line">ElementType minElem;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt;= h-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;<span class="comment">//找到第一个的二项树的根,j代表i二项树结点的个数，最大的二项树的下一个二项树的结点的个数比currentSize的最大值大1</span></span><br><span class="line"><span class="keyword">if</span> (h-&gt;theTrees[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">minElem = h-&gt;theTrees[i]-&gt;element;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; j &lt;= h-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;<span class="comment">//再和剩下的比较</span></span><br><span class="line"><span class="keyword">if</span> (h-&gt;theTrees[i] &amp;&amp; h-&gt;theTrees[i]-&gt;element &lt; minElem) &#123;</span><br><span class="line">minElem = h-&gt;theTrees[i]-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> minElem;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(BinQueue h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> h-&gt;currentSize == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> BinTree <span class="title">combineTrees</span><span class="params">(BinTree t1, BinTree t2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t1-&gt;element &gt; t2-&gt;element)</span><br><span class="line"><span class="keyword">return</span> combineTrees(t2, t1);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">t2-&gt;nextSibling = t1-&gt;leftChild;<span class="comment">//leftchild指向高度高的二项树，高度依次从nextSibling减少</span></span><br><span class="line">t1-&gt;leftChild = t2;</span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">BinQueue <span class="title">merge</span><span class="params">(BinQueue &amp;h1, BinQueue &amp;h2)</span> </span>&#123;<span class="comment">//h2合并到h1当中</span></span><br><span class="line"><span class="keyword">if</span> (h1 == h2)</span><br><span class="line"><span class="keyword">return</span> h1;</span><br><span class="line">BinTree t1, t2;</span><br><span class="line">BinTree carry = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> carrt_tag;</span><br><span class="line"><span class="keyword">if</span> (h1-&gt;currentSize + h2-&gt;currentSize &gt; CAPACITY)</span><br><span class="line">Error(<span class="string">"TOO MUCH ELEM"</span>);</span><br><span class="line"><span class="keyword">if</span> (h1-&gt;currentSize &lt; h2-&gt;currentSize) &#123;</span><br><span class="line"><span class="comment">//互换</span></span><br><span class="line">BinQueue temp;</span><br><span class="line">temp = h1;</span><br><span class="line">h1 = h2;</span><br><span class="line">h2 = temp;</span><br><span class="line">&#125;</span><br><span class="line">h1-&gt;currentSize += h2-&gt;currentSize;</span><br><span class="line"><span class="keyword">int</span> h2Size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt;= h1-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;<span class="comment">//统计h2中树的数量</span></span><br><span class="line"><span class="keyword">if</span> (h2-&gt;theTrees[i] != <span class="literal">NULL</span>)</span><br><span class="line">h2Size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; (carry || h2Size) &amp;&amp; j &lt;= h1-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;</span><br><span class="line">t1 = h1-&gt;theTrees[i];</span><br><span class="line">t2 = h2-&gt;theTrees[i];</span><br><span class="line"><span class="keyword">if</span> (carry)</span><br><span class="line">carrt_tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">carrt_tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (!!t1 + <span class="number">2</span> * !!t2 + <span class="number">4</span> * carrt_tag) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//t1,t2,carry空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//t1非空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//t2非空</span></span><br><span class="line">h1-&gt;theTrees[i] = t2;</span><br><span class="line">h2-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2Size--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//t1,t2非空</span></span><br><span class="line">carry = combineTrees(t1, t2);</span><br><span class="line">h1-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2Size--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//carry非空</span></span><br><span class="line">h1-&gt;theTrees[i] = carry;</span><br><span class="line">carry = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//t1,carry非空</span></span><br><span class="line">carry = combineTrees(t1, carry);</span><br><span class="line">h1-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//t2, carry非空</span></span><br><span class="line">carry = combineTrees(t2, carry);</span><br><span class="line">h2-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2Size--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">h1-&gt;theTrees[i] = carry;</span><br><span class="line">carry = combineTrees(t1, t2);</span><br><span class="line">h2-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2Size--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Error(<span class="string">"error"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ElementType X, BinQueue h)</span> </span>&#123;</span><br><span class="line">BinTree t1;</span><br><span class="line">BinTree carry = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct BinNode));</span><br><span class="line"><span class="keyword">if</span> (carry == <span class="literal">NULL</span>)</span><br><span class="line">Error(<span class="string">"EMPTY MEOERY"</span>);</span><br><span class="line">carry-&gt;element = X;</span><br><span class="line">carry-&gt;leftChild = carry-&gt;nextSibling = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> carrt_tag;</span><br><span class="line"><span class="keyword">if</span> (h-&gt;currentSize + <span class="number">1</span> &gt; CAPACITY)</span><br><span class="line">Error(<span class="string">"TOO MUCH ELEM"</span>);</span><br><span class="line">h-&gt;currentSize += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (carry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">t1 = h-&gt;theTrees[i];</span><br><span class="line"><span class="keyword">if</span> (carry)</span><br><span class="line">carrt_tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">carrt_tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (!!t1 + <span class="number">2</span> * !!carrt_tag) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//t1,t2,carry空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//t1非空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//carry非空</span></span><br><span class="line">h-&gt;theTrees[i] = carry;</span><br><span class="line">carry = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//t1,carry非空</span></span><br><span class="line">carry = combineTrees(t1, carry);</span><br><span class="line">h-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Error(<span class="string">"error"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">BinQueue <span class="title">deleteMin</span><span class="params">(BinQueue h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(h))</span><br><span class="line">Error(<span class="string">"EMPTY HEAP"</span>);</span><br><span class="line"><span class="keyword">int</span> minTree;</span><br><span class="line">ElementType minElem;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt;= h-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (h-&gt;theTrees[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">minElem = h-&gt;theTrees[i]-&gt;element;</span><br><span class="line">minTree = i;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; j &lt;= h-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (h-&gt;theTrees[i] &amp;&amp; h-&gt;theTrees[i]-&gt;element &lt; minElem) &#123;</span><br><span class="line">minElem = h-&gt;theTrees[i]-&gt;element;</span><br><span class="line">minTree = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BinQueue deleteQueue = initialize();</span><br><span class="line">deleteQueue-&gt;currentSize = (<span class="number">1</span> &lt;&lt; minTree) - <span class="number">1</span>;<span class="comment">//mintree的儿子有mintree个，结点个数加起来就是 (1 &lt;&lt; minTree) - 1</span></span><br><span class="line">Position p = h-&gt;theTrees[minTree]-&gt;leftChild;<span class="comment">//高度从大到小</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = minTree - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, p = p-&gt;nextSibling) &#123;</span><br><span class="line">deleteQueue-&gt;theTrees[i] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(h-&gt;theTrees[minTree]);</span><br><span class="line">h-&gt;theTrees[minTree] = <span class="literal">NULL</span>;</span><br><span class="line">h-&gt;currentSize -= (deleteQueue-&gt;currentSize + <span class="number">1</span>);</span><br><span class="line">merge(h, deleteQueue);</span><br><span class="line"><span class="built_in">free</span>(deleteQueue);</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Time-complexity&quot;&gt;&lt;a href=&quot;#Time-complexity&quot; class=&quot;headerlink&quot; title=&quot;Time complexity&quot;&gt;&lt;/a&gt;Time complexity&lt;/h2&gt;&lt;p&gt;Find min: O(logN)&lt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Devide &amp; Conquer</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/devide_n_conquer/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/devide_n_conquer/</id>
    <published>2020-01-26T14:15:14.000Z</published>
    <updated>2020-01-26T14:29:44.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Master-theorem"><a href="#Master-theorem" class="headerlink" title="Master theorem"></a>Master theorem</h2><ul><li>substitution method</li><li>recursion tree method</li><li>master method</li></ul><img src="/images/ads/devide-n-conquer/master.png" width=90%><p><img src="/images/ads/devide-n-conquer/master2.png" alt="master2"></p><br><hr><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><blockquote><p>Which one of the following is the lowest upper bound of T(n) for the following recursion $T(n)=2T(\sqrt n)+logn$ ? (4分) A<br>A. $O(lognloglogn)$<br>B. $O(log^2n)$<br>C. $O(nlogn)$<br>D. $O(n^2)$</p></blockquote><p>设 $m = logn$, 则$2^m = n$.<br>$T(2^m) = 2T(2^{m/2}) + m$<br>设 $G(m) = T(2^m)$，则原式转化为$G(m) = 2G(m/2) + m$<br>根据主定理，$a = 2, b = 2, k = 1, p = 0. a = b^k$，满足条件2，所以算法复杂度为$O（mlogm）$<br>又因为 $m = logn$ ,所以算法复杂度为$O（logn loglogn)$</p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/zju_fish1996/article/details/51074532" target="_blank" rel="noopener">https://blog.csdn.net/zju_fish1996/article/details/51074532</a></p><br> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Master-theorem&quot;&gt;&lt;a href=&quot;#Master-theorem&quot; class=&quot;headerlink&quot; title=&quot;Master theorem&quot;&gt;&lt;/a&gt;Master theorem&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;substitution met
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Dynamic Programming</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/dp/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/dp/</id>
    <published>2020-01-26T14:12:19.000Z</published>
    <updated>2020-01-26T14:29:07.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ordering-matrix-multiplication"><a href="#Ordering-matrix-multiplication" class="headerlink" title="Ordering matrix multiplication"></a>Ordering matrix multiplication</h2><img src="/images/ads/dp/matrix.png" width=50%><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* r contains number of columns for each of the N matrices */</span> </span><br><span class="line"><span class="comment">/* r[ 0 ] is the number of rows in matrix 1 */</span> </span><br><span class="line"><span class="comment">/* Minimum number of multiplications is left in M[ 1 ][ N ] */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OptMatrix</span><span class="params">( <span class="keyword">const</span> <span class="keyword">long</span> r[ ], <span class="keyword">int</span> N, TwoDimArray M )</span> </span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span>  i, j, k, L; </span><br><span class="line">    <span class="keyword">long</span>  ThisM; </span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= N; i++ )   M[ i ][ i ] = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span>( k = <span class="number">1</span>; k &lt; N; k++ ) <span class="comment">/* k = j - i */</span> </span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= N - k; i++ ) &#123; <span class="comment">/* For each position */</span> </span><br><span class="line">j = i + k;    M[ i ][ j ] = Infinity; </span><br><span class="line"><span class="keyword">for</span>( L = i; L &lt; j; L++ ) &#123; </span><br><span class="line">    ThisM = M[ i ][ L ] + M[ L + <span class="number">1</span> ][ j ] + r[ i - <span class="number">1</span> ] * r[ L ] * r[ j ]; </span><br><span class="line">    <span class="keyword">if</span> ( ThisM &lt; M[ i ][ j ] )  <span class="comment">/* Update min */</span> </span><br><span class="line">M[ i ][ j ] = ThisM; </span><br><span class="line">&#125;  <span class="comment">/* end for-L */</span></span><br><span class="line">        &#125;  <span class="comment">/* end for-Left */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Optimal-binary-search-tree"><a href="#Optimal-binary-search-tree" class="headerlink" title="Optimal binary search tree"></a>Optimal binary search tree</h2><p>$T(N) = \sum p_i (1+d_i)$<br><br></p><h2 id="All-pairs-shortest-path"><a href="#All-pairs-shortest-path" class="headerlink" title="All-pairs shortest path"></a>All-pairs shortest path</h2><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* A[ ] contains the adjacency matrix with A[ i ][ i ] = 0 */</span> </span><br><span class="line"><span class="comment">/* D[ ] contains the values of the shortest path */</span> </span><br><span class="line"><span class="comment">/* N is the number of vertices */</span> </span><br><span class="line"><span class="comment">/* A negative cycle exists iff D[ i ][ i ] &lt; 0 */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AllPairs</span><span class="params">( TwoDimArray A, TwoDimArray D, <span class="keyword">int</span> N )</span> </span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span>  i, j, k; </span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; i++ )  <span class="comment">/* Initialize D */</span> </span><br><span class="line">    <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; N; j++ )</span><br><span class="line"> D[ i ][ j ] = A[ i ][ j ]; </span><br><span class="line">    <span class="keyword">for</span>( k = <span class="number">0</span>; k &lt; N; k++ )  <span class="comment">/* add one vertex k into the path */</span></span><br><span class="line">         <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; N; i++ ) </span><br><span class="line"> <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; N; j++ ) </span><br><span class="line">    <span class="keyword">if</span>( D[ i ][ k ] + D[ k ][ j ] &lt; D[ i ][ j ] ) </span><br><span class="line"><span class="comment">/* Update shortest path */</span> </span><br><span class="line">D[ i ][ j ] = D[ i ][ k ] + D[ k ][ j ]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Product-assembly"><a href="#Product-assembly" class="headerlink" title="Product assembly"></a>Product assembly</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ordering-matrix-multiplication&quot;&gt;&lt;a href=&quot;#Ordering-matrix-multiplication&quot; class=&quot;headerlink&quot; title=&quot;Ordering matrix multiplication&quot;&gt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Greedy Algorithm</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/greedy/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/greedy/</id>
    <published>2020-01-26T14:04:00.000Z</published>
    <updated>2020-01-26T14:28:33.397Z</updated>
    
    <content type="html"><![CDATA[<p>Greedy algorithm works only if the local optimum is equal to the global optimum.<br><br></p><h2 id="活动选择问题"><a href="#活动选择问题" class="headerlink" title="活动选择问题"></a>活动选择问题</h2><p>Consider any nonempty subproblem $S_k$, and let am be an activity in $S_k$ with the earliest finish time.  Then am is included in some maximum-size subset of mutually compatible activities of $S_k$<br><br></p><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h3><p>f[i][v]：表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。</p><p>状态转移方程是：f[i][v]=max{f[i-1][v],f[i-1][v-weight[i]]+value[i]}</p><p>“将前i件物品放入容量为v的背包中”这个子问题，如果只考虑第i件物品放或者不放，那么就可以转化为只涉及前i-1件物品的问题：</p><ol><li><p>如果不放第i件物品，则问题转化为“前i-1件物品放入容量为v的背包中”；</p></li><li><p>如果放第i件物品，则问题转化为“前i-1件物品放入剩下的容量为v-weight[i]的背包中”，此时能获得的最大价值就是f [i-1][v-weight[i]]，再加上通过放入第i件物品获得的价值value[i]。</p></li></ol><p>f[i][v]的值就是1、2中最大的那个值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 背包问题    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3 <span class="comment">// N件宝贝    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C 5 <span class="comment">// C是背包的总capacity    </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> value[N + <span class="number">1</span>] = &#123; <span class="number">0</span>, <span class="number">60</span>, <span class="number">100</span>, <span class="number">120</span> &#125;; <span class="comment">// 价值    </span></span><br><span class="line">    <span class="keyword">int</span> weight[N + <span class="number">1</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;     <span class="comment">// 重量    </span></span><br><span class="line">    <span class="keyword">int</span> f[N + <span class="number">1</span>][C + <span class="number">1</span>] = &#123; <span class="number">0</span> &#125;;   <span class="comment">// f[i][j]表示在背包容量为j的情况下，前i件宝贝的最大价值    </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; i++)        <span class="comment">//外循环控制物品数量，确保每个物品都会被遍历到  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">/*for (j = weight[i]; j &lt;= C; j++)      //内循环控制物品的重量，确保能够遍历出“以前每个物品放入时的最大价值f[i][j]” </span></span><br><span class="line"><span class="comment">        &#123; </span></span><br><span class="line"><span class="comment">            int x = f[i - 1][j];        //不放第i件物品 </span></span><br><span class="line"><span class="comment">            int y = f[i - 1][j - weight[i]] + value[i];      //放入第i件物品 </span></span><br><span class="line"><span class="comment">            f[i][j] = max(x, y); </span></span><br><span class="line"><span class="comment">        &#125;*/</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= C; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">// 递推关系式    </span></span><br><span class="line">            <span class="keyword">if</span> (j &lt; weight[i])  </span><br><span class="line">            &#123;  </span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">int</span> x = f[i - <span class="number">1</span>][j];  </span><br><span class="line">                <span class="keyword">int</span> y = f[i - <span class="number">1</span>][j - weight[i]] + value[i];  </span><br><span class="line">                f[i][j] = max(x, y);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= N; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= C; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%4d "</span>, f[i][j]);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"选取的最大价值是："</span> &lt;&lt; f[N][C] &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"选取的物品如下："</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    i = N, j = C;  </span><br><span class="line">    <span class="keyword">while</span> (i)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (f[i][j] == (f[i - <span class="number">1</span>][j - weight[i]] + value[i]))  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="string">"weight="</span> &lt;&lt; weight[i] &lt;&lt; <span class="string">", value="</span> &lt;&lt; value[i] &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">            j -= weight[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">        i--;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化空间复杂度：</p><p>上面f[i][v]使用二维数组存储的，可以优化为一维数组f[v]，将主循环改为：</p><p>for i = 1..N；</p><p>for v = V..0；</p><p>f[v] = max（f[v]， f[v-c[i]]+w[i]）；</p><p>即将第二层循环改为从V..0，逆序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MIN = <span class="number">0x80000000</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;   <span class="comment">//物品数量  </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">5</span>;  <span class="comment">//背包容量  </span></span><br><span class="line"><span class="keyword">int</span> f[V + <span class="number">1</span>];              <span class="comment">// 一维数组  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Package</span><span class="params">(<span class="keyword">int</span> *W, <span class="keyword">int</span> *C, <span class="keyword">int</span> N, <span class="keyword">int</span> V)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i, j;  </span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));  <span class="comment">//初始化为0  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= V; i++)       <span class="comment">//此步骤是解决是否恰好满足背包容量，  </span></span><br><span class="line">        f[i] = MIN;                <span class="comment">// 若“恰好”满足背包容量，即正好装满背包，则加上此步骤; 若不需要“恰好”，则初始化为0  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; i++)  </span><br><span class="line">        <span class="keyword">for</span> (j = V; j &gt;= C[i]; j--)    <span class="comment">//注意此处与解法一是顺序不同的，弄清原因  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            f[j] = (f[j]&gt;f[j - C[i]] + W[i]) ? f[j] : (f[j - C[i]] + W[i]);  </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"f["</span> &lt;&lt; i &lt;&lt; <span class="string">"]["</span> &lt;&lt; j &lt;&lt; <span class="string">"]="</span> &lt;&lt; f[j] &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> f[V];  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> W[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span> &#125;;      <span class="comment">//物品权重  </span></span><br><span class="line">    <span class="keyword">int</span> C[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;      <span class="comment">//物品大小  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> result = Package(W, C, N, V);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (result &gt; <span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"the opt value:"</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"can not find the opt value"</span> &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">// 可能不存在正好装满背包的解  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在求最优解的背包问题中，一般有两种不同的问法：</p><p>1.要求“恰好装满背包”时的最优解：<br>在初始化时除了 f[0] 为 0其它f[1..V]均设为 -∞，这样就可以保证最终得到的f[N]是一种恰好装满背包的最优解。如果不能恰好满足背包容量，即不能得到 f[V] 的最优值，则此时 f[V] =-∞，这样就能表示没有找到恰好满足背包容量的最优值。</p><p>2.求小于等于背包容量的最优解，即不一定恰好装满背包：<br>如果并没有要求必须把背包装满，而是只希望价值尽量大，初始化时应该将f[0..V]全部设为0。<br><br></p><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/images/ads/greedy/ex1.png" alt="ex1"></p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/zwpf1994/article/details/79083972" target="_blank" rel="noopener">https://blog.csdn.net/zwpf1994/article/details/79083972</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Greedy algorithm works only if the local optimum is equal to the global optimum.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;活动选择问题&quot;&gt;&lt;a href=&quot;#活动选择问题&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】NP Completeness</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/np_completeness/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/np_completeness/</id>
    <published>2020-01-26T13:53:29.000Z</published>
    <updated>2020-01-26T14:27:04.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><ol><li><p>P问题是指：用确定图灵机可以在多项式时间内解决的问题。一个问题可以找到一个能在多项式的时间里解决它的算法。也就是复杂度为O(1),O(log(n)),O(n^a)等的。</p></li><li><p>NP问题：用非确定图灵机可以在多项式时间内解决。可以在多项式的时间里验证一个解的问题（注意，NP问题不是非P问题！！！）。所以比如最短路问题、TSP旅行商问题，一个解出来了（一条路径出来了），那么我验证这个解（计算这条路径的长度）可以在O(n)的复杂度里解决，所以是NP问题。</p></li><li><p>NPC（NP Complete，NP完全）问题满足：首先，它得是一个NP问题；然后，所有的NP问题都可以约化到它。证明一个问题是NPC问题也很简单。先证明它至少是一个NP问题，再证明其中一个已知的NPC问题能约化到它（由约化的传递性）。第一个NPC问题是逻辑电路问题（给定一个逻辑电路，问是否存在一种输入使输出为True），并且可以证明所有NP问题都能约化到它（证明过程复杂）。Hamilton 回路、TSP问题、SAT问题（判断一组给定的布林函数，是否可以找到一组变数赋值能使其为真）是NPC问题。</p></li><li><p>NP Hard问题满足NPC问题定义的第二条但不一定要满足第一条（即所有NP问题都可以约化到它，但它不一定是NP问题），所以NP Hard问题包含了NPC问题。<br>若A为NP-Hard，A可以规约到B，则B为NP-Hard</p></li></ol><p>所以P问题一定是NP问题，NPC问题也一定是NP问题，NPC问题也一定是NP Hard问题，但NP Hard问题不一定是NP问题。</p><p>$L \in P \Rightarrow \bar L \in P$<br>$L \in NP \Rightarrow \bar L \in co$-$NP$</p> <img src="/images/ads/npc/weien.png" width=50%><h2 id="NP-complete"><a href="#NP-complete" class="headerlink" title="NP-complete:"></a>NP-complete:</h2> <img src="/images/ads/npc/npc.png" width=40%><br><hr><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises:"></a>Exercises:</h2><p><img src="/images/ads/npc/ex1.png" alt="ex1"></p><p><img src="/images/ads/npc/ex2.png" alt="ex2"></p><p>NP + NP-hand -&gt; NP-complete</p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.matrix67.com/blog/archives/105" target="_blank" rel="noopener">http://www.matrix67.com/blog/archives/105</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;P问题是指：用确定图灵机可以在多项式时间内解决的问题。一个
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Time Complexity</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/time_complexity/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/time_complexity/</id>
    <published>2020-01-26T13:48:59.000Z</published>
    <updated>2020-01-26T13:49:53.098Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Time Complexity</th><th>BST</th><th>AVL</th><th>Splay</th><th>RB-tree</th><th>B+ tree(M)</th></tr></thead><tbody><tr><td>Search</td><td>O(n)</td><td>O(logn)</td><td>O(logn)</td><td>O(logn)</td><td>$O(log_{M/2}n)$</td></tr><tr><td>Insert</td><td>O(n)</td><td>O(logn)</td><td>O(logn)</td><td>O(logn)</td><td>$O(\frac{M}{logM}logn)$</td></tr><tr><td>Delete</td><td>O(n)</td><td>O(logn)</td><td>O(logn)</td><td>O(logn)</td><td>$O(\frac{M}{logM}logn)$</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time Complexity&lt;/th&gt;
&lt;th&gt;BST&lt;/th&gt;
&lt;th&gt;AVL&lt;/th&gt;
&lt;th&gt;Splay&lt;/th&gt;
&lt;th&gt;RB-tree&lt;/th&gt;
&lt;th&gt;B+ tree(M)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Approximation</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/approximation/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/approximation/</id>
    <published>2020-01-26T13:46:07.000Z</published>
    <updated>2020-01-26T14:28:07.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Approximation-ratio"><a href="#Approximation-ratio" class="headerlink" title="Approximation ratio"></a>Approximation ratio</h2><p>【Definition】 An algorithm has an <strong>approximation ratio</strong> of  $\rho​$(n) if, for any input of size n, the cost C of the solution produced by the algorithm is within a factor of $\rho​$ (n) of the cost C* of an optimal solution:  $max( \frac{C}{C^*}, \frac{C^*}{C}) \leq \rho(n)​$ </p><p>If an algorithm achieves an approximation ratio of $\rho​$(n), we call it a <strong>$\rho​$(n)-approximation algorithm</strong>.</p><p>【Definition】 An <strong>approximation scheme</strong> for an optimization problem is an approximation algorithm that takes as input not only an instance of the problem, but also a value $\epsilon​$ &gt; 0 such that for any fixed $\epsilon​$, the scheme is a <strong>(1+ $\epsilon​$)-approximation algorithm</strong>.<br>We say that an approximation scheme is a <strong>polynomial-time approximation scheme (PTAS)</strong> if for any fixed $\epsilon​$ &gt; 0, the scheme runs in time polynomial in the size n of its input instance.<br>eg. $O((1/ \epsilon)^2 n^3)​$ –&gt; FPTAS (fully …) ,  $O(n^{\epsilon/2})​$, …<br><br></p><h2 id="Approximate-Bin-Packing"><a href="#Approximate-Bin-Packing" class="headerlink" title="Approximate Bin Packing"></a>Approximate Bin Packing</h2><h3 id="Online-Algorithms"><a href="#Online-Algorithms" class="headerlink" title="Online Algorithms"></a>Online Algorithms</h3><h4 id="next-fit"><a href="#next-fit" class="headerlink" title="next fit"></a>next fit</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NextFit</span> <span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;   read item1;</span><br><span class="line">    <span class="keyword">while</span> ( read item2 ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( item2 can be packed in the same bin as item1 )</span><br><span class="line">place item2 in the bin;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">create a <span class="keyword">new</span> bin <span class="keyword">for</span> item2;</span><br><span class="line">        item1 = item2;</span><br><span class="line">    &#125; <span class="comment">/* end-while */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let M be the optimal number of bins required to pack a list I of items.  Then next fit never uses more than 2M – 1 bins.  There exist sequences such that next fit uses 2M  – 1 bins.</p><h4 id="first-fit"><a href="#first-fit" class="headerlink" title="first fit"></a>first fit</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FirstFit</span> <span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">while</span> ( read item ) &#123;</span><br><span class="line">        scan <span class="keyword">for</span> the first bin that is large enough <span class="keyword">for</span> item;</span><br><span class="line">        <span class="keyword">if</span> ( found )</span><br><span class="line">place item in that bin;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">create a <span class="keyword">new</span> bin <span class="keyword">for</span> item;</span><br><span class="line">    &#125; <span class="comment">/* end-while */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let M be the optimal number of bins required to pack a list I of items.  Then first fit never uses more than 17M / 10 bins.  There exist sequences such that first fit uses 17(M – 1) / 10 bins.</p><h4 id="best-fit"><a href="#best-fit" class="headerlink" title="best fit"></a>best fit</h4><br><h3 id="Off-line-Algorithm"><a href="#Off-line-Algorithm" class="headerlink" title="Off-line Algorithm"></a>Off-line Algorithm</h3><h4 id="first-fit-decreasing"><a href="#first-fit-decreasing" class="headerlink" title="first fit decreasing"></a>first fit decreasing</h4><p>Let M be the optimal number of bins required to pack a list I of items.  Then first fit decreasing never uses more than 11M / 9 + 6/9 bins.  There exist sequences such that first fit decreasing uses 11M / 9 + 6/9 bins.</p><h4 id="best-fit-decreasing"><a href="#best-fit-decreasing" class="headerlink" title="best fit decreasing"></a>best fit decreasing</h4><br><hr><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><p><img src="/images/ads/approximation/ex1.png" alt="ex1"></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Approximation-ratio&quot;&gt;&lt;a href=&quot;#Approximation-ratio&quot; class=&quot;headerlink&quot; title=&quot;Approximation ratio&quot;&gt;&lt;/a&gt;Approximation ratio&lt;/h2&gt;&lt;p&gt;【D
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Local Search</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/local_search/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/local_search/</id>
    <published>2020-01-26T13:42:32.000Z</published>
    <updated>2020-01-26T14:27:28.417Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/images/ads/local-search/ex1.png" alt="ex1"><br><img src="/images/ads/local-search/ex2.png" alt="ex2"><br><img src="/images/ads/local-search/ex3.png" alt="ex3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Exercise&quot;&gt;&lt;a href=&quot;#Exercise&quot; class=&quot;headerlink&quot; title=&quot;Exercise&quot;&gt;&lt;/a&gt;Exercise&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/ads/local-search/ex1.pn
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Randomized Algorithm</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/randomized_algorithm/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/randomized_algorithm/</id>
    <published>2020-01-26T13:40:27.000Z</published>
    <updated>2020-01-26T14:27:44.523Z</updated>
    
    <content type="html"><![CDATA[<p>##Hiring problems</p><br><hr><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><p><img src="/images/ads/randomized-algorithm/ex1.png" alt="ex1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Hiring problems&lt;/p&gt;
&lt;br&gt;

&lt;hr&gt;
&lt;h2 id=&quot;Exercises&quot;&gt;&lt;a href=&quot;#Exercises&quot; class=&quot;headerlink&quot; title=&quot;Exercises&quot;&gt;&lt;/a&gt;Exercises&lt;/h2&gt;&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
</feed>
