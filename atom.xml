<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花落知多少</title>
  
  <subtitle>Nice to meet you :)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iris-cyy.github.io/"/>
  <updated>2020-02-02T09:33:32.165Z</updated>
  <id>https://iris-cyy.github.io/</id>
  
  <author>
    <name>Irisssy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>About git</title>
    <link href="https://iris-cyy.github.io//Tricks/2020-02-02/git/"/>
    <id>https://iris-cyy.github.io//Tricks/2020-02-02/git/</id>
    <published>2020-02-02T09:24:16.000Z</published>
    <updated>2020-02-02T09:33:32.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用git来上传文件"><a href="#使用git来上传文件" class="headerlink" title="使用git来上传文件"></a>使用git来上传文件</h2><ol><li><p>在github上create reposity</p></li><li><p>建立本地仓库</p><p>在本地项目根目录下，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>会发现目录中含有了一个<code>.git</code>文件夹</p></li><li><p>将本地仓库与github远程仓库进行关联</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/... （reposity的链接）</span><br></pre></td></tr></table></figure></li><li><p>同步reposity中已有的文件到本地（例如README）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure></li><li><p>添加文件到仓库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure><p>如果使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>则会当前目录下的所有文件添加到仓库中</p></li><li><p>将add的文件提交到仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "upload" （""中可以是自定义的注释语句）</span><br></pre></td></tr></table></figure></li><li><p>上传代码到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用git来上传文件&quot;&gt;&lt;a href=&quot;#使用git来上传文件&quot; class=&quot;headerlink&quot; title=&quot;使用git来上传文件&quot;&gt;&lt;/a&gt;使用git来上传文件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在github上create reposity&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Tricks" scheme="https://iris-cyy.github.io/categories/Tricks/"/>
    
    
      <category term="Tricks" scheme="https://iris-cyy.github.io/tags/Tricks/"/>
    
      <category term="git" scheme="https://iris-cyy.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java Maze</title>
    <link href="https://iris-cyy.github.io//Projects/2020-02-02/java_maze/"/>
    <id>https://iris-cyy.github.io//Projects/2020-02-02/java_maze/</id>
    <published>2020-02-02T08:54:23.000Z</published>
    <updated>2020-02-02T09:19:40.278Z</updated>
    
    <content type="html"><![CDATA[<p>本次开发的是一个基于Socket编程、GUI编程、多线程编程等技术的网络程序，实现的是两个玩家联机比赛走迷宫的功能。</p><h2 id="设计说明"><a href="#设计说明" class="headerlink" title="设计说明"></a>设计说明</h2><p>本程序采用Java程序设计语言，在Eclipse平台下编辑、编译与调试。通过Socket编程技术实现客户端之间、客户端与服务器之间的通信，通过GUI编程技术实现窗口显示，通过多线程技术实现多用户同时使用。</p><p>具体实现的功能如下：</p><ol><li><p>使用基本的Client-Server模型。用户使用Client端进行连接时，将会跳出弹窗提示输入服务器的IP地址和自定义的用户名与Server端连接。如果服务器未开启，将跳出错误提示。</p></li><li><p>当两个用户都完成连接之后，显示完整地图，比赛开始。角色将出现在地图右上角，游戏的终点在地图左下角。窗口的左边显示自己的地图，右边显示对方的游戏状态。</p></li><li><p>用户可以通过方向键控制角色移动，角色不能穿越障碍物。</p></li><li><p>比赛过程中可以看到对方的当前位置、移动信息、比赛进度等。</p></li><li><p>当有一方先到达终点，比赛结束。胜负方可以看到各自的胜负信息。</p></li></ol><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h3 id="功能模块设计"><a href="#功能模块设计" class="headerlink" title="功能模块设计"></a>功能模块设计</h3><p>本程序需实现的主要功能有：</p><ol><li><p>使用Socket进行通信，</p></li><li><p>根据从bib中提取得到的文献元数据链接，访问网页并获取详细信息</p></li><li><p>从元数据链接中访问PDF下载链接，下载指定文献的PDF文档</p></li><li><p>根据文献详细信息的各字段建立索引</p></li><li><p>建立搜索引擎，根据用户输入的字段类别和关键字，搜索相关信息</p></li></ol><p>程序的总体功能如图1所示：</p><p> <img src="/images/projects/java-maze/clip_image002.gif" alt="img"></p><center> 图1 总体功能图 </center><h3 id="流程图设计"><a href="#流程图设计" class="headerlink" title="流程图设计"></a>流程图设计</h3><p>程序总体流程如图2所示：</p><p><img src="/images/projects/java-maze/clip_image004.gif" alt="img"></p><center> 图2 总体流程图 </center><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h3 id="GUI图形显示"><a href="#GUI图形显示" class="headerlink" title="GUI图形显示"></a>GUI图形显示</h3><p>在本项目中，使用java的图形界面组件来实现地图和角色的显示、角色位置的刷新以及弹窗的显示。要注意的是，在JFrame组件的显示时，在相同位置上进行组件叠加时，只能够显示添加的第一个组件，这给角色的位置刷新带来一定难度和格式限制。</p><p>其具体实现如下所示：</p><p>地图的显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">"test"</span>);  </span><br><span class="line"><span class="keyword">static</span> JPanel mainScreen=<span class="keyword">new</span> JPanel();  </span><br><span class="line"><span class="keyword">static</span> JLabel player, map_label, bound, map2, player2;  </span><br><span class="line">      </span><br><span class="line"><span class="keyword">static</span> ImageIcon player_img = <span class="keyword">new</span> ImageIcon(<span class="string">"img\\player.gif"</span>);  </span><br><span class="line"><span class="keyword">static</span> ImageIcon map_img = <span class="keyword">new</span> ImageIcon(<span class="string">"img\\map.png"</span>);  </span><br><span class="line"><span class="keyword">static</span> ImageIcon bound_img = <span class="keyword">new</span> ImageIcon(<span class="string">"img\\bound.png"</span>);  </span><br><span class="line">  </span><br><span class="line">frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,GAME_WIDTH, GAME_HEIGHT);  </span><br><span class="line">mainScreen.setLayout(<span class="keyword">null</span>);  </span><br><span class="line">map_label = <span class="keyword">new</span> JLabel();  </span><br><span class="line">map_label.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>);  </span><br><span class="line">setIcon(map_img, map_label);  </span><br><span class="line">mainScreen.add(map_label);  </span><br><span class="line">bound = <span class="keyword">new</span> JLabel();  </span><br><span class="line">bound.setBounds(<span class="number">800</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">800</span>);  </span><br><span class="line">setIcon(bound_img, bound);  </span><br><span class="line">mainScreen.add(bound);  </span><br><span class="line">  </span><br><span class="line">frame.add(mainScreen);  </span><br><span class="line">frame.setVisible(<span class="keyword">true</span>);  </span><br><span class="line">frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);</span><br></pre></td></tr></table></figure><p>角色位置的刷新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">player = <span class="keyword">new</span> JLabel();  </span><br><span class="line">player.setBounds(player_posi*<span class="number">40</span>, player_posj*<span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>);  </span><br><span class="line">setIcon(player_img, player);  </span><br><span class="line">mainScreen.add(player);  </span><br><span class="line">  </span><br><span class="line">player.setLocation(posi*<span class="number">40</span>, posj*<span class="number">40</span>);  </span><br><span class="line">setIcon(player_img, player);  </span><br><span class="line">mainScreen.remove(map_label);  </span><br><span class="line">mainScreen.add(map_label);</span><br></pre></td></tr></table></figure><p>弹窗显示：</p><p>在本次项目中，使用弹窗来输入连接的IP和用户名信息，并在游戏结束之后使用弹窗来提示游戏结果。实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showMessageDialog(frame, <span class="string">"YOU WIN!!"</span>, <span class="string">"Message"</span>, JOptionPane.INFORMATION_MESSAGE);  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span></span>&#123;  </span><br><span class="line">    Button b = <span class="keyword">new</span> Button(<span class="string">"connect to server"</span>);  </span><br><span class="line">    TextField serverIP = <span class="keyword">new</span> TextField(<span class="string">"127.0.0.1"</span>, <span class="number">15</span>);<span class="comment">//服务器的IP地址  </span></span><br><span class="line">    TextField userName = <span class="keyword">new</span> TextField(<span class="string">""</span>, <span class="number">8</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConDialog</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(Client.<span class="keyword">this</span>, <span class="keyword">true</span>);  </span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> FlowLayout());  </span><br><span class="line">        <span class="keyword">this</span>.add(<span class="keyword">new</span> Label(<span class="string">"server IP:"</span>));  </span><br><span class="line">        <span class="keyword">this</span>.add(serverIP);  </span><br><span class="line">        <span class="keyword">this</span>.add(<span class="keyword">new</span> Label(<span class="string">"user name:"</span>));  </span><br><span class="line">        <span class="keyword">this</span>.add(userName);  </span><br><span class="line">        <span class="keyword">this</span>.add(b);  </span><br><span class="line">        <span class="keyword">this</span>.setLocation(<span class="number">500</span>, <span class="number">400</span>);  </span><br><span class="line">        <span class="keyword">this</span>.pack();  </span><br><span class="line">        <span class="keyword">this</span>.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;  </span><br><span class="line">                setVisible(<span class="keyword">false</span>);  </span><br><span class="line">                System.exit(<span class="number">0</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </span><br><span class="line">                String IP = serverIP.getText().trim();  </span><br><span class="line">                nc.connect(IP);  </span><br><span class="line">                setVisible(<span class="keyword">false</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="游戏逻辑"><a href="#游戏逻辑" class="headerlink" title="游戏逻辑"></a>游戏逻辑</h3><p>实现迷宫的游戏逻辑较为简单，将地图信息使用二维数组进行存储。在角色进行移动时，读取角色下一个位置的地图信息，如果存在障碍物，将无法通过，否则将能够继续通过。在角色进行移动之后，在窗口中刷新角色位置。如果先于对方角色移动到终点，则获胜，游戏结束。</p><h3 id="Socket连接"><a href="#Socket连接" class="headerlink" title="Socket连接"></a>Socket连接</h3><p>网络相关的模块分成两部分，一部分是连接，另一部分是通信。</p><p>连接部分，客户端填写要连接的IP地址，作为TCP报文段中的字段，然后通过TCP连接上服务器, 并把自己的UDP端口号发送给服务器。服务器通过TCP和客户端连上后收到客户端的UDP端口号信息, 并将客户端的IP地址和UDP端口号封装成一个Client对象, 保存在容器中。</p><p>因为服务器收到链路层帧后会提取出网络层数据报, 源地址的IP地址在IP数据报的首部字段中, Java对这一提取过程进行了封装, 所以我们能够直接在Java的api中获取源地址的IP。</p><p>服务器封装完Client对象后, 为客户端的主机分配一个id号, 这个id号将用于往后游戏的网络传输中进行标识。</p><p>同时服务器也会把自己的UDP端口号发送客户端, 因为服务器自身会开启一条UDP线程, 用于接收转发UDP包。</p><p>客户端收到坦克id后设置到自己的主战坦克的id字段中. 并保存服务器的UDP端口号。</p><p>这部分的实现方式如下：</p><p>客户端部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String ip)</span></span>&#123;  </span><br><span class="line">    serverIP = ip;  </span><br><span class="line">    Socket s = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        ds = <span class="keyword">new</span> DatagramSocket(UDP_PORT);<span class="comment">//创建UDP套接字  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            s = <span class="keyword">new</span> Socket(ip, Server.TCP_PORT);<span class="comment">//创建TCP套接字  </span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e1)&#123;  </span><br><span class="line">            client.getServerNotStartDialog().setVisible(<span class="keyword">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(s.getOutputStream());  </span><br><span class="line">        dos.writeInt(UDP_PORT);<span class="comment">//向服务器发送自己的UDP端口号  </span></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();<span class="comment">//获得自己的id号  </span></span><br><span class="line">        <span class="keyword">this</span>.serverUDPPort = dis.readInt();<span class="comment">//获得服务器转发客户端消息的UDP端口号  </span></span><br><span class="line">        client.getMe().setId(id);<span class="comment">//设置坦克的id号  </span></span><br><span class="line">        System.out.println(<span class="string">"connect to server successfully..."</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            <span class="keyword">if</span>(s != <span class="keyword">null</span>) s.close();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPThread()).start();<span class="comment">//开启客户端UDP线程, 向服务器发送或接收游戏数据</span></span><br><span class="line">  </span><br><span class="line">    connectMsg msg = <span class="keyword">new</span> connectMsg(client.getMe());  </span><br><span class="line">    send(msg);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPThread()).start();  </span><br><span class="line">    ServerSocket ss = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        ss = <span class="keyword">new</span> ServerSocket(TCP_PORT);<span class="comment">//在TCP欢迎套接字上监听客户端连接  </span></span><br><span class="line">       System.out.println(<span class="string">"Server has started..."</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">        Socket s = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            s = ss.accept();<span class="comment">//给客户但分配专属TCP套接字  </span></span><br><span class="line">            System.out.println(<span class="string">"A client has connected..."</span>);  </span><br><span class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());  </span><br><span class="line">            <span class="keyword">int</span> UDP_PORT = dis.readInt();<span class="comment">//记录客户端UDP端口  </span></span><br><span class="line">            Client client = <span class="keyword">new</span> Client(s.getInetAddress().getHostAddress(), UDP_PORT, ID);<span class="comment">//创建Client对象  </span></span><br><span class="line">            clients.add(client);<span class="comment">//添加进客户端容器  </span></span><br><span class="line">  </span><br><span class="line">            DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(s.getOutputStream());  </span><br><span class="line">            dos.writeInt(ID++);<span class="comment">//向客户端分配id号  </span></span><br><span class="line">            dos.writeInt(Server.UDP_PORT);<span class="comment">//告诉客户端自己的UDP端口号  </span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span>(s != <span class="keyword">null</span>) s.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h3><p>Socket通信通过自定义应用层的协议实现，每个应用层协议有消息类型和消息数据两个部分组成，不同的协议数据格式不同。</p><p>在本项目中，总共有四种传递协议，分别对应游戏逻辑中的连接、移动、获胜（其中连接部分需要两个协议，新加入的玩家通知已存在的玩家，已存在的玩家给新玩家提供响应，从而分别在两者的地图上添加对方的信息）。</p><p>在本项目中，设计Msg接口，定义应用层协议的格式，每个协议在此基础上定义具体的实现类，通过多态进行实现。</p><p>Msg接口的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Msg</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECT_MSG = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVE_MSG = <span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WIN_MSG = <span class="number">3</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECT_TO_ORI_MSG = <span class="number">4</span>;  </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接部分的协议，新用户发送的连接信息用connectMSG类进行实现，消息数据包含用户id、用户名字段。在新用户连接成功后进行发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span></span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"connect_msg_sent"</span>);  </span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">88</span>);  </span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        dos.writeInt(msgType);  </span><br><span class="line">        dos.writeInt(me.getId());  </span><br><span class="line">        dos.writeUTF(me.getName());  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">byte</span>[] buf = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">new</span> InetSocketAddress(IP, UDP_Port));  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();  </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">this</span>.client.getMe().getId())&#123;  </span><br><span class="line">           <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"connect_msg_received"</span>);  </span><br><span class="line">        String Name = dis.readUTF();  </span><br><span class="line">        client.getMe().generatePlayer2(<span class="number">18</span>, <span class="number">1</span>);  </span><br><span class="line">        connectToOriMsg msg = <span class="keyword">new</span> connectToOriMsg(client.getMe());  </span><br><span class="line">        client.getNc().send(msg);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已有用户的响应信息用connectToOriMsg进行实现，协议格式实现方式与connectMsg类似，包含用户id和用户名两个字段，在已有用户收到新用户的连接信息之后发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span></span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"connect_ori_sent"</span>);  </span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">88</span>);  </span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        dos.writeInt(msgType);  </span><br><span class="line">        dos.writeInt(me.getId());  </span><br><span class="line">        dos.writeUTF(me.getName());    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">byte</span>[] buf = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">new</span> InetSocketAddress(IP, UDP_Port));  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();  </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">this</span>.client.getMe().getId())&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        String Name = dis.readUTF();  </span><br><span class="line">            System.out.println(<span class="string">"connect_ori_received"</span>);  </span><br><span class="line">            client.getMe().generatePlayer2(<span class="number">18</span>, <span class="number">1</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移动的信息通过MoveMsg协议进行传输，每个用户在操纵角色进行移动之后，要像对手发送信息报告角色的新位置，并在对方的地图上刷新角色位置。该协议数据包含用户id、角色新位置的水平、垂直坐标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span> </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"["</span>+id+<span class="string">"]"</span>+<span class="string">"move_msg_sent: "</span>+posi+ <span class="string">" "</span> + posj);  </span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">30</span>);  </span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        dos.writeInt(msgType);  </span><br><span class="line">        dos.writeInt(id);  </span><br><span class="line">        dos.writeInt(posi);  </span><br><span class="line">        dos.writeInt(posj);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">byte</span>[] buf = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">new</span> InetSocketAddress(IP, UDP_Port));  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();  </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">this</span>.client.getMe().getId())&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">int</span> posi = dis.readInt();  </span><br><span class="line">        <span class="keyword">int</span> posj = dis.readInt();  </span><br><span class="line">        System.out.println(<span class="string">"["</span>+id+<span class="string">"]"</span>+<span class="string">"move_msg_received: "</span>+posi+<span class="string">" "</span>+posj);  </span><br><span class="line">        client.getMe().reGeneratePlayer2(posi, posj);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递获胜信息的协议在WinMsg中定义。当一方角色移动到终点时，发送获胜信息，并在当前窗口中弹窗提示获胜。另一方的客户端接收到对方的获胜信息后，弹窗提示失败信息。游戏结束。该协议中的数据仅包含获胜者的用户id。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span> </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"move_win_sent"</span>);  </span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">88</span>);  </span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        dos.writeInt(msgType);  </span><br><span class="line">        dos.writeInt(id);    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">byte</span>[] buf = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">new</span> InetSocketAddress(IP, UDP_Port));  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();  </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">this</span>.client.getMe().getId())&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"win_msg_received"</span>);  </span><br><span class="line">        client.getMe().lose();  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试与运行"><a href="#测试与运行" class="headerlink" title="测试与运行"></a>测试与运行</h2><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><p>在程序代码基本完成后，经过不断的调试与修改，能够完成上述功能。</p><p>运行客户端会跳出连接提示输入服务器IP和用户名进行连接：</p><p><img src="/images/projects/java-maze/clip_image006.gif" alt="img"></p><p>连接成功后客户端和服务器的命令行提示如下所示：</p><p>客户端1：</p><p><img src="/images/projects/java-maze/clip_image008.gif" alt="img"></p><p>客户端2：</p><p><img src="/images/projects/java-maze/clip_image010.gif" alt="img"></p><p>服务器：</p><p><img src="/images/projects/java-maze/clip_image012.gif" alt="img"></p><p>服务器端可视化情况如下：</p><p><img src="/images/projects/java-maze/clip_image014.gif" alt="img"></p><h3 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h3><p>游戏过程的测试如下所示：</p><p>如果服务器未开启将提示连接错误：</p><p><img src="/images/projects/java-maze/clip_image016.gif" alt="img"></p><p>连接成功后将等待另一个用户连接，此时的游戏界面如下：</p><p><img src="/images/projects/java-maze/clip_image018.gif" alt="img"></p><p>左边是自己的地图，在对方用户连接成功后，将在右边显示对方的游戏界面，游戏开始的初始状态如下所示：</p><p><img src="/images/projects/java-maze/clip_image020.gif" alt="img"></p><p>游戏进行一段时间后，左边是自己的游戏状态，右边是对方的游戏状态：</p><p><img src="/images/projects/java-maze/clip_image022.gif" alt="img"></p><p>率先到达终点的用户将获得获胜提示：</p><p><img src="/images/projects/java-maze/clip_image024.gif" alt="img"></p><p>与此同时在对方的游戏界面将提示失败信息：</p><p><img src="/images/projects/java-maze/clip_image026.gif" alt="img"></p><p><br></p><hr><p>完整代码见<a href="https://github.com/Iris-cyy/Java-Maze/" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本次开发的是一个基于Socket编程、GUI编程、多线程编程等技术的网络程序，实现的是两个玩家联机比赛走迷宫的功能。&lt;/p&gt;
&lt;h2 id=&quot;设计说明&quot;&gt;&lt;a href=&quot;#设计说明&quot; class=&quot;headerlink&quot; title=&quot;设计说明&quot;&gt;&lt;/a&gt;设计说明&lt;/h2
      
    
    </summary>
    
      <category term="Projects" scheme="https://iris-cyy.github.io/categories/Projects/"/>
    
    
      <category term="Projects" scheme="https://iris-cyy.github.io/tags/Projects/"/>
    
      <category term="JAVA" scheme="https://iris-cyy.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java Crawler</title>
    <link href="https://iris-cyy.github.io//Projects/2020-02-02/java_crawler/"/>
    <id>https://iris-cyy.github.io//Projects/2020-02-02/java_crawler/</id>
    <published>2020-02-02T08:23:06.000Z</published>
    <updated>2020-02-02T08:52:34.653Z</updated>
    
    <content type="html"><![CDATA[<p>本次开发的是一个学术搜索引擎，可以根据关键词从数据库中搜索相关内容，实现搜索引擎的基本功能。本程序采用Java程序设计语言，在Eclipse平台下编辑、编译与调试。通过爬虫技术获得来源于ACL学术网站<a href="https://www.aclweb.org/anthology/" target="_blank" rel="noopener">https://www.aclweb.org/anthology/</a>的相关文献信息，基于此建立搜索引擎。</p><p>这个搜索引擎项目中用到了Jsoup爬虫、Lucene搜索引擎等技术，也综合了Java的文件读入输出、异常判断、jar包的引用等等。由于整个项目所需要用到的数据集较大，总共有53745篇文献，每一篇都要从bib中读取信息、访问对应url，并下载其中500篇PDF，工作量浩大，整个数据集的获取所需的时间非常长。在整个爬取过程中遇到了很多异常，例如，刚开始爬取的时候，常常会遇到连接超时或者读取超时的问题导致程序终止；在访问的过程中发现bib文件所提供的url链接有多种格式，有一些是网页，而另一些是PDF链接。在查找了资料之后，逐一解决了这些问题。编写代码延长判定“timeout”的时长，并让访问失败时尝试再次访问而不会直接退出并终止。同时在终止程序时输出终止的位置（已访问的数量），下一次可以手动设置爬取的起点，不用每次都从头开始。</p><h2 id="设计说明"><a href="#设计说明" class="headerlink" title="设计说明"></a>设计说明</h2><p>具体实现的功能如下：</p><ol><li><p>解析包含53745篇文献基本信息的BibText格式文件，得到文献结构化信息，如标题、作者等。</p></li><li><p>根据BibText中所给的URL链接，访问文献元数据网页，使用Jsoup工具抓取摘要等其它在BibText中未包含的信息</p></li><li><p>从文献元数据网页上访问下载PDF文件的链接，并下载PDF文件</p></li><li><p>利用Lucene为扩充后的详细信息中各字段建立索引</p></li><li><p>建立搜索引擎，用户通过命令行进行交互，根据提示输入要检索的字段以及关键词，获得相关程度排序最高的5篇文献，将这5篇文献的标题、作者、网页链接依次输出在命令行。</p></li></ol><p>项目中使用的jar包如下所示：</p><blockquote><p>IKAnalyzer2012_FF.jar<br>jsoup-1.12.1.jar<br>lucene-core-4.10.0.jar<br>lucene-queries-4.10.0.jar<br>lucene-queryparser-4.10.0.jar</p></blockquote><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h3 id="功能模块设计"><a href="#功能模块设计" class="headerlink" title="功能模块设计"></a>功能模块设计</h3><p>本程序需实现的主要功能有：</p><ol><li><p>解析bib文件，提取标题、作者等基本信息</p></li><li><p>根据从bib中提取得到的文献元数据链接，访问网页并获取详细信息</p></li><li><p>从元数据链接中访问PDF下载链接，下载指定文献的PDF文档</p></li><li><p>根据文献详细信息的各字段建立索引</p></li><li><p>建立搜索引擎，根据用户输入的字段类别和关键字，搜索相关信息</p></li></ol><p>程序的总体功能如图1所示：</p><p><img src="/images/projects/java-crawler/image-20200202162837279.png" width=95%></p><center> 图1 总体功能图 </center><h3 id="流程图设计"><a href="#流程图设计" class="headerlink" title="流程图设计"></a>流程图设计</h3><p>程序总体流程如图2所示：</p><p><img src="/images/projects/java-crawler/image-20200202162928108.png" width=60%></p><center> 图2 总体流程图 </center><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h3 id="BibText解析"><a href="#BibText解析" class="headerlink" title="BibText解析"></a>BibText解析</h3><p>在anthology.bib文件中，汇总了53745篇文献的基本信息，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@inproceedings&#123;sanacore-etal-2019-semantic,</span><br><span class="line">    title &#x3D; &quot;Semantic descriptions of &#123;F&#125;rench derivational relations in a families-and-paradigms framework&quot;,</span><br><span class="line">    author &#x3D; &quot;Sanacore, Daniele  and</span><br><span class="line">      Hathout, Nabil  and</span><br><span class="line">      Namer, Fiammetta&quot;,</span><br><span class="line">    booktitle &#x3D; &quot;Proceedings of the Second International Workshop on Resources and Tools for Derivational Morphology&quot;,</span><br><span class="line">    month &#x3D; &quot;19--20 &quot; # sep,</span><br><span class="line">    year &#x3D; &quot;2019&quot;,</span><br><span class="line">    address &#x3D; &quot;Prague, Czechia&quot;,</span><br><span class="line">    publisher &#x3D; &quot;Charles University, Faculty of Mathematics and Physics, Institute of Formal and Applied Linguistics&quot;,</span><br><span class="line">    url &#x3D; &quot;https:&#x2F;&#x2F;www.aclweb.org&#x2F;anthology&#x2F;W19-8503&quot;,</span><br><span class="line">    pages &#x3D; &quot;15--24&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据格式进行读取，具体方法如下：</p><ol><li><p>若读入行的第一个字符为“@”，表示一个新的文献开始</p></li><li><p>若读入行的第一个字符为“}”，表示一个文献结束</p></li><li><p>在bib中的信息中，只需要获取并存储title, author, url字段的内容。因为除了title和author之外的信息，都在网页中得到显示，并且存储格式一致，直接从网页中爬取较为方便。其中需要注意的是，一篇文章可能有多个作者，多作者的信息在bib文件中分行存储。在进行读取时，将分行的信息合并为同一个字段内容进行存储。</p></li></ol><h3 id="Jsoup爬虫"><a href="#Jsoup爬虫" class="headerlink" title="Jsoup爬虫"></a>Jsoup爬虫</h3><p>根据从bib文件中获取的url信息，访问文献所在链接，并利用Jsoup工具对页面进行解析。</p><p>需要注意的是，bib中的url信息分为两部分，一部分为网页的元数据链接，另一部分为以“<a href="http://doi.org/”开头的PDF下载链接。对于前一部分url，使用Jsoup工具访问链接之后爬取信息；而对于后一部分url，链接指提供下载功能，因此直接使用bib中信息建立索引，若在下载范围内，则访问链接进行下载。" target="_blank" rel="noopener">http://doi.org/”开头的PDF下载链接。对于前一部分url，使用Jsoup工具访问链接之后爬取信息；而对于后一部分url，链接指提供下载功能，因此直接使用bib中信息建立索引，若在下载范围内，则访问链接进行下载。</a></p><p>考虑到可能会存在连接超时导致访问失败的问题，在代码中进行解决。思路是，如果访问失败，将停顿1s之后再次尝试访问。如果对该链接访问失败次数达到20次，说明可能是网络存在问题，将输出异常信息，并输出当前正在进行爬取的链接的编号（1-53745），方便下一次继续爬取（下一次只需要从当前出错的位置开始继续爬取即可，不必从头开始）。</p><p>这部分的实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;  </span><br><span class="line">   <span class="keyword">try</span> &#123;  </span><br><span class="line">      <span class="comment">//获取文献链接页面的内容  </span></span><br><span class="line">      document = Jsoup.connect(url).get();  </span><br><span class="line">      errnum = <span class="number">0</span>;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">      <span class="comment">//如果连接出错次数少于20次，停顿1s之后再次尝试连接  </span></span><br><span class="line">      <span class="comment">//若多于20次，抛出异常信息并终止运行  </span></span><br><span class="line">      <span class="keyword">if</span>(errnum &lt; <span class="number">20</span>) &#123;  </span><br><span class="line">          errnum++;  </span><br><span class="line">          Thread.sleep(<span class="number">1000</span>);  </span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">          System.out.println(<span class="string">"Current cnt = "</span> + cnt);  </span><br><span class="line">          e.printStackTrace();  </span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成对网页的解析之后，继续使用Jsoup工具访问网页中存储了相关信息的部分，获得需要的内容。</p><p>观察网页源代码结构，示例如下：</p><p><img src="/images/projects/java-crawler/image-20200202163506263.png" width=70%></p><p>含有摘要的文献，结构如下：</p><p><img src="/images/projects/java-crawler/image-20200202163536099.png" alt="image-20200202163536099"></p><p>根据此结构，可以编写代码访问并获取相关内容。</p><p>使用String类型变量infot和infov分别存储当前获得的字段属性名与属性值，使用<code>Vector&lt;String&gt;</code>类型变量infoType和infoValue分别存储当前文献拥有的全部字段属性以及与之对应的值。</p><p>该部分的实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择网页中需要的信息所在的位置  </span></span><br><span class="line">content = document.select(<span class="string">".col-lg-10.order-2"</span>);  </span><br><span class="line"><span class="comment">//获取详细信息  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; !content.select(<span class="string">"dt:nth-child("</span> + i + <span class="string">")"</span>).text().trim().equals(<span class="string">""</span>); i+=<span class="number">2</span>)&#123;  </span><br><span class="line">    infot = content.select(<span class="string">"dt:nth-child("</span> + i + <span class="string">")"</span>).text();  </span><br><span class="line">    infov = content.select(<span class="string">"dd:nth-child("</span> + (i+<span class="number">1</span>) + <span class="string">")"</span>).text();  </span><br><span class="line">    infoType.add(infot.substring(<span class="number">0</span>, infot.length()-<span class="number">1</span>).toLowerCase());  </span><br><span class="line">    infoValue.add(infov);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//获取摘要  </span></span><br><span class="line"><span class="keyword">if</span>(content.select(<span class="string">"div &gt; div"</span>).hasText()) &#123;  </span><br><span class="line">    infoType.add(<span class="string">"abstract"</span>);  </span><br><span class="line">    infov = content.select(<span class="string">"div &gt; div"</span>).text().substring(<span class="number">1</span>).trim();  </span><br><span class="line">    infoValue.add(infov);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下载PDF文件"><a href="#下载PDF文件" class="headerlink" title="下载PDF文件"></a>下载PDF文件</h3><p>根据bib中获取的url值可以很容易得到对应pdf文件所在的网页链接。编写Download模块通过输出字节流的方式下载对应pdf文件。</p><p>Download模块的实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">byte</span>[] readInputStream(InputStream inputStream) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];  </span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;  </span><br><span class="line">    ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();  </span><br><span class="line">    <span class="keyword">while</span>((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;  </span><br><span class="line">        bos.write(buffer, <span class="number">0</span>, len);  </span><br><span class="line">    &#125;  </span><br><span class="line">    bos.close();  </span><br><span class="line">    <span class="keyword">return</span> bos.toByteArray();  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">downLoadByUrl</span><span class="params">(String urlStr,String fileName,String savePath)</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">    URL url = <span class="keyword">new</span> URL(urlStr);  </span><br><span class="line">    HttpURLConnection conn = (HttpURLConnection)url.openConnection();  </span><br><span class="line">    conn.setConnectTimeout(<span class="number">5</span>*<span class="number">1000</span>);  </span><br><span class="line">    conn.setRequestProperty(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"</span>);  </span><br><span class="line">    InputStream inputStream = conn.getInputStream();  </span><br><span class="line">    <span class="keyword">byte</span>[] getData = readInputStream(inputStream);  </span><br><span class="line">     </span><br><span class="line">    File saveDir = <span class="keyword">new</span> File(savePath);  </span><br><span class="line">    <span class="keyword">if</span>(!saveDir.exists())&#123;  </span><br><span class="line">        saveDir.mkdir();  </span><br><span class="line">    &#125;  </span><br><span class="line">    File file = <span class="keyword">new</span> File(saveDir+File.separator+fileName);  </span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);  </span><br><span class="line">    fos.write(getData);  </span><br><span class="line">    <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">        fos.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">        inputStream.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>搜索引擎的部分在SearchEngine模块中实现。</p><p>在获取网页链接的同时对每个文献的信息创建索引，然后根据输入的字段名和关键词进行查找，输出相关度最高的十条搜索结果的标题、作者和链接。</p><p>创建索引的部分原理与格式与demo一致，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(String filePath, Essay essay)</span></span>&#123;  </span><br><span class="line">    File f=<span class="keyword">new</span> File(filePath);  </span><br><span class="line">    IndexWriter iwr=<span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        Directory dir=FSDirectory.open(f);  </span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();  </span><br><span class="line">        IndexWriterConfig conf=<span class="keyword">new</span> IndexWriterConfig(Version.LUCENE_4_10_0,analyzer);  </span><br><span class="line">        iwr=<span class="keyword">new</span> IndexWriter(dir,conf);<span class="comment">//建立IndexWriter。固定套路  </span></span><br><span class="line">        Document doc = getDocument(essay.getInfoType(), essay.getInfoValue());  </span><br><span class="line">        iwr.addDocument(doc);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        iwr.close();  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDocument</span><span class="params">(Vector&lt;String&gt; infoType, Vector&lt;String&gt; infoValue)</span></span>&#123;  </span><br><span class="line">    Document doc=<span class="keyword">new</span> Document();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;infoType.size(); i++) &#123;  </span><br><span class="line">        Field f = <span class="keyword">new</span> TextField(infoType.get(i), infoValue.get(i), Field.Store.YES);  </span><br><span class="line">        doc.add(f);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> doc;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索部分实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(String filePath, String queryStr, String queryField)</span></span>&#123;  </span><br><span class="line">    File f=<span class="keyword">new</span> File(filePath);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        IndexSearcher searcher=<span class="keyword">new</span> IndexSearcher(DirectoryReader.open(FSDirectory.open(f)));  </span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();  </span><br><span class="line">        QueryParser parser = <span class="keyword">new</span> QueryParser(Version.LUCENE_4_10_0, queryField, analyzer);  </span><br><span class="line">        Query query=parser.parse(queryStr);  </span><br><span class="line">        TopDocs hits=searcher.search(query,<span class="number">10</span>);  </span><br><span class="line">        <span class="keyword">for</span>(ScoreDoc doc:hits.scoreDocs)&#123;  </span><br><span class="line">            Document d=searcher.doc(doc.doc);  </span><br><span class="line">            System.out.println(<span class="string">"Title: "</span> + d.get(<span class="string">"title"</span>));  </span><br><span class="line">            System.out.println(<span class="string">"Author: "</span> + d.get(<span class="string">"author"</span>));  </span><br><span class="line">            System.out.println(<span class="string">"URL: "</span> + d.get(<span class="string">"url"</span>));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ParseException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试与运行"><a href="#测试与运行" class="headerlink" title="测试与运行"></a>测试与运行</h2><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><p>在程序代码基本完成后，经过不断的调试与修改，能够完成上述功能。由于数据量较大，建立数据库的过程耗费了较多时间。最终完成了数据库的建立、PDF文件的下载、搜索引擎的建立，并对搜索引擎的功能进行了测试。</p><p>从网页链接爬取数据集并建立索引：</p><p><img src="/images/projects/java-crawler/image-20200202164115866.png" width=30%></p><p>下载PDF：</p><p><img src="/images/projects/java-crawler/image-20200202164146367.png" width=33%></p><h3 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h3><p>完成索引的建立之后，测试搜索引擎功能如下：</p><h4 id="Anthology-id"><a href="#Anthology-id" class="headerlink" title="Anthology id"></a>Anthology id</h4><p><img src="/images/projects/java-crawler/image-20200202164253175.png" alt="image-20200202164253175"></p><h4 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h4><p><img src="/images/projects/java-crawler/image-20200202164318666.png" width=80%></p><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p><img src="/images/projects/java-crawler/image-20200202164409163.png" alt="image-20200202164409163"></p><p> <br></p><hr><p>完整代码请见<a href="https://github.com/Iris-cyy/Java-Crawler" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本次开发的是一个学术搜索引擎，可以根据关键词从数据库中搜索相关内容，实现搜索引擎的基本功能。本程序采用Java程序设计语言，在Eclipse平台下编辑、编译与调试。通过爬虫技术获得来源于ACL学术网站&lt;a href=&quot;https://www.aclweb.org/antho
      
    
    </summary>
    
      <category term="Projects" scheme="https://iris-cyy.github.io/categories/Projects/"/>
    
    
      <category term="Projects" scheme="https://iris-cyy.github.io/tags/Projects/"/>
    
      <category term="JAVA" scheme="https://iris-cyy.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MUA Interpreter</title>
    <link href="https://iris-cyy.github.io//Projects/2020-02-01/mua_interpreter/"/>
    <id>https://iris-cyy.github.io//Projects/2020-02-01/mua_interpreter/</id>
    <published>2020-02-01T08:31:20.000Z</published>
    <updated>2020-02-02T07:59:31.067Z</updated>
    
    <content type="html"><![CDATA[<p>MUA是ZJU编程语言原理（Principle of Programming Language）课程中用到的编程语言。本项目要做的工作是使用JAVA语言完成一个MUA语言的解释器，通过命令行与用户进行交互，解析并运行用户输入的代码。</p><p>本项目仅能够针对课程的测试点实现基本要求，但还有很多部分需要完善（例如在遇见具有语法错误的代码时，不能进行解析，而是整个程序会报错，函数的参数数量有限制，save和load的实际操作，etc.），以及有很多部分可以优化（例如各class的构造，其实有一些可以去掉），会在后续进行更新。</p><p>以下是对于该语言基本语法以及解析器实现方式的说明。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>首先要注意的是，MUA是一个解释型语言，但是和Python不同，MUA语言中，空格、tab、换行等不能标记一个语句的结束，或者分支情况。</p><h3 id="基本数据类型value"><a href="#基本数据类型value" class="headerlink" title="基本数据类型value"></a>基本数据类型value</h3><p>数字number，字word，表list，布尔bool</p><ul><li>数字的字面量以[0~9]或’-‘开头，不区分整数，浮点数</li><li>字的字面量以双引号<code>&quot;</code> 开头，不含空格，采用Unicode编码。在 <code>&quot;</code> 后的任何内容，直到空格（包括空格、tab和回车）为止的字符（不含空格），都是这个字的一部分，包括其中可能有的 <code>&quot;</code> 和 <code>[]</code> 等符号</li><li>表的字面量量以方括号 <code>[]</code> 包含，其中的元素以空格分隔；元素可是任意类型；元素类型可不一致；<ul><li>表的第一个元素和<code>[</code>之间，以及最后一个元素和<code>]</code>之间不需要由空格分隔</li><li>表中的字不需要<code>&quot;</code>引导</li><li>这是一个有三层表的字面量的例子：<code>[a [b [c d] e]]</code></li></ul></li><li>布尔量只有两个值： <code>true</code> 和 <code>false</code></li><li>数字和布尔量在计算时可以被看作是字的特殊形式，即在字面量和变量中的字，当其中的内容是数字或布尔量时，总是可以根据需要自动被转换成数字或布尔量</li></ul><h3 id="名字name"><a href="#名字name" class="headerlink" title="名字name"></a>名字name</h3><p>一个以字母开头，只含有字母和数字及下划线的字，可以用做名字，名字区分大小写。</p><p>函数名和变量名都算是name</p><p>word只有在作为name使用时需要加<code>&quot;</code>（例如在<code>make</code>、<code>save</code>、<code>print</code>、<code>isname</code>以及字表操作等等），其他时候（比如在list中，调用函数时，print里面的输出等等）不需要用<code>&quot;</code>。</p><h3 id="基本操作operation"><a href="#基本操作operation" class="headerlink" title="基本操作operation"></a>基本操作operation</h3><p>基本形式：操作名 参数</p><p>操作名是一个名字，与参数间以空格分隔。参数可以有多个，多个参数间以空格分隔。每个操作所需的参数数量是确定的，所以不需要括号或语句结束符号。有的操作有返回值，有的没有。</p><p>一个程序就是操作的序列。</p><p>基本操作有：</p><ul><li><p><code>//</code> ：注释，从//到行末均为注释</p></li><li><p><code>make &lt;name&gt; &lt;value&gt;</code> ： 将value绑定到name上，绑定后的名字位于命名空间。此文档中的基本操作的名字不能重新命名</p><blockquote><p>make “b “a  –&gt;  thing “b == a, thing :b == value of a</p></blockquote></li><li><p><code>thing &lt;name&gt;</code> ：返回word所绑定的值</p></li><li><p><code>:&lt;name&gt;</code> ：与thing相同</p><blockquote><p>:a  ==  thing “a</p></blockquote></li><li><p><code>erase &lt;name&gt;</code> ：清除word所绑定的值</p></li><li><p><code>isname &lt;word&gt;</code> ：返回word是否是一个名字，true/false</p><blockquote><p>isname “a</p></blockquote></li><li><p><code>print &lt;value&gt;</code> ：输出value</p><blockquote><p>print “a  –&gt;  a<br>print 1  –&gt;  1<br>print true  –&gt;  true<br>print :a  –&gt;  6 （如果前面make “a 6）<br>print [a b c]  –&gt;  a b c</p></blockquote></li><li><p><code>read</code> ：返回一个从标准输入读取的数字或字</p></li><li><p>运算符operator</p><ul><li><code>add</code> , <code>sub</code>, <code>mul</code> , <code>div</code> , <code>mod</code> ： <code>&lt;operator&gt; &lt;number&gt; &lt;number&gt;</code></li><li><code>eq</code> , <code>gt</code> , <code>lt</code> ： <code>&lt;operator&gt; &lt;number|word&gt; &lt;number|word&gt;</code></li><li><code>and</code> , <code>or</code> ： <code>&lt;operator&gt; &lt;bool&gt; &lt;bool&gt;</code></li><li><code>not</code> ： <code>not &lt;bool&gt;</code></li></ul></li></ul><ul><li><p><code>readlist</code> ：返回一个从标准输入读取的一行，构成一个表，行中每个以空格分隔的部分是list的一个元素</p><ul><li>用<code>readlist</code>读入的只可能是单层的表</li></ul></li></ul><ul><li><code>repeat &lt;number&gt; &lt;list&gt;</code> ：运行list中的代码number次</li></ul><h3 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><code>make &lt;name&gt; [&lt;list1&gt; &lt;list2&gt;]</code>，其中</p><ul><li>name为函数名</li><li>list1为参数表</li><li>list2为操作表</li></ul><p>以下为函数定义的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make &quot;prt [</span><br><span class="line">[a]</span><br><span class="line">[print :a]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p><code>&lt;functionName&gt; &lt;arglist&gt;</code>，其中：</p><ul><li><code>&lt;functionName&gt;</code>为make中定义的函数名，不需要双引号<code>&quot;</code></li><li><code>&lt;arglist&gt;</code>是参数表<code>&lt;arglist&gt;</code>中的值和函数定义时的<code>&lt;list1&gt;</code>中名字进行一一对应绑定</li></ul><p>以下为函数调用的例子：<code>prt &quot;hello</code></p><h4 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h4><ul><li><p>在函数中访问（读取）变量的值的时候，首先访问本地，如果本地不存在，则访问全局</p></li><li><p>在函数中做 <code>make</code> 时，永远只写本地：</p><ul><li>检查本函数内是否存在这个名字，如果存在，则对已有的变量赋值；</li><li>否，则在本地定义⼀个新的变量</li></ul></li></ul><h4 id="函数相关的操作"><a href="#函数相关的操作" class="headerlink" title="函数相关的操作"></a>函数相关的操作</h4><ul><li><p><code>output &lt;value&gt;</code> ：设定value为返回给调用者的值，但是不停止执行</p></li><li><p><code>stop</code> ：停止执行</p></li><li><code>export</code> ：将本地make的值输出到全局<ul><li>如果全局没有这个变量，则增加⼀个全局变量</li><li>如果全局已经有了同名的变量，则替换全部变量的值</li></ul></li></ul><h3 id="表达式计算"><a href="#表达式计算" class="headerlink" title="表达式计算"></a>表达式计算</h3><p>允许使用以下运算符对数字进行计算：<code>+-*/%()</code></p><p>为了方便便识别，要求表达式的外⾯面必须有括号<code>()</code>包围。</p><p>支持负数</p><blockquote><p> (5+-2)   –&gt;  3.0</p></blockquote><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul><li><code>if &lt;bool&gt; &lt;list1&gt; &lt;list2&gt;</code> ：如果bool为真，则执行list1，否则执行list2。list均可以为空表</li><li><code>isnumber &lt;value&gt;</code> ：返回value是否是数字</li><li><code>isword &lt;value&gt;</code> ：返回value是否是字</li><li><code>islist &lt;value&gt;</code> ：返回value是否是表</li><li><code>isbool &lt;value&gt;</code> ：返回value是否是布尔量</li><li><code>isempty &lt;word|list&gt;</code> : 返回word或list是否是空</li></ul><h3 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h3><ul><li><code>random &lt;number&gt;</code> ：返回[0,number)的一个随机数</li><li><code>sqrt &lt;number&gt;</code> ：返回number的平方根</li><li><code>int &lt;number&gt;</code> : floor the int</li></ul><h3 id="字表处理"><a href="#字表处理" class="headerlink" title="字表处理"></a>字表处理</h3><ul><li><p><code>word &lt;word&gt; &lt;word|number|bool&gt;</code> ：将两个word合并为一个word，第二个值可以是word、number或bool</p></li><li><p><code>sentence &lt;value1&gt; &lt;value2&gt;</code> ：将value1和value2合并成一个表，两个值的元素并列，value1的在value2的前面</p><blockquote><p>返回结果为list<br>sentence “a “b  -&gt;  a b<br>sentence [a] [b]  -&gt;  a b<br>sentence “a [b] -&gt;  a b<br>sentence [a [b c]  d] [x y]  -&gt;  a [b c] d x y</p></blockquote></li><li><p><code>list &lt;value1&gt; &lt;value2&gt;</code> ：将两个值合并为一个表，如果值为表，则不打开这个表</p><blockquote><p>list “a “b -&gt; a b<br>list [a] [b] -&gt; [a] [b]</p></blockquote></li><li><p><code>join &lt;list&gt; &lt;value&gt;</code> ：将value作为list的最后一个元素加入到list中（如果value是表，则整个value成为表的最后一个元素）</p><blockquote><p>join [a b] “c  -&gt;  a b c<br>join [a b] [c]  -&gt;  a b [c]<br>join [a b] first [c]  -&gt;  a b c</p></blockquote></li><li><p><code>first &lt;word|list&gt;</code> ：返回word的第一个字符，或list的第一个元素</p><blockquote><p>first “abc  -&gt;  a (word)<br>first [a b c]  -&gt;  a (word)<br>first [[a] b]  -&gt;  a (list)<br>first “123  -&gt;  1 (word)<br>islist first []  -&gt;  true<br>isempty first []  -&gt;  true</p></blockquote></li><li><p><code>last &lt;word|list&gt;</code> ：返回word的最后一个字符，list的最后一个元素</p></li><li><p><code>butfirst &lt;word|list&gt;</code> ：返回除第一个元素外剩下的表，或除第一个字符外剩下的字</p><blockquote><p>注意返回是list<br>islist butfirst [a b c]  -&gt;  true<br>islist butfirst [a b]  -&gt;  true</p></blockquote></li><li><p><code>butlast &lt;word|list&gt;</code> ：返回除最后一个元素外剩下的表，或除最后一个字符外剩下的字</p></li></ul><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><ul><li><p><code>wait &lt;number&gt;</code> ：等待number个ms</p></li><li><p><code>save &lt;word&gt;</code> ：保存当前命名空间在word文件中</p><blockquote><p>save “a.mua</p></blockquote></li><li><p><code>load &lt;word&gt;</code> ：从word文件中装载内容，加入当前命名空间</p></li><li><p><code>erall</code> ：清除当前命名空间的全部内容</p></li><li><p><code>poall</code> ：列出当前命名空间的全部名字</p></li></ul><h3 id="既有名字"><a href="#既有名字" class="headerlink" title="既有名字"></a>既有名字</h3><p>系统提供了一些常⽤用的量量，或可以由其他操作实现但是常用的操作，作为固有的名字。这些名字是可以被删除（erase）的。</p><ul><li><code>pi</code> ：3.14159</li><li><code>run &lt;list&gt;</code> ：运行list中的代码</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>项目中创建的class介绍如下：</p><h4 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h4><p>MUA语句中的每个单词都是一个<code>command</code>，包含<code>number</code>、<code>bool</code>、<code>list</code>、<code>word</code>、<code>operator</code>、<code>expression</code>、<code>file</code>几个类别，具有名字、类别、值（针对number、bool、list、expression，根据类别不同有不同类型的值）几个属性（其中list会被看成一个整体）。</p><blockquote><p> 例如语句 if eq thing “a 6 [print :a] [print 0]</p><table><thead><tr><th>name</th><th>type</th><th>value</th></tr></thead><tbody><tr><td>if</td><td>operation</td><td>/</td></tr><tr><td>eq</td><td>operation</td><td>/</td></tr><tr><td>thing</td><td>operation</td><td>/</td></tr><tr><td>“a</td><td>word</td><td>/</td></tr><tr><td>6</td><td>number</td><td>6 (double)</td></tr><tr><td>[print :a]</td><td>list</td><td>[print :a] (String)</td></tr><tr><td>[print 0]</td><td>list</td><td>[print 0] (String)</td></tr></tbody></table></blockquote><p><code>command</code>的构造可以有三种方式，构造一个空的command、提供name和type（在构造时根据name判断并填充value）、提供name（构造时根据name判断并填充type和value），具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">command()&#123;&#125;</span><br><span class="line"></span><br><span class="line">command(String name, String type)&#123;</span><br><span class="line">    commandName = name;</span><br><span class="line">    commandType = type;</span><br><span class="line">    setCommandValue(commandType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">command(String name)&#123;</span><br><span class="line">    commandName = name;</span><br><span class="line">    analyzeType(name);</span><br><span class="line">    setCommandValue(commandType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>analyzeType</code>是用于根据name判断command类型的方法，setCommandValue是根据name和type设置value的方法。这两个方法的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analyzeType</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> firstChar = name.charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>( (firstChar &gt;= <span class="string">'0'</span> &amp;&amp; firstChar &lt;= <span class="string">'9'</span>) || firstChar == <span class="string">'-'</span>) &#123;</span><br><span class="line">        <span class="comment">//number eg.6</span></span><br><span class="line">        commandType = <span class="string">"number"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(firstChar == <span class="string">'"'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isNumber(name.substring(<span class="number">1</span>))) &#123;</span><br><span class="line">            <span class="comment">//number eg."6</span></span><br><span class="line">            commandName = name.substring(<span class="number">1</span>);</span><br><span class="line">            commandType = <span class="string">"number"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//word eg."ab</span></span><br><span class="line">            commandType = <span class="string">"word"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(name.equals(<span class="string">"true"</span>) || name.equals(<span class="string">"false"</span>)) &#123;</span><br><span class="line">        <span class="comment">//boolean (true/false)</span></span><br><span class="line">        commandType = <span class="string">"bool"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(firstChar == <span class="string">'['</span>)&#123;</span><br><span class="line">        <span class="comment">//list</span></span><br><span class="line">        commandType = <span class="string">"list"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(firstChar == <span class="string">'('</span>) &#123;</span><br><span class="line">        <span class="comment">//expression</span></span><br><span class="line">        commandType = <span class="string">"expression"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(name.indexOf(<span class="string">'.'</span>) != -<span class="number">1</span> &amp;&amp; name.trim().substring(name.indexOf(<span class="string">'.'</span>)).equals(<span class="string">".mua"</span>)) &#123;</span><br><span class="line">        commandType = <span class="string">"file"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//operator</span></span><br><span class="line">        commandType = <span class="string">"operator"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommandValue</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"number"</span>)) &#123;</span><br><span class="line">        numValue = Double.valueOf(commandName);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"bool"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(commandName.equals(<span class="string">"true"</span>)) &#123;</span><br><span class="line">            boolValue = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            boolValue = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        listString = commandName.substring(<span class="number">1</span>, commandName.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"expression"</span>)) &#123;</span><br><span class="line">        exprString = commandName.substring(<span class="number">1</span>, commandName.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="commandStack"><a href="#commandStack" class="headerlink" title="commandStack"></a><code>commandStack</code></h4><p>输入的MUA语句会被作为一个<code>commandStack</code>类存储起来，顾名思义，<code>commandStack</code>是一个由很多<code>command</code>组成的stack，通过<code>Vector</code>来组织。例如<code>if eq thing &quot;a 6 [print :a] [print 0]</code>将会被分为七个<code>command</code>，存储在一个<code>commandStack</code>里。</p><p><code>commandStack</code>的构造包括空白构造、根据一个MUA语句进行构造两种方式，实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">commandStack()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//put a line of commands into stack</span></span><br><span class="line">commandStack(String line)&#123;</span><br><span class="line">    line = line.replace(<span class="string">":"</span>, <span class="string">"thing \""</span>).trim();</span><br><span class="line">    <span class="keyword">while</span>(!line.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        command newCom;</span><br><span class="line">        <span class="keyword">if</span>(line.charAt(<span class="number">0</span>) == <span class="string">'['</span>) &#123;</span><br><span class="line">            <span class="comment">//list</span></span><br><span class="line">            <span class="keyword">int</span> comp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(line.charAt(i) == <span class="string">'['</span>) &#123;</span><br><span class="line">                    comp--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(line.charAt(i) == <span class="string">']'</span>) &#123;</span><br><span class="line">                    comp++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(comp == <span class="number">0</span>) &#123;</span><br><span class="line">                    newCom = <span class="keyword">new</span> command((line.substring(<span class="number">0</span>, i+<span class="number">1</span>)).trim());</span><br><span class="line">                    commands.addElement(newCom);</span><br><span class="line">                    <span class="keyword">if</span>(i == line.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                        line = <span class="string">""</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        line = line.substring(i+<span class="number">1</span>).trim();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(line.charAt(<span class="number">0</span>) == <span class="string">'('</span>) &#123;</span><br><span class="line">            <span class="comment">//expression</span></span><br><span class="line">            <span class="keyword">int</span> comp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(line.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                    comp--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(line.charAt(i) == <span class="string">')'</span>) &#123;</span><br><span class="line">                    comp++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(comp == <span class="number">0</span>) &#123;</span><br><span class="line">                    newCom = <span class="keyword">new</span> command((line.substring(<span class="number">0</span>, i+<span class="number">1</span>)).trim());</span><br><span class="line">                    commands.addElement(newCom);</span><br><span class="line">                    <span class="keyword">if</span>(i == line.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                        line = <span class="string">""</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        line = line.substring(i+<span class="number">1</span>).trim();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(line.indexOf(<span class="string">' '</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//more than one command left</span></span><br><span class="line">            newCom = <span class="keyword">new</span> command(line.substring(<span class="number">0</span>, line.indexOf(<span class="string">' '</span>)).trim());</span><br><span class="line">            commands.addElement(newCom); </span><br><span class="line">            line = line.substring(line.indexOf(<span class="string">' '</span>)+<span class="number">1</span>).trim(); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newCom = <span class="keyword">new</span> command(line);</span><br><span class="line">            commands.addElement(newCom);</span><br><span class="line">            line = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>commandStack</code>的方法仿照<code>Vector</code>，包含<code>get(index)</code>、<code>setElementAt(newCommand, index)</code>、<code>insertElementAt(newCommand, index)</code>、<code>removeElementAt(index)</code>、<code>subStack(begin, end)</code>、<code>subStack(begin)</code>，便于操作。</p><h4 id="variable"><a href="#variable" class="headerlink" title="variable"></a><code>variable</code></h4><p>变量。每个被<code>make</code>过的<code>word</code>都会被作为一个变量存储起来，包含<code>number</code>、<code>bool</code>、<code>word</code>、<code>list</code>几个类别，具有名字、类别、值（不同类别有不同类型的值）几个属性。每一种类别的变量都有一个单独的构造函数，此外还有拷贝构造，以及未赋值的变量构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//empty variable</span></span><br><span class="line">variable(String name)&#123;</span><br><span class="line">    varName = name;</span><br><span class="line">    varType = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//eg. make "a 6</span></span><br><span class="line">variable(String name, <span class="keyword">double</span> value)&#123;</span><br><span class="line">    varName = name;</span><br><span class="line">    numValue = value;</span><br><span class="line">    varType = <span class="string">"number"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//eg. make "a true</span></span><br><span class="line">variable(String name, <span class="keyword">boolean</span> bool)&#123;</span><br><span class="line">    varName = name;</span><br><span class="line">    boolValue = bool;</span><br><span class="line">    varType = <span class="string">"bool"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//eg. make "b "a, varType of b is word</span></span><br><span class="line">variable(String name, String str)&#123;</span><br><span class="line">    varName = name;</span><br><span class="line">    <span class="keyword">if</span>(str.charAt(<span class="number">0</span>) == <span class="string">'['</span>) &#123;</span><br><span class="line">        changeListStr(str);</span><br><span class="line">        varType = <span class="string">"list"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        wordName = str;</span><br><span class="line">        varType = <span class="string">"word"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy construction</span></span><br><span class="line">variable(variable <span class="keyword">var</span>) &#123;</span><br><span class="line">    varName = <span class="keyword">var</span>.getName();</span><br><span class="line">    varType = <span class="keyword">var</span>.getType();</span><br><span class="line">    <span class="keyword">if</span>(varType == <span class="string">"number"</span>) &#123;</span><br><span class="line">        numValue = <span class="keyword">var</span>.getNumValue();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(varType == <span class="string">"bool"</span>) &#123;</span><br><span class="line">        boolValue = <span class="keyword">var</span>.getBoolValue();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        wordName = <span class="keyword">var</span>.getWordName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有<code>getValue()</code>、<code>chageValue(newValue)</code>方法，可以用于获取和改变变量的值</p><h4 id="varStack"><a href="#varStack" class="headerlink" title="varStack"></a><code>varStack</code></h4><p><code>varStack</code> 即 <code>variable</code>组成的 stack，存储当前命名空间下的所有变量，整个程序会有一个全局的<code>varStack</code>，每个函数都有其对应的局部的<code>varStack</code>，使用<code>Vector</code>来管理。</p><p>含有<code>isname</code>方法，用于判断当前变量空间是否含有对应名字的变量。</p><p>含有往<code>varStack</code>中添加<code>variable</code>的方法，有<code>add(variable)</code>、<code>add(name)</code>、<code>add(name, value)</code>几种方式，要注意的是，如果在栈中有与新添加的变量同名的变量，则进行覆盖。</p><p>可以根据name来移除变量（<code>remove(name)</code>）、获取变量的值（<code>getValue(name)</code>）、查找对应变量（<code>find(name)</code>）。</p><p>此外，包含仿照<code>Vector</code>的方法，<code>size()</code> <code>removeElementAt(index)</code> 。</p><h4 id="function"><a href="#function" class="headerlink" title="function"></a><code>function</code></h4><p>函数。包含名字、变量列表、操作列表（分别用stack来存当前函数对应的<code>variable</code>和<code>commandStack</code>，每一句操作都是一个commandStack）</p><p>除了空白构造和拷贝构造之外，可以通过提供名字、变量列表、操作列表来构造，其中，变量列表和操作列表以<code>String</code>输入，在构造时存储在对应stack中，通过<code>Vector</code>来管理</p><h4 id="funcStack"><a href="#funcStack" class="headerlink" title="funcStack"></a><code>funcStack</code></h4><p><code>funcStack</code> 即<code>function</code>组成的 stack，存储所有的函数</p><h4 id="exprMember"><a href="#exprMember" class="headerlink" title="exprMember"></a><code>exprMember</code></h4><p>表达式中的每个成员，包含名字、类型（number/operator）、值（针对number）三个属性</p><h4 id="expression"><a href="#expression" class="headerlink" title="expression"></a><code>expression</code></h4><p>用stack存储一整句表达式，可以通过操作stack来进行运算。</p><p>要注意的是，<code>-</code>可能有减法和负数两种含义，要在构造时进行判断，如果为减法，<code>exprMember</code>的类型将是<code>operator</code>，如果是负数，则与其后面的数字一起组成新的数值，类型是<code>number</code>。</p><p>将一整句表达式拆开并存储为由<code>exprMember</code>组成的stack的构造如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">expression(String expr)&#123;</span><br><span class="line">    exprMember newMem;</span><br><span class="line">    expr = expr.trim();</span><br><span class="line">    <span class="keyword">while</span>(!expr.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(expr.charAt(<span class="number">0</span>)))&#123;</span><br><span class="line">            <span class="keyword">if</span>(expr.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, <span class="number">1</span>), <span class="string">"number"</span>);</span><br><span class="line">                members.add(newMem);</span><br><span class="line">                expr = expr.substring(<span class="number">1</span>).trim();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;expr.length(); i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!Character.isDigit(expr.charAt(i)) &amp;&amp; expr.charAt(i) != <span class="string">'.'</span> || i == expr.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i == expr.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                            newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, i+<span class="number">1</span>), <span class="string">"number"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, i), <span class="string">"number"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        members.add(newMem);</span><br><span class="line">                        expr = expr.substring(i).trim();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(expr.charAt(<span class="number">0</span>) == <span class="string">'-'</span> &amp;&amp; (members.size() == <span class="number">0</span> || members.get(members.size()-<span class="number">1</span>).getType() == <span class="string">"operator"</span>)) &#123;</span><br><span class="line">            <span class="comment">//judge whether the '-' represents negative or minus</span></span><br><span class="line">            <span class="comment">//if it is negative, do it first</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;expr.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!Character.isDigit(expr.charAt(i))) &#123;</span><br><span class="line">                    newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, i), <span class="string">"number"</span>);</span><br><span class="line">                    members.add(newMem);</span><br><span class="line">                    expr = expr.substring(i).trim();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, <span class="number">1</span>), <span class="string">"operator"</span>);</span><br><span class="line">            members.add(newMem);</span><br><span class="line">            expr = expr.substring(<span class="number">1</span>).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体实现"><a href="#整体实现" class="headerlink" title="整体实现"></a>整体实现</h3><p>整体的实现通过栈进行，分析<code>commandStack</code>中各<code>command</code>的属性，对其中的<code>operator</code>进行对应操作，取出<code>operator</code>以及对应的操作数，操作完之后把结果放回栈中。</p><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>为方便后续处理，在通过MUA语句构造<code>commandStack</code>时，将所有的<code>：</code>都替换成<code>thing &quot;</code>。</p><h4 id="读入MUA语句"><a href="#读入MUA语句" class="headerlink" title="读入MUA语句"></a>读入MUA语句</h4><p>读入时跳过所有注释</p><p>读入时要注意的是判断是否读完一整句话，如果没有读完（list或者expression，或者一句话的操作数不足），需要继续读下一行，拼起来作为完整的语句。</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>由于可能会出现多个语句在同一行的情况，因此只能从前往后运行。</p><p>判断当前operator的操作数是否被运算完全，即后面的对应数量的<code>command</code>是否都不是<code>operator</code>类型。如果都不是，说明一个语句已完全，则运行当前<code>operator</code>，否则，递归判断遇到的下一个<code>operator</code>。</p><h4 id="函数运行"><a href="#函数运行" class="headerlink" title="函数运行"></a>函数运行</h4><p>函数运行时，先按照变量列表，使用传递给函数的参数对函数变量空间的对应变量进行值改变，然后依次运行操作列表中的操作。通过依次调用<code>funcStack</code>和<code>function</code>中负责运行函数的方法进行运行。</p><p>需要注意的是：</p><ul><li><p>如果在操纵列表中出现<code>stop</code>，直接返回。</p></li><li><p>为了实现递归操作，在运行函数时使用拷贝构造函数，构造一个完全相同的新函数再运行，而非直接操作原来的函数。</p></li></ul><p>实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(func.isFunc(<span class="string">"\""</span> + oper_command.get(begin_index).getCommandName())) &#123;</span><br><span class="line">    String funcName = <span class="string">"\""</span> + oper_command.get(begin_index).getCommandName();</span><br><span class="line">    String funcVars = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//pass parameters to the function in order</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;func.funcVarNum(funcName); i++) &#123;</span><br><span class="line">        funcVars += oper_command.get(begin_index+i+<span class="number">1</span>).getCommandName() + <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    commandStack funcVarStack = <span class="keyword">new</span> commandStack(funcVars);</span><br><span class="line">    <span class="comment">//run the function</span></span><br><span class="line">    retstr = func.runFunc(funcName, funcVarStack);</span><br><span class="line">    <span class="keyword">if</span>(retstr.equals(<span class="string">""</span>) || retstr.equals(<span class="string">"STOP!!!!"</span>)) &#123;</span><br><span class="line">        <span class="comment">//no output or is stopped (in case of recursion) </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=func.funcVarNum(funcName); i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            oper_command.removeElementAt(begin_index+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(retstr);</span><br><span class="line">        oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=func.funcVarNum(funcName); i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">            oper_command.removeElementAt(begin_index+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>funcStack</code>中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">runFunc</span><span class="params">(String funcName, commandStack funcVarStack)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String ret = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//find the newly created function to run</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=functions.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(functions.get(i).getName().equals(funcName)) &#123;</span><br><span class="line">            <span class="comment">//create a same function to run (in case of recursion)</span></span><br><span class="line">            function new_func = <span class="keyword">new</span> function(functions.get(i));</span><br><span class="line">            ret = new_func.run(funcVarStack);</span><br><span class="line">            <span class="keyword">if</span>(ret == <span class="string">"STOP!!!!"</span>) &#123;</span><br><span class="line">                <span class="comment">//the function is stopped </span></span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>function</code>中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">(commandStack funcVarStack)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String ret = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> var_index = <span class="number">0</span>;</span><br><span class="line">    String varName = <span class="string">""</span>;</span><br><span class="line">    String varValue = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//passing parameters</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;getVarNum(); i++) &#123;</span><br><span class="line">        varName = funcVariable.get(i).getName();</span><br><span class="line">        varValue = funcVarStack.get(i).getCommandName();</span><br><span class="line">        funcVariable.get(i).changeValue(varValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//run each operations in order</span></span><br><span class="line">    commandStack nextComStack;</span><br><span class="line">    <span class="keyword">while</span>(funcOperation.size()!=<span class="number">0</span>) &#123;</span><br><span class="line">        nextComStack = funcOperation.get(<span class="number">0</span>);</span><br><span class="line">        ret = CommandAnalyze.judge(nextComStack, funcVariable, <span class="number">0</span>);</span><br><span class="line">        funcOperation.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//if the function is stopped</span></span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="string">"STOP!!!!"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表达式运算"><a href="#表达式运算" class="headerlink" title="表达式运算"></a>表达式运算</h4><p>为方便起见，在表达式运算中与<code>commandStack</code>中的处理相反，将所有<code>thing &quot;</code>都替换成<code>:</code>来操作。</p><p>表达式运算的几个特殊情况：</p><ul><li>处理内部含有<code>()</code>的表达式，通过递归进行</li><li>含有变量的表达式，检测到下一个字符是<code>+-*/%</code>中的一个，或者到达表达式结尾，则说明变量名结束。根据检测到的变量名，在变量空间中用对应的数值来替代</li><li>含有函数的表达式，检测函数名的方式与检测变量名类似。先运行对应函数，然后再将运算得到的值替代表达式中的函数名，运算表达式。</li></ul><p>实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">manageExpression</span><span class="params">(String expression, varStack vars)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//expression with()</span></span><br><span class="line">    expression = expression.trim();</span><br><span class="line">    expression = expression.substring(<span class="number">1</span>, expression.length()-<span class="number">1</span>);</span><br><span class="line">    expression = expression.replace(<span class="string">"thing \""</span>, <span class="string">":"</span>);</span><br><span class="line">    String result = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//contains (), recursive</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expression.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(expression.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> comp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;expression.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(expression.charAt(j) == <span class="string">'('</span>) &#123;</span><br><span class="line">                    comp--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(expression.charAt(j) == <span class="string">')'</span>) &#123;</span><br><span class="line">                    comp++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(comp == <span class="number">0</span>) &#123;</span><br><span class="line">                    String newExp = expression.substring(i, j+<span class="number">1</span>);</span><br><span class="line">                    result = manageExpression(newExp, vars);</span><br><span class="line">                    expression = expression.substring(<span class="number">0</span>, i) + result + expression.substring(j+<span class="number">1</span>);</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//vars</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expression.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(expression.charAt(i) == <span class="string">':'</span>) &#123;</span><br><span class="line">            String varName;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;expression.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(isOper(expression.charAt(j)) || j == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                        varName = <span class="string">"\""</span> + expression.substring(i+<span class="number">1</span>, j+<span class="number">1</span>).trim();</span><br><span class="line">                        expression = expression.substring(<span class="number">0</span>,i) + vars.getValue(varName);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        varName = <span class="string">"\""</span> + expression.substring(i+<span class="number">1</span>, j).trim();</span><br><span class="line">                        expression = expression.substring(<span class="number">0</span>,i) + vars.getValue(varName) + expression.substring(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//function</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expression.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Character.isDigit(expression.charAt(i)) &amp;&amp; !isOper(expression.charAt(i)) &amp;&amp; expression.charAt(i) != <span class="string">' '</span> &amp;&amp; expression.charAt(i) != <span class="string">'.'</span>) &#123;</span><br><span class="line">            String funcName;</span><br><span class="line">            String retstr;</span><br><span class="line">            commandStack funcVarStack;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;expression.length();  j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(expression.charAt(j) == <span class="string">' '</span>) &#123;</span><br><span class="line">                    funcName = <span class="string">"\""</span> + expression.substring(i, j);</span><br><span class="line">                    <span class="comment">//single variable</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>; k&lt;expression.length(); k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(expression.charAt(k) == <span class="string">' '</span> || k == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(k == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                                funcVarStack = <span class="keyword">new</span> commandStack(expression.substring(j+<span class="number">1</span>, k+<span class="number">1</span>));</span><br><span class="line">                                retstr = func.runFunc(funcName, funcVarStack);</span><br><span class="line">                                expression = expression.substring(<span class="number">0</span>,i) + retstr;</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                funcVarStack = <span class="keyword">new</span> commandStack(expression.substring(j+<span class="number">1</span>, k+<span class="number">1</span>));</span><br><span class="line">                                retstr = func.runFunc(funcName, funcVarStack);</span><br><span class="line">                                expression = expression.substring(<span class="number">0</span>,i) + retstr + expression.substring(k);</span><br><span class="line">                            &#125;</span><br><span class="line">                            i--;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    expression expr = <span class="keyword">new</span> expression(expression);</span><br><span class="line">    result = expr.calculate();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>calculate()</code>是<code>expression</code>类中的方法，原理是通过<code>expression</code>中构造的栈进行运算，按顺序取<code>operator</code>，同时取出它两边的<code>number</code>作为operand进行运算，然后将新的值放回到栈中。由于表达式中只有<code>+-*/%</code>几种运算符，就根据优先级顺序，先处理<code>*/%</code>，再处理<code>+-</code>。</p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="make-lt-name-gt-lt-value-gt-或make-lt-name-gt-lt-list1-gt-lt-list2-gt"><a href="#make-lt-name-gt-lt-value-gt-或make-lt-name-gt-lt-list1-gt-lt-list2-gt" class="headerlink" title="make &lt;name&gt; &lt;value&gt;或make &lt;name&gt; [&lt;list1&gt; &lt;list2&gt;]"></a><code>make &lt;name&gt; &lt;value&gt;</code>或<code>make &lt;name&gt; [&lt;list1&gt; &lt;list2&gt;]</code></h5><p>如果定义的是函数，创建新的函数并加入函数栈中。如果定义的是变量，创建新的变量并加入当前变量空间的变量栈中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"make"</span>:</span><br><span class="line">    command next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    command next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"list"</span>)) &#123;</span><br><span class="line">        <span class="comment">//if the second operand is a list, the first operand is the name of a function</span></span><br><span class="line">        <span class="comment">//add the function to stack</span></span><br><span class="line">        func.add(next1.getCommandName(), next2.getCommandName());</span><br><span class="line">        <span class="comment">//store the number of operands of the new function</span></span><br><span class="line">        <span class="keyword">if</span>(func.funcVarNum(next1.getCommandName()) == <span class="number">1</span>) &#123;</span><br><span class="line">            oneOperand.add(next1.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(func.funcVarNum(next1.getCommandName()) == <span class="number">2</span>) &#123;</span><br><span class="line">            twoOperand.add(next1.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(func.funcVarNum(next1.getCommandName()) == <span class="number">3</span>) &#123;</span><br><span class="line">            threeOperand.add(next1.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(func.funcVarNum(next1.getCommandName()) == <span class="number">0</span>) &#123;</span><br><span class="line">            noOperand.add(next1.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        <span class="comment">//eg. make "b "a -&gt; thing "b == a, thing :b == value of a</span></span><br><span class="line">        oper_var.add(next1.getCommandName(), next2.getCommandName());</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"number"</span>)) &#123;</span><br><span class="line">        <span class="comment">//eg. make "a 6 -&gt; put 6 in a</span></span><br><span class="line">        oper_var.add(next1.getCommandName(), next2.getNumValue());</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        oper_var.add(next1.getCommandName(), next2.getListString());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//eg. make "a true</span></span><br><span class="line">        oper_var.add(next1.getCommandName(), next2.getBoolValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//remove the used commands</span></span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="thing-lt-name-gt"><a href="#thing-lt-name-gt" class="headerlink" title="thing &lt;name&gt;"></a><code>thing &lt;name&gt;</code></h5><p>从变量栈中取出对应变量的值并取代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"thing"</span>:</span><br><span class="line">    command next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//get the next command </span></span><br><span class="line">    newCom = <span class="keyword">new</span> command(oper_var.getValue(next.getCommandName()), oper_var.getType(next.getCommandName()));</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="erase-lt-name-gt"><a href="#erase-lt-name-gt" class="headerlink" title="erase &lt;name&gt;"></a><code>erase &lt;name&gt;</code></h5><p>从变量栈中删掉对应名字的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"erase"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//remove the next command</span></span><br><span class="line">    oper_var.remove(next.getCommandName());</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="isname-lt-word-gt"><a href="#isname-lt-word-gt" class="headerlink" title="isname &lt;word&gt;"></a><code>isname &lt;word&gt;</code></h5><p>在变量栈和函数栈中都进行查找，如果当前word存在于变量栈或函数栈中，则为name</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"isname"</span>:</span><br><span class="line">    String result;</span><br><span class="line">    <span class="comment">//is a variable or a function, true, else, false</span></span><br><span class="line">    <span class="keyword">if</span>((oper_var.isname(oper_command.get(begin_index+<span class="number">1</span>).getCommandName()).equals(<span class="string">"true"</span>)) || (func.isFunc(oper_command.get(begin_index+<span class="number">1</span>).getCommandName())) ) &#123;</span><br><span class="line">        result = <span class="string">"true"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="string">"false"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newCom = <span class="keyword">new</span> command(result, <span class="string">"bool"</span>);</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="print-lt-value-gt"><a href="#print-lt-value-gt" class="headerlink" title="print &lt;value&gt;"></a><code>print &lt;value&gt;</code></h5><p>输出，要注意不同格式的输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"print"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        <span class="comment">//print a word, eg. print "a --&gt; a</span></span><br><span class="line">        System.out.println(next.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"list"</span>)) &#123;</span><br><span class="line">        System.out.println(next.getCommandName().trim().substring(<span class="number">1</span>, next.getCommandName().trim().length()-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//print number or bool, etc, eg. print 1</span></span><br><span class="line">        System.out.println(next.getCommandName());</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="read"><a href="#read" class="headerlink" title="read"></a><code>read</code></h5><p>返回从标准输入读取的数字或字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"read"</span>:</span><br><span class="line">    <span class="comment">//read in a number/word, classify it</span></span><br><span class="line">    <span class="keyword">if</span>(scan.hasNext()) &#123;</span><br><span class="line">        String input = scan.nextLine();</span><br><span class="line">        <span class="keyword">if</span>(isNumber(input)) &#123;</span><br><span class="line">            newCom = <span class="keyword">new</span> command(input.trim(), <span class="string">"number"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            newCom = <span class="keyword">new</span> command(<span class="string">'"'</span>+input.trim(), <span class="string">"word"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="readlist"><a href="#readlist" class="headerlink" title="readlist"></a><code>readlist</code></h5><p>读入单层的表</p><p>这里好像没做对，后续更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"readlist"</span>:</span><br><span class="line">    <span class="comment">//read in a list (single layer, in one line)</span></span><br><span class="line">    <span class="keyword">if</span>(scan.hasNext()) &#123;</span><br><span class="line">        String input = scan.nextLine();</span><br><span class="line">        newCom =<span class="keyword">new</span> command(input.trim(), <span class="string">"list"</span>);</span><br><span class="line">        oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="repeat-lt-number-gt-lt-list-gt"><a href="#repeat-lt-number-gt-lt-list-gt" class="headerlink" title="repeat &lt;number&gt; &lt;list&gt;"></a><code>repeat &lt;number&gt; &lt;list&gt;</code></h5><p>将<code>&lt;list&gt;</code>中的内容作为一个新的<code>commandStack</code>，进行循环操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"repeat"</span>:</span><br><span class="line">    <span class="comment">//loop</span></span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(!next1.getCommandType().equals(<span class="string">"number"</span>) || !next2.getCommandType().equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        System.out.println(<span class="string">"ERROR: repeat &lt;number&gt; &lt;list&gt;!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> repeatNum = (<span class="keyword">int</span>) next1.getNumValue(); <span class="comment">//loop times</span></span><br><span class="line">    <span class="keyword">int</span> repeatCnt = <span class="number">0</span>; <span class="comment">//the number of execution already take place</span></span><br><span class="line">    commandStack newComStack;</span><br><span class="line">    <span class="keyword">while</span>(repeatCnt != repeatNum) &#123;</span><br><span class="line">        <span class="comment">//create a new stack to store commands in the list, and run again</span></span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(next2.getListString());</span><br><span class="line">        retstr = judge(newComStack, oper_var, <span class="number">0</span>);</span><br><span class="line">        repeatCnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h5><p>包括add、sub、mul、div、mod，以add为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    newCom = <span class="keyword">new</span> command(next1.getNumValue()+next2.getNumValue()+<span class="string">""</span>, <span class="string">"number"</span>);</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h5><p>包括eq、gt、lt，以eq为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"eq"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(next1.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(next1.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(oper_var.getNumValue(next1.getCommandName()) == oper_var.getNumValue(next2.getCommandName()))&#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oper_var.getNumValue(next1.getCommandName()) == next2.getNumValue())&#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(next1.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(next1.getNumValue() == oper_var.getNumValue(next2.getCommandName()))&#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(next1.getNumValue() == next2.getNumValue())&#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h5><p>包括and、or、not，以and为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"and"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(next1.getBoolValue() &amp;&amp; next2.getBoolValue()) &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="if-lt-bool-gt-lt-list1-gt-lt-list2-gt"><a href="#if-lt-bool-gt-lt-list1-gt-lt-list2-gt" class="headerlink" title="if &lt;bool&gt; &lt;list1&gt; &lt;list2&gt;"></a><code>if &lt;bool&gt; &lt;list1&gt; &lt;list2&gt;</code></h5><p>根据条件是<code>true</code>或者<code>false</code>判断运行哪个<code>&lt;list&gt;</code>，将对应<code>&lt;list&gt;</code>中的操作作为一个新的<code>commandStack</code>进行运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"if"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    command list1 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    command list2 = oper_command.get(begin_index+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(next1.getCommandName().equals(<span class="string">"true"</span>)) &#123;</span><br><span class="line">        <span class="comment">//run the commands in list1</span></span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(list1.getListString());</span><br><span class="line">        retstr = judge(newComStack, oper_var, <span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//run the commands in list2</span></span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(list2.getListString());</span><br><span class="line">        retstr = judge(newComStack, oper_var, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">3</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="run-lt-list-gt"><a href="#run-lt-list-gt" class="headerlink" title="run &lt;list&gt;"></a><code>run &lt;list&gt;</code></h5><p>同<code>if</code>和<code>repeat</code>中的做法，将<code>&lt;list&gt;</code>视作新的<code>commandStack</code>进行运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"run"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    newComStack = <span class="keyword">new</span> commandStack(next.getListString());</span><br><span class="line">    retstr = judge(newComStack, oper_var, <span class="number">0</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="判断-1"><a href="#判断-1" class="headerlink" title="判断"></a>判断</h5><p>包括<code>isnumber</code>, <code>isword</code>, <code>islist</code>, <code>isbool</code>, <code>isempty</code>，即判断下一个<code>command</code>的类别即可，以<code>isnumber</code>为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"isnumber"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next1.getCommandType().equals(<span class="string">"number"</span>))&#123;</span><br><span class="line">        result = <span class="string">"true"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="string">"false"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newCom = <span class="keyword">new</span> command(result, <span class="string">"bool"</span>);</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="字表合并"><a href="#字表合并" class="headerlink" title="字表合并"></a>字表合并</h5><p>包括<code>word</code>, <code>sentence</code>, <code>list</code>, <code>join</code>，将后面两个字/表合并为新的表，以<code>word</code>为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"word"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    String newword;</span><br><span class="line">    <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        newword = next1.getCommandName().substring(<span class="number">1</span>) + next2.getCommandName().substring(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newword = next1.getCommandName().substring(<span class="number">1</span>) + next2.getCommandName();</span><br><span class="line">    &#125;</span><br><span class="line">    newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + newword);</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="字表提取"><a href="#字表提取" class="headerlink" title="字表提取"></a>字表提取</h5><p><code>first</code>, <code>butfirst</code>, <code>last</code>, <code>butlast</code>，提取出对应位置的字/表，按照要求进行处理之后放回栈。以<code>first</code>和<code>butfirst</code>为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        <span class="comment">//first "abc -&gt; a (word)</span></span><br><span class="line">        newCom = <span class="keyword">new</span> command(next.getCommandName().substring(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        <span class="comment">//first [a b c] -&gt; a (word)</span></span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(next.getCommandName().trim().substring(<span class="number">1</span>, next.getCommandName().trim().length()-<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//in the above example, a is recognized as an operator, not a word. but it should be a word</span></span><br><span class="line">        <span class="keyword">if</span>(newComStack.get(<span class="number">0</span>).getCommandType().equals(<span class="string">"operator"</span>)) &#123;</span><br><span class="line">            <span class="comment">//it should be a word</span></span><br><span class="line">            newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + newComStack.get(<span class="number">0</span>).getCommandName());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//first [[a] b] -&gt; [a] (list)</span></span><br><span class="line">            newCom = newComStack.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//first "123 -&gt; 1 (word)</span></span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + next.getCommandName().substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"butfirst"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + next.getCommandName().substring(<span class="number">2</span>, next.getCommandName().trim().length()));</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(next.getCommandName().trim().substring(<span class="number">1</span>, next.getCommandName().trim().length()-<span class="number">1</span>));</span><br><span class="line">        newStr = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;newComStack.size(); i++) &#123;</span><br><span class="line">                newCom = newComStack.get(i);</span><br><span class="line">                newStr += newCom.getCommandName() + <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newCom = <span class="keyword">new</span> command(<span class="string">"["</span> + newStr + <span class="string">"]"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + next.getCommandName().substring(<span class="number">1</span>, next.getCommandName().trim().length()));</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="save-lt-word-gt"><a href="#save-lt-word-gt" class="headerlink" title="save &lt;word&gt;"></a><code>save &lt;word&gt;</code></h5><p>用了取巧的方式，只保存当前空间的变量和函数，而不是将所有代码都保存下来。可能要改。</p><p>将变量和函数变成对应<code>make</code>格式的MUA语句进行输出和保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"save"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    File fout = <span class="keyword">new</span> File(next.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(fout);</span><br><span class="line"></span><br><span class="line">    variable currentVar;</span><br><span class="line">    function currentFunc;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;oper_var.size(); i++) &#123;</span><br><span class="line">        currentVar = oper_var.get(i);</span><br><span class="line">        newStr = <span class="string">"make "</span> + currentVar.getName() + <span class="string">" "</span> + currentVar.getValue() + <span class="string">"\n"</span>;</span><br><span class="line">        fw.write(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;func.size(); i++) &#123;</span><br><span class="line">        currentFunc = func.get(i);</span><br><span class="line">        newStr = <span class="string">"make "</span> + currentFunc.getName() + <span class="string">" [["</span> + currentFunc.getVarList() + <span class="string">"] ["</span> + currentFunc.getOperList() + <span class="string">"]]\n"</span>;</span><br><span class="line">        fw.write(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">    fw.close();</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="load-lt-word-gt"><a href="#load-lt-word-gt" class="headerlink" title="load &lt;word&gt;"></a><code>load &lt;word&gt;</code></h5><p>读取对应文件，依次运行其中的语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"load"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    FileReader fr = <span class="keyword">new</span> FileReader(next.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">    <span class="keyword">while</span>((newStr = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(newStr);</span><br><span class="line">        judge(newComStack, <span class="keyword">var</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="erall"><a href="#erall" class="headerlink" title="erall"></a><code>erall</code></h5><p>清空变量栈和函数栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"erall"</span>:</span><br><span class="line">    <span class="keyword">while</span>(oper_var.size()!=<span class="number">0</span>) &#123;</span><br><span class="line">        oper_var.removeElementAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(func.size()!=<span class="number">0</span>) &#123;</span><br><span class="line">        func.removeElementAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="poall"><a href="#poall" class="headerlink" title="poall"></a><code>poall</code></h5><p>列出变量栈和函数栈的全部内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"poall"</span>:</span><br><span class="line">    System.out.print(<span class="string">"variables: "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;oper_var.size(); i++) &#123;</span><br><span class="line">        System.out.print(oper_var.get(i).getName());</span><br><span class="line">        <span class="keyword">if</span>(i != oper_var.size()-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.print(<span class="string">"functions: "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;func.size(); i++) &#123;</span><br><span class="line">        System.out.print(func.get(i).getName());</span><br><span class="line">        <span class="keyword">if</span>(i != func.size()-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><br></p><hr><p>完整代码见<a href="https://github.com/Iris-cyy/MUA-Interpreter/" target="_blank" rel="noopener">github</a>，欢迎star</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MUA是ZJU编程语言原理（Principle of Programming Language）课程中用到的编程语言。本项目要做的工作是使用JAVA语言完成一个MUA语言的解释器，通过命令行与用户进行交互，解析并运行用户输入的代码。&lt;/p&gt;
&lt;p&gt;本项目仅能够针对课程的测试
      
    
    </summary>
    
      <category term="Projects" scheme="https://iris-cyy.github.io/categories/Projects/"/>
    
    
      <category term="Projects" scheme="https://iris-cyy.github.io/tags/Projects/"/>
    
      <category term="JAVA" scheme="https://iris-cyy.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1003 Emergency</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-01-29/pat_1003/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-01-29/pat_1003/</id>
    <published>2020-01-29T08:29:00.000Z</published>
    <updated>2020-01-31T12:39:52.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: $N (≤500)$ - the number of cities (and the cities are numbered from 0 to $N$−1), $M$ - the number of roads, $C_1$ and $C_2$ - the cities that you are currently in and that you must save, respectively. The next line contains <em>N</em> integers, where the $i$-th integer is the number of rescue teams in the $i$-th city. Then $M$ lines follow, each describes a road with three integers $c_1$, $c_2$ and $L$, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from $C_1$ to $C_2$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line two numbers: the number of different shortest paths between $C_1$ and $C_2​$, and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>5 6 0 2<br>1 2 1 5 3<br>0 1 1<br>0 2 2<br>0 3 1<br>1 2 1<br>2 4 1<br>3 4 1</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>2 4</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这是图算法里最短路径问题的变形。</p><p>因为节点数不太大，所以用邻接矩阵来存储路径（其实是懒得动脑）。</p><p>并且因为懒得动脑不想写Dijkstra，就用dfs来遍历，遍历到目的地之后比较路径长度和救援队数量，满足条件则更新对应变量。如果不是目的地则继续往前搜索直到搜不到新的节点。</p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> M; <span class="comment">//number of roads</span></span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">//number of cities</span></span><br><span class="line"><span class="keyword">int</span> C1, C2; <span class="comment">//outset, desitination</span></span><br><span class="line"><span class="keyword">int</span> rt_num[MAXN]; <span class="comment">//number of rescue teams in each city</span></span><br><span class="line"><span class="keyword">int</span> road[MAXN][MAXN]; <span class="comment">//Adjacency matrix</span></span><br><span class="line"><span class="keyword">int</span> visited[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> shortest_path;</span><br><span class="line"><span class="keyword">int</span> max_rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    M = N = C1 = C2 = cnt = max_rt = <span class="number">0</span>;</span><br><span class="line">    shortest_path = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXN; i++)&#123;</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">        rt_num[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;MAXN; j++)&#123;</span><br><span class="line">            road[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> <span class="built_in">point</span>, <span class="keyword">int</span> length, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    visited[<span class="built_in">point</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(length &gt; shortest_path)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">point</span> == C2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; shortest_path)&#123;</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">            shortest_path = length;</span><br><span class="line">            max_rt = rt;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == shortest_path)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(rt &gt; max_rt)&#123;</span><br><span class="line">                max_rt = rt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(road[<span class="built_in">point</span>][i] != INF &amp;&amp; visited[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                dfs(i, length+road[<span class="built_in">point</span>][i], rt+rt_num[i]);</span><br><span class="line">                visited[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; C1 &gt;&gt; C2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; rt_num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; start &gt;&gt; <span class="built_in">end</span> &gt;&gt; length;</span><br><span class="line">        road[start][<span class="built_in">end</span>] = length;</span><br><span class="line">        road[<span class="built_in">end</span>][start] = length;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(C1, <span class="number">0</span>, rt_num[C1]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">" "</span> &lt;&lt; max_rt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;As an emergency rescue team leader of a city, you 
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT】目录</title>
    <link href="https://iris-cyy.github.io//PAT/index/2020-01-29/pat_index/"/>
    <id>https://iris-cyy.github.io//PAT/index/2020-01-29/pat_index/</id>
    <published>2020-01-29T07:34:25.000Z</published>
    <updated>2020-01-29T08:30:51.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PAT-甲级"><a href="#PAT-甲级" class="headerlink" title="PAT 甲级"></a>PAT 甲级</h2><table><thead><tr><th style="text-align:center">No.</th><th style="text-align:center">题目</th><th style="text-align:center">Intro</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1001</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-26/pat_1001/">A+B Fromat</a></td><td style="text-align:center">字符串处理</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center">1002</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-28/pat_1002/">A+B for Polynomials</a></td><td style="text-align:center">多项式求和</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center">1003</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-29/pat_1003/">Emergency</a></td><td style="text-align:center">图，最短路径</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PAT-甲级&quot;&gt;&lt;a href=&quot;#PAT-甲级&quot; class=&quot;headerlink&quot; title=&quot;PAT 甲级&quot;&gt;&lt;/a&gt;PAT 甲级&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;No.&lt;/t
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="index" scheme="https://iris-cyy.github.io/categories/PAT/index/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1002 A+B for Polynomials</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-01-28/pat_1002/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-01-28/pat_1002/</id>
    <published>2020-01-28T12:22:18.000Z</published>
    <updated>2020-01-29T07:35:57.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>This time, you are supposed to find <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: $K \; N_1 \; a_{N_1} \; N_2 \; a_{N_2} \; … \; N_K \; a_{N_K}$, where $K$ is the number of nonzero terms in the polynomial, $N_i$ and $a_{N_i} (i=1,2,⋯,K)$ are the exponents and coefficients, respectively. It is given that $1≤K≤10$，$0≤N_K&lt;⋯&lt;N_2&lt;N_1≤1000$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>2  1  2.4  0  3.2<br>2  2  1.5  1  0.5   </p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>3  2  1.5  1  2.9  0  3.2</p></blockquote><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>使用数组来存储结果多项式的信息，数组的下标为指数，值为系数。</p><p>题目中要求保留两位小数，方法如下：</p><p><code>cout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; ...</code></p><p>实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> poly[MAX];</span><br><span class="line">    <span class="keyword">int</span> first = MAX;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAX; i++)&#123;</span><br><span class="line">        poly[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n1, n2;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">    <span class="keyword">double</span> coe;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n1; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; <span class="built_in">exp</span> &gt;&gt; coe;</span><br><span class="line">        poly[<span class="built_in">exp</span>] += coe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n2; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; <span class="built_in">exp</span> &gt;&gt; coe;</span><br><span class="line">        poly[<span class="built_in">exp</span>] += coe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MAX<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first == MAX)&#123;</span><br><span class="line">                first = i;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">if</span>(cnt != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=first; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; poly[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;This time, you are supposed to find &lt;em&gt;A&lt;/em&gt;+&lt;em
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】External Sorting</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/external_sort/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/external_sort/</id>
    <published>2020-01-27T04:56:59.000Z</published>
    <updated>2020-01-27T05:02:45.386Z</updated>
    
    <content type="html"><![CDATA[<p>number of passes: $1+ \lceil log_2 (N/M) \rceil$<br>seek time: O(number of passes)</p><p><strong>a k-way merge</strong><br>number of passes: $1+ \lceil log_k (N/M) \rceil$<br>require 2k tapes</p><p><strong>polyphase merge</strong><br>require k+1 tapes</p><p><strong>Huffman tree</strong><br>Total merge time = O ( the weighted external path length )</p><p>If the number of runs is a Fibonacci number $F_N$, then the best way to distribute them is to split them into $F_{N–1}$ and $F_{N–2}$ .<br>For a k-way merge, $F_N^{(k)} = F_{N-1}^{(k)}+F_{N-2}^{(k)}$, where $F_N^{(k)}=0 ; (0 \leq N \leq k-2), F_{k-1}^{(k)}=1$<br><br></p><hr><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><ol><li><p><img src="/images/ads/external-sort/ex1.png" alt="ex1"></p></li><li></li></ol><p><img src="/images/ads/external-sort/ex2.png" alt="ex2"></p><p>hardware</p><p>外部排序主要开销在I/O上</p><ol start="3"><li><p><img src="/images/ads/external-sort/ex3.png" alt="ex3"></p></li></ol><p>$\lceil 1+log_2(100,000,000 \times 256 \div 128 \div 10^6) \rceil = 9$ </p><ol start="4"><li><p><img src="/images/ads/external-sort/ex4.png" alt="ex4"></p></li></ol><p>Huffman tree，每次挑最短的两条链合并</p><ol start="5"><li><p><img src="/images/ads/external-sort/ex5.png" alt="ex5"></p></li></ol><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/ailunlee/article/details/84548950" target="_blank" rel="noopener">https://blog.csdn.net/ailunlee/article/details/84548950</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;number of passes: $1+ \lceil log_2 (N/M) \rceil$&lt;br&gt;seek time: O(number of passes)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a k-way merge&lt;/strong&gt;&lt;br&gt;number of pas
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Splay Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/splay/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/splay/</id>
    <published>2020-01-27T04:55:12.000Z</published>
    <updated>2020-01-27T04:56:30.527Z</updated>
    
    <content type="html"><![CDATA[<p>  将被查找的节点置于根的位置</p><p><img src="/images/ads/splay/sp1.png" alt="sp1"></p><h2 id="deletion"><a href="#deletion" class="headerlink" title="deletion"></a>deletion</h2><ul><li>find x</li><li>remove x</li><li>findmax ( $T_L$ )</li><li>make $T_R$ the right child of the root of $T_L$</li></ul><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51512589" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51512589</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  将被查找的节点置于根的位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ads/splay/sp1.png&quot; alt=&quot;sp1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;deletion&quot;&gt;&lt;a href=&quot;#deletion&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Amortized Analysis</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/amortized/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/amortized/</id>
    <published>2020-01-27T04:52:51.000Z</published>
    <updated>2020-01-27T04:54:44.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ads/amortizedam1.png" alt="am1"></p><ul><li>聚合分析</li><li>核算法</li><li>势能法<br>$\hat c_i - c_i = credit = \Phi (D_i)- \Phi (D_{i-1})$<br>$\sum \hat c_i = \sum c_i + \Phi(D-i) - \Phi(D_{i-1})$</li></ul><p>合并两个skew heap摊还时间为O(logN)<br><br></p><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/images/ads/amortized/ex1.png" alt="ex1"><br>C<br>A light child has at most half weight of its parents. Thus if there are k light nodes not including x along the path from x to y, $w(y) \leq w(x)/2^k$ ( $k \leq log \frac{w(x)}{w(y)}$ )<br>$\Phi$ = the total number of right heavy nodes it contains<br>By lemma 2, any path in a skew heap contains only O(logn) light nodes<br>Any heavy node on such a path is converted from right to left by causing a drop of one in the potential<br>Two heaps $h_1$ and $h_2$, containing $n_1$ and $n_2$ items<br>$n = n_1 + n_2$<br>By lemma 1, the total number of light nodes is at most $2 \lfloor logn \rfloor -1$<br>Let $k_1$ and $k_2$ be the number of heavy nodes on the right path of $h_1$ and $h_2$, and $k_3$ be the number of nodes that become right heavy children of nodes on the merge path.<br>By lemma 2, $k_3 \leq \lfloor logn \rfloor$<br>the number of node on the merge path is at most<br>$c_i \leq 2+ \lfloor logn_1 \rfloor + k_1 + \lfloor logn_2 \rfloor + k_2 \leq  1 + 2 \lfloor logn \rfloor + k_1 + k_2$<br>The increase in the potential caused by the merge is $\Delta \Phi = k_3 - k_2 - k_1 = \lfloor logn \rfloor - k_1 - k_2$<br>This the amortized is at most $3 \lfloor logn \rfloor + 1​$</p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51517446" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51517446</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ads/amortizedam1.png&quot; alt=&quot;am1&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚合分析&lt;/li&gt;
&lt;li&gt;核算法&lt;/li&gt;
&lt;li&gt;势能法&lt;br&gt;$\hat c_i - c_i = credit = \Phi (D_i)- 
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Red-Black Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/rbtree/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/rbtree/</id>
    <published>2020-01-27T04:44:12.000Z</published>
    <updated>2020-01-27T04:52:23.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A red-black tree is a binary search tree that satisfies the following red-black properties:</p><p>(1)  Every node is either red or black.</p><p>(2)  The root is black.</p><p>(3)  Every leaf (NIL) is black.</p><p>(4)  If a node is red, then both its children are black.</p><p>(5)  For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.</p><p>The <strong>black-height</strong> of any node x, denoted by bh(x), is the number of black nodes on any simple path from x (x not included) down to a leaf.  bh(Tree) = bh(root).</p><p><strong>A red-black tree with n internal nodes has height at most 2log(n+1).</strong></p><p>红黑树没有左右子树高度差小于等于1的条件！</p><p><img src="/images/ads/rbTree/rb1.png" alt="rb1"></p><h2 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h2><p>考虑它的叔叔，维护的主要是颜色（性质4）<br>bottom-up</p><p>情况1：N为红，P为红（GP一定为黑），U为红。<br>令X = T.root,在向下遍历的过程中，我们如果遇到X.right.color = x.left.color = RED时我们将x与它孩子的颜色翻转，即把x涂成红色，把x.right和x.left涂成黑色。如果x的父亲为黑色，没有违反性质；如果x的父亲为红色，那么可以把x当成新插入的红色结点N，那么只需要处理情况2即可。</p><p>情况2：N，P都为红（GP一定为黑)，U为黑<br>此情况可分为镜像的四种，可通过旋转转为如下<br><img src="/images/ads/rbTree/rb2.png" width=10%><br>通过交换GP与P的颜色，然后调用right_rotate(T,GP)，此时不再违反任何性质。<br><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RB-INSERT-FIXUP(T,z)</span></span><br><span class="line"><span class="keyword">while</span> z.p.color == RED </span><br><span class="line">  <span class="keyword">if</span> z.p == z.p.p.left</span><br><span class="line">    y = z.p.p.right </span><br><span class="line">    <span class="keyword">if</span> y.color == RED</span><br><span class="line">      z.p.color = BLACK   <span class="comment">//case 1</span></span><br><span class="line">      y.color = BLACK     <span class="comment">//case 1</span></span><br><span class="line">      z.p.p.color = RED   <span class="comment">//case 1</span></span><br><span class="line">      z = z.p.p           <span class="comment">//case 1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> z == z.p.right</span><br><span class="line">      z = z.p             <span class="comment">//case 2</span></span><br><span class="line">      LEFT-ROTATE(T,z)    <span class="comment">//case 2</span></span><br><span class="line">    z.p.color = BLACK     <span class="comment">//case 3</span></span><br><span class="line">    z.p.p.color = RED     <span class="comment">//case 3</span></span><br><span class="line">    RIGHT-ROTATE(T,z.p.p) <span class="comment">//case 3</span></span><br><span class="line">  <span class="keyword">else</span> (same as then clause with <span class="string">"right"</span> <span class="keyword">and</span> <span class="string">"left"</span> exchanged</span><br><span class="line">T.root.color = BLACK</span><br></pre></td></tr></table></figure><p><img src="/images/ads/rbTree/rb3.png" alt="rb3"></p><p>(a) A node z after insertion. Because both z and its parent z.p are red, a violation of property 4 occurs. Since z’s uncle y is red, case 1 in the code applies. We recolor nodes and move the pointer z up the tree, resulting in the tree shown in (b). Once again, z and its parent are both red, but z’s uncle y is black. Since z is the right child of z.p, case 2 applies. We perform a left rotation, and the tree that results is shown in (c). Now, z is the left child of its parent, and case 3 applies. Recoloring and right rotation yield the tree in (d), which is a legal red-black tree.</p><p><strong>Time Complexity: O(log n)</strong></p><h2 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h2><p>考虑它的兄弟,维护的主要是黑色结点数量（性质5）。<br>top-down<br><strong>Time complexity: O(log n)</strong><br><img src="/images/ads/rbTree/rb4.png" alt="rb4"></p><br><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED      0    <span class="comment">// 红色节点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLACK    1    <span class="comment">// 黑色节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> color;        <span class="comment">// 颜色(RED 或 BLACK)</span></span><br><span class="line">    Type   key;                    <span class="comment">// 关键字(键值)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">left</span>;</span>    <span class="comment">// 左孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">right</span>;</span>    <span class="comment">// 右孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">parent</span>;</span>    <span class="comment">// 父结点</span></span><br><span class="line">&#125;Node, *RBTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的根</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span>&#123;</span></span><br><span class="line">    Node *node;</span><br><span class="line">&#125;RBRoot;</span><br></pre></td></tr></table></figure><h3 id="left-rotation"><a href="#left-rotation" class="headerlink" title="left-rotation"></a>left-rotation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(x)进行左旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左旋示意图(对节点x进行左旋)：</span></span><br><span class="line"><span class="comment"> *      px                              px</span></span><br><span class="line"><span class="comment"> *     /                               /</span></span><br><span class="line"><span class="comment"> *    x                               y                </span></span><br><span class="line"><span class="comment"> *   /  \      --(左旋)--&gt;           / \                #</span></span><br><span class="line"><span class="comment"> *  lx   y                          x  ry     </span></span><br><span class="line"><span class="comment"> *     /   \                       /  \</span></span><br><span class="line"><span class="comment"> *    ly   ry                     lx  ly  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_left_rotate</span><span class="params">(RBRoot *root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x的右孩子为y</span></span><br><span class="line">    Node *y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></span><br><span class="line">    <span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        y-&gt;left-&gt;parent = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></span><br><span class="line">    y-&gt;parent = x-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = y;            // 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">        root-&gt;node = y;            <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;parent-&gt;left == x)</span><br><span class="line">            x-&gt;parent-&gt;left = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x-&gt;parent-&gt;right = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 “x” 设为 “y的左孩子”</span></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    <span class="comment">// 将 “x的父节点” 设为 “y”</span></span><br><span class="line">    x-&gt;parent = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="right-rotation"><a href="#right-rotation" class="headerlink" title="right-rotation"></a>right-rotation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(y)进行右旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 右旋示意图(对节点y进行左旋)：</span></span><br><span class="line"><span class="comment"> *            py                               py</span></span><br><span class="line"><span class="comment"> *           /                                /</span></span><br><span class="line"><span class="comment"> *          y                                x                  </span></span><br><span class="line"><span class="comment"> *         /  \      --(右旋)--&gt;            /  \                     #</span></span><br><span class="line"><span class="comment"> *        x   ry                           lx   y  </span></span><br><span class="line"><span class="comment"> *       / \                                   / \                   #</span></span><br><span class="line"><span class="comment"> *      lx  rx                                rx  ry</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_right_rotate</span><span class="params">(RBRoot *root, Node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x是当前节点的左孩子。</span></span><br><span class="line">    Node *x = y-&gt;left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></span><br><span class="line">    <span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></span><br><span class="line">    y-&gt;left = x-&gt;right;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        x-&gt;right-&gt;parent = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></span><br><span class="line">    x-&gt;parent = y-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;parent == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = x;            // 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">        root-&gt;node = x;            <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == y-&gt;parent-&gt;right)</span><br><span class="line">            y-&gt;parent-&gt;right = x;    <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;parent-&gt;left = x;    <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y” 设为 “x的右孩子”</span></span><br><span class="line">    x-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父节点” 设为 “x”</span></span><br><span class="line">    y-&gt;parent = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加节点：将节点(node)插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *y = <span class="literal">NULL</span>;</span><br><span class="line">    Node *x = root-&gt;node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    rb_parent(node) = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; y-&gt;key)</span><br><span class="line">            y-&gt;left = node;                <span class="comment">// 情况2：若“node所包含的值” &lt; “y所包含的值”，则将node设为“y的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;right = node;            <span class="comment">// 情况3：(“node所包含的值” &gt;= “y所包含的值”)将node设为“y的右孩子” </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;node = node;                <span class="comment">// 情况1：若y是空节点，则将node设为根</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置节点的颜色为红色</span></span><br><span class="line">    node-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></span><br><span class="line">    rbtree_insert_fixup(root, node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert-fixup"><a href="#insert-fixup" class="headerlink" title="insert-fixup"></a>insert-fixup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树插入修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert_fixup</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *parent, *gparent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></span><br><span class="line">    <span class="keyword">while</span> ((parent = rb_parent(node)) &amp;&amp; rb_is_red(parent))</span><br><span class="line">    &#123;</span><br><span class="line">        gparent = rb_parent(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若“父节点”是“祖父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">if</span> (parent == gparent-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;right;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;right == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_right_rotate(root, gparent);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span><span class="comment">//若“z的父节点”是“z的祖父节点的右孩子”</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;left;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_left_rotate(root, gparent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将根节点设为黑色</span></span><br><span class="line">    rb_set_black(root-&gt;node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     node 删除的结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbtree_delete</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *child, *parent;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></span><br><span class="line">    <span class="keyword">if</span> ( (node-&gt;left!=<span class="literal">NULL</span>) &amp;&amp; (node-&gt;right!=<span class="literal">NULL</span>) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></span><br><span class="line">        <span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></span><br><span class="line">        Node *replace = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取后继节点</span></span><br><span class="line">        replace = replace-&gt;right;</span><br><span class="line">        <span class="keyword">while</span> (replace-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            replace = replace-&gt;left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></span><br><span class="line">        <span class="keyword">if</span> (rb_parent(node))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rb_parent(node)-&gt;left == node)</span><br><span class="line">                rb_parent(node)-&gt;left = replace;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rb_parent(node)-&gt;right = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="comment">// "node节点"是根节点，更新根节点。</span></span><br><span class="line">            root-&gt;node = replace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></span><br><span class="line">        <span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></span><br><span class="line">        child = replace-&gt;right;</span><br><span class="line">        parent = rb_parent(replace);</span><br><span class="line">        <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">        color = rb_color(replace);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></span><br><span class="line">        <span class="keyword">if</span> (parent == node)</span><br><span class="line">        &#123;</span><br><span class="line">            parent = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// child不为空</span></span><br><span class="line">            <span class="keyword">if</span> (child)</span><br><span class="line">                rb_set_parent(child, parent);</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line"></span><br><span class="line">            replace-&gt;right = node-&gt;right;</span><br><span class="line">            rb_set_parent(node-&gt;right, replace);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replace-&gt;parent = node-&gt;parent;</span><br><span class="line">        replace-&gt;color = node-&gt;color;</span><br><span class="line">        replace-&gt;left = node-&gt;left;</span><br><span class="line">        node-&gt;left-&gt;parent = replace;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">            rbtree_delete_fixup(root, child, parent);</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left !=<span class="literal">NULL</span>)</span><br><span class="line">        child = node-&gt;left;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        child = node-&gt;right;</span><br><span class="line"></span><br><span class="line">    parent = node-&gt;parent;</span><br><span class="line">    <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">    color = node-&gt;color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child)</span><br><span class="line">        child-&gt;parent = parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "node节点"不是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent-&gt;right = child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root-&gt;node = child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">        rbtree_delete_fixup(root, child, parent);</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete-fixup"><a href="#delete-fixup" class="headerlink" title="delete-fixup"></a>delete-fixup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树删除修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 待修正的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_delete_fixup</span><span class="params">(RBRoot *root, Node *node, Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((!node || rb_is_black(node)) &amp;&amp; node != root-&gt;node)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;right;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;right || rb_is_black(other-&gt;right))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;left);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_right_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;right);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;left || rb_is_black(other-&gt;left))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是黑色，右孩子为红色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;right);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_left_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的左孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;left);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        rb_set_black(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rbtree-h"><a href="#rbtree-h" class="headerlink" title="rbtree.h"></a>rbtree.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _RED_BLACK_TREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _RED_BLACK_TREE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED        0    <span class="comment">// 红色节点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLACK    1    <span class="comment">// 黑色节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> color;        <span class="comment">// 颜色(RED 或 BLACK)</span></span><br><span class="line">    Type   key;                    <span class="comment">// 关键字(键值)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">left</span>;</span>    <span class="comment">// 左孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">right</span>;</span>    <span class="comment">// 右孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">parent</span>;</span>    <span class="comment">// 父结点</span></span><br><span class="line">&#125;Node, *RBTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的根</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span>&#123;</span></span><br><span class="line">    Node *node;</span><br><span class="line">&#125;RBRoot;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建红黑树，返回"红黑树的根"！</span></span><br><span class="line"><span class="function">RBRoot* <span class="title">create_rbtree</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁红黑树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点插入到红黑树中。插入成功，返回0；失败返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除结点(key为节点的值)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"><span class="comment">// 中序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"><span class="comment">// 后序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (递归实现)查找"红黑树"中键值为key的节点。找到的话，返回0；否则，返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"><span class="comment">// (非递归实现)查找"红黑树"中键值为key的节点。找到的话，返回0；否则，返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iterative_rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回最小结点的值(将值保存到val中)。找到的话，返回0；否则返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_minimum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"><span class="comment">// 返回最大结点的值(将值保存到val中)。找到的话，返回0；否则返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_maximum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印红黑树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Rbtree-c"><a href="#Rbtree-c" class="headerlink" title="Rbtree.c"></a>Rbtree.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C语言实现的红黑树(Red Black Tree)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> * @date 2013/11/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rbtree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_parent(r)   ((r)-&gt;parent)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_color(r) ((r)-&gt;color)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_is_red(r)   ((r)-&gt;color==RED)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_is_black(r)  ((r)-&gt;color==BLACK)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_black(r)  do &#123; (r)-&gt;color = BLACK; &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_red(r)  do &#123; (r)-&gt;color = RED; &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_parent(r,p)  do &#123; (r)-&gt;parent = (p); &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_color(r,c)  do &#123; (r)-&gt;color = (c); &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建红黑树，返回"红黑树的根"！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">RBRoot* <span class="title">create_rbtree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RBRoot *root = (RBRoot *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RBRoot));</span><br><span class="line">    root-&gt;node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 前序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">        preorder(tree-&gt;left);</span><br><span class="line">        preorder(tree-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder_rbtree</span><span class="params">(RBRoot *root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        preorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 中序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inorder(tree-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">        inorder(tree-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_rbtree</span><span class="params">(RBRoot *root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        inorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 后序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        postorder(tree-&gt;left);</span><br><span class="line">        postorder(tree-&gt;right);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        postorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (递归实现)查找"红黑树x"中键值为key的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">search</span><span class="params">(RBTree x, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="literal">NULL</span> || x-&gt;key==key)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; x-&gt;key)</span><br><span class="line">        <span class="keyword">return</span> search(x-&gt;left, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> search(x-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        <span class="keyword">return</span> search(root-&gt;node, key)? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (非递归实现)查找"红黑树x"中键值为key的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">iterative_search</span><span class="params">(RBTree x, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((x!=<span class="literal">NULL</span>) &amp;&amp; (x-&gt;key!=key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iterative_rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        <span class="keyword">return</span> iterative_search(root-&gt;node, key) ? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 查找最小结点：返回tree为根结点的红黑树的最小结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">minimum</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tree-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        tree = tree-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_minimum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        node = minimum(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    *val = node-&gt;key;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 查找最大结点：返回tree为根结点的红黑树的最大结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">maximum</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tree-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        tree = tree-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_maximum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        node = maximum(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    *val = node-&gt;key;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 找结点(x)的后继结点。即，查找"红黑树中数据值大于该结点"的"最小结点"。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">rbtree_successor</span><span class="params">(RBTree x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果x存在右孩子，则"x的后继结点"为 "以其右孩子为根的子树的最小结点"。</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> minimum(x-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x没有右孩子。则x有以下两种可能：</span></span><br><span class="line">    <span class="comment">// (01) x是"一个左孩子"，则"x的后继结点"为 "它的父结点"。</span></span><br><span class="line">    <span class="comment">// (02) x是"一个右孩子"，则查找"x的最低的父结点，并且该父结点要具有左孩子"，找到的这个"最低的父结点"就是"x的后继结点"。</span></span><br><span class="line">    Node* y = x-&gt;parent;</span><br><span class="line">    <span class="keyword">while</span> ((y!=<span class="literal">NULL</span>) &amp;&amp; (x==y-&gt;right))</span><br><span class="line">    &#123;</span><br><span class="line">        x = y;</span><br><span class="line">        y = y-&gt;parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 找结点(x)的前驱结点。即，查找"红黑树中数据值小于该结点"的"最大结点"。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">rbtree_predecessor</span><span class="params">(RBTree x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果x存在左孩子，则"x的前驱结点"为 "以其左孩子为根的子树的最大结点"。</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> maximum(x-&gt;left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x没有左孩子。则x有以下两种可能：</span></span><br><span class="line">    <span class="comment">// (01) x是"一个右孩子"，则"x的前驱结点"为 "它的父结点"。</span></span><br><span class="line">    <span class="comment">// (01) x是"一个左孩子"，则查找"x的最低的父结点，并且该父结点要具有右孩子"，找到的这个"最低的父结点"就是"x的前驱结点"。</span></span><br><span class="line">    Node* y = x-&gt;parent;</span><br><span class="line">    <span class="keyword">while</span> ((y!=<span class="literal">NULL</span>) &amp;&amp; (x==y-&gt;left))</span><br><span class="line">    &#123;</span><br><span class="line">        x = y;</span><br><span class="line">        y = y-&gt;parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(x)进行左旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左旋示意图(对节点x进行左旋)：</span></span><br><span class="line"><span class="comment"> *      px                              px</span></span><br><span class="line"><span class="comment"> *     /                               /</span></span><br><span class="line"><span class="comment"> *    x                               y                </span></span><br><span class="line"><span class="comment"> *   /  \      --(左旋)--&gt;           / \                #</span></span><br><span class="line"><span class="comment"> *  lx   y                          x  ry     </span></span><br><span class="line"><span class="comment"> *     /   \                       /  \</span></span><br><span class="line"><span class="comment"> *    ly   ry                     lx  ly  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_left_rotate</span><span class="params">(RBRoot *root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x的右孩子为y</span></span><br><span class="line">    Node *y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></span><br><span class="line">    <span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        y-&gt;left-&gt;parent = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></span><br><span class="line">    y-&gt;parent = x-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = y;            // 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">        root-&gt;node = y;            <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;parent-&gt;left == x)</span><br><span class="line">            x-&gt;parent-&gt;left = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x-&gt;parent-&gt;right = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 “x” 设为 “y的左孩子”</span></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    <span class="comment">// 将 “x的父节点” 设为 “y”</span></span><br><span class="line">    x-&gt;parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(y)进行右旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 右旋示意图(对节点y进行左旋)：</span></span><br><span class="line"><span class="comment"> *            py                               py</span></span><br><span class="line"><span class="comment"> *           /                                /</span></span><br><span class="line"><span class="comment"> *          y                                x                  </span></span><br><span class="line"><span class="comment"> *         /  \      --(右旋)--&gt;            /  \                     #</span></span><br><span class="line"><span class="comment"> *        x   ry                           lx   y  </span></span><br><span class="line"><span class="comment"> *       / \                                   / \                   #</span></span><br><span class="line"><span class="comment"> *      lx  rx                                rx  ry</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_right_rotate</span><span class="params">(RBRoot *root, Node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x是当前节点的左孩子。</span></span><br><span class="line">    Node *x = y-&gt;left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></span><br><span class="line">    <span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></span><br><span class="line">    y-&gt;left = x-&gt;right;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        x-&gt;right-&gt;parent = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></span><br><span class="line">    x-&gt;parent = y-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;parent == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = x;            // 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">        root-&gt;node = x;            <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == y-&gt;parent-&gt;right)</span><br><span class="line">            y-&gt;parent-&gt;right = x;    <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;parent-&gt;left = x;    <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y” 设为 “x的右孩子”</span></span><br><span class="line">    x-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父节点” 设为 “x”</span></span><br><span class="line">    y-&gt;parent = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树插入修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert_fixup</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *parent, *gparent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></span><br><span class="line">    <span class="keyword">while</span> ((parent = rb_parent(node)) &amp;&amp; rb_is_red(parent))</span><br><span class="line">    &#123;</span><br><span class="line">        gparent = rb_parent(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若“父节点”是“祖父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">if</span> (parent == gparent-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;right;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;right == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_right_rotate(root, gparent);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span><span class="comment">//若“z的父节点”是“z的祖父节点的右孩子”</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;left;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_left_rotate(root, gparent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将根节点设为黑色</span></span><br><span class="line">    rb_set_black(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加节点：将节点(node)插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *y = <span class="literal">NULL</span>;</span><br><span class="line">    Node *x = root-&gt;node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    rb_parent(node) = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; y-&gt;key)</span><br><span class="line">            y-&gt;left = node;                <span class="comment">// 情况2：若“node所包含的值” &lt; “y所包含的值”，则将node设为“y的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;right = node;            <span class="comment">// 情况3：(“node所包含的值” &gt;= “y所包含的值”)将node设为“y的右孩子” </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;node = node;                <span class="comment">// 情况1：若y是空节点，则将node设为根</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置节点的颜色为红色</span></span><br><span class="line">    node-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></span><br><span class="line">    rbtree_insert_fixup(root, node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     key 是键值。</span></span><br><span class="line"><span class="comment"> *     parent 是父结点。</span></span><br><span class="line"><span class="comment"> *     left 是左孩子。</span></span><br><span class="line"><span class="comment"> *     right 是右孩子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">create_rbtree_node</span><span class="params">(Type key, Node *parent, Node *left, Node* right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    p-&gt;left = left;</span><br><span class="line">    p-&gt;right = right;</span><br><span class="line">    p-&gt;parent = parent;</span><br><span class="line">    p-&gt;color = BLACK; <span class="comment">// 默认为黑色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 新建结点(节点键值为key)，并将其插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     key 插入结点的键值</span></span><br><span class="line"><span class="comment"> * 返回值：</span></span><br><span class="line"><span class="comment"> *     0，插入成功</span></span><br><span class="line"><span class="comment"> *     -1，插入失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;    <span class="comment">// 新建结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许插入相同键值的节点。</span></span><br><span class="line">    <span class="comment">// (若想允许插入相同键值的节点，注释掉下面两句话即可！)</span></span><br><span class="line">    <span class="keyword">if</span> (search(root-&gt;node, key) != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果新建结点失败，则返回。</span></span><br><span class="line">    <span class="keyword">if</span> ((node=create_rbtree_node(key, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    rbtree_insert(root, node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树删除修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 待修正的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_delete_fixup</span><span class="params">(RBRoot *root, Node *node, Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((!node || rb_is_black(node)) &amp;&amp; node != root-&gt;node)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;right;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;right || rb_is_black(other-&gt;right))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;left);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_right_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;right);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;left || rb_is_black(other-&gt;left))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;right);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_left_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;left);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        rb_set_black(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     node 删除的结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbtree_delete</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *child, *parent;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></span><br><span class="line">    <span class="keyword">if</span> ( (node-&gt;left!=<span class="literal">NULL</span>) &amp;&amp; (node-&gt;right!=<span class="literal">NULL</span>) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></span><br><span class="line">        <span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></span><br><span class="line">        Node *replace = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取后继节点</span></span><br><span class="line">        replace = replace-&gt;right;</span><br><span class="line">        <span class="keyword">while</span> (replace-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            replace = replace-&gt;left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></span><br><span class="line">        <span class="keyword">if</span> (rb_parent(node))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rb_parent(node)-&gt;left == node)</span><br><span class="line">                rb_parent(node)-&gt;left = replace;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rb_parent(node)-&gt;right = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="comment">// "node节点"是根节点，更新根节点。</span></span><br><span class="line">            root-&gt;node = replace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></span><br><span class="line">        <span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></span><br><span class="line">        child = replace-&gt;right;</span><br><span class="line">        parent = rb_parent(replace);</span><br><span class="line">        <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">        color = rb_color(replace);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></span><br><span class="line">        <span class="keyword">if</span> (parent == node)</span><br><span class="line">        &#123;</span><br><span class="line">            parent = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// child不为空</span></span><br><span class="line">            <span class="keyword">if</span> (child)</span><br><span class="line">                rb_set_parent(child, parent);</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line"></span><br><span class="line">            replace-&gt;right = node-&gt;right;</span><br><span class="line">            rb_set_parent(node-&gt;right, replace);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replace-&gt;parent = node-&gt;parent;</span><br><span class="line">        replace-&gt;color = node-&gt;color;</span><br><span class="line">        replace-&gt;left = node-&gt;left;</span><br><span class="line">        node-&gt;left-&gt;parent = replace;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">            rbtree_delete_fixup(root, child, parent);</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left !=<span class="literal">NULL</span>)</span><br><span class="line">        child = node-&gt;left;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        child = node-&gt;right;</span><br><span class="line"></span><br><span class="line">    parent = node-&gt;parent;</span><br><span class="line">    <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">    color = node-&gt;color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child)</span><br><span class="line">        child-&gt;parent = parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "node节点"不是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent-&gt;right = child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root-&gt;node = child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">        rbtree_delete_fixup(root, child, parent);</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除键值为key的结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     key 键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *z, *node; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((z = search(root-&gt;node, key)) != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_delete(root, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 销毁红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_destroy</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tree-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(tree-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (tree-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(tree-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 打印"红黑树"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * tree       -- 红黑树的节点</span></span><br><span class="line"><span class="comment"> * key        -- 节点的键值 </span></span><br><span class="line"><span class="comment"> * direction  --  0，表示该节点是根节点;</span></span><br><span class="line"><span class="comment"> *               -1，表示该节点是它的父结点的左孩子;</span></span><br><span class="line"><span class="comment"> *                1，表示该节点是它的父结点的右孩子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_print</span><span class="params">(RBTree tree, Type key, <span class="keyword">int</span> direction)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(direction==<span class="number">0</span>)    <span class="comment">// tree是根节点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d(B) is root\n"</span>, tree-&gt;key);</span><br><span class="line">        <span class="keyword">else</span>                <span class="comment">// tree是分支节点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d(%s) is %2d's %6s child\n"</span>, tree-&gt;key, rb_is_red(tree)?<span class="string">"R"</span>:<span class="string">"B"</span>, key, direction==<span class="number">1</span>?<span class="string">"right"</span> : <span class="string">"left"</span>);</span><br><span class="line"></span><br><span class="line">        rbtree_print(tree-&gt;left, tree-&gt;key, <span class="number">-1</span>);</span><br><span class="line">        rbtree_print(tree-&gt;right,tree-&gt;key,  <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root!=<span class="literal">NULL</span> &amp;&amp; root-&gt;node!=<span class="literal">NULL</span>)</span><br><span class="line">        rbtree_print(root-&gt;node, root-&gt;node-&gt;key, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol><li><blockquote><p>In the red-black tree that results after successively inserting the keys 41; 38; 31; 12; 19; 8 into an initially empty red-black tree, which one of the following statements is FALSE? (2分)<br>B<br>A. 38 is the root<br>B. 19 and 41 are siblings, and they are both red<br>C. 12 and 31 are siblings, and they are both black<br>D. 8 is red</p></blockquote><p><img src="../../../../../../images/ads/rbTree/ex1.png" alt="ex1"></p></li><li><blockquote><p>After deleting 15 from the red-black tree given in the figure, which one of the following statements must be FALSE? (2分)<br>C</p><img src="../../../../../../" width=20%><p>A. 11 is the parent of 17, and 11 is black<br>B. 17 is the parent of 11, and 11 is red<br>C. 11 is the parent of 17, and 11 is red<br>D. 17 is the parent of 11, and 17 is black</p></blockquote></li></ol><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/skywang12345/p/3624177.html" target="_blank" rel="noopener">https://www.cnblogs.com/skywang12345/p/3624177.html</a></p><p><a href="https://blog.csdn.net/weewqrer/article/details/51866488" target="_blank" rel="noopener">https://blog.csdn.net/weewqrer/article/details/51866488</a></p><p><a href="https://www.cnblogs.com/tongy0/p/5460623.html" target="_blank" rel="noopener">https://www.cnblogs.com/tongy0/p/5460623.html</a></p><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51530558" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51530558</a></p><p>《Introduction to Algorithms》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;A red-black tree is a binary search tr
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】B+ Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/bptree/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/bptree/</id>
    <published>2020-01-27T04:38:56.000Z</published>
    <updated>2020-01-27T04:43:26.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A B+ tree of order M is a tree with the following structural properties:<br>(1)  The root is either a leaf or has between 2 and M children.<br>(2)  All nonleaf nodes (except the root) have between $\lceil M/2 \rceil$ and M children.<br>(3)  All leaves are at the same depth.<br>Assume each nonroot leaf also has between $\lceil M/2 \rceil$ and M children<br><br></p><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol><li><blockquote><p>Insert 3, 1, 4, 5, 9, 2, 6, 8, 7, 0 into an initially empty 2-3 tree (with splitting). Which one of the following statements is FALSE? (2分)<br>A<br>A. 7 and 8 are in the same node<br>B. the parent of the node containing 5 has 3 children<br>C. the first key stored in the root is 6<br>D. there are 5 leaf nodes</p></blockquote><p><img src="/images/ads/bpTree/ex1.jpeg" alt="ex1"></p></li><li></li></ol><p><img src="/images/ads/bpTree/ex2.png" alt="ex2"></p><ol start="3"><li><p><img src="/images/ads/bpTree/ex3.png" alt="ex3"></p></li></ol><br><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullzx/p/8729425.html</a></p><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51557672?utm_source=blogxgwz2" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51557672?utm_source=blogxgwz2</a><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;A B+ tree of order M is a tree with th
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Inverted File Index</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/inverted_file_index/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/inverted_file_index/</id>
    <published>2020-01-27T04:32:16.000Z</published>
    <updated>2020-01-27T04:38:24.375Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while ( read a document D ) &#123;</span><br><span class="line">    while ( read a term T in D ) &#123;</span><br><span class="line">        if ( Find( Dictionary, T ) &#x3D;&#x3D; false )</span><br><span class="line">            Insert( Dictionary, T );</span><br><span class="line">        Get T’s posting list;</span><br><span class="line">        Insert a node to T’s posting list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Write the inverted index to disk;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">BlockCnt &#x3D; 0; </span><br><span class="line">while ( read a document D ) &#123;</span><br><span class="line">  while ( read a term T in D ) &#123;</span><br><span class="line">    if ( out of memory ) &#123;</span><br><span class="line">      Write BlockIndex[BlockCnt] to disk;</span><br><span class="line">      BlockCnt ++;</span><br><span class="line">      FreeMemory;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( Find( Dictionary, T ) &#x3D;&#x3D; false )</span><br><span class="line">      Insert( Dictionary, T );</span><br><span class="line">    Get T’s posting list;</span><br><span class="line">    Insert a node to T’s posting list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">for ( i&#x3D;0; i&lt;BlockCnt; i++ )</span><br><span class="line">  Merge( InvertedIndex, BlockIndex[i] );</span><br></pre></td></tr></table></figure><br><h2 id="Distributed-Index"><a href="#Distributed-Index" class="headerlink" title="Distributed Index"></a>Distributed Index</h2><ul><li><p>Term-partitioned</p><img src="/images/ads/ifi/ind1.png" width=50%></li><li><p>Document-partitioned index</p><img src="/images/ads/ifi/ind2.png" width=50%></li></ul><h2 id="Measures-for-a-Search-Engine"><a href="#Measures-for-a-Search-Engine" class="headerlink" title="Measures for a Search Engine"></a>Measures for a Search Engine</h2><ul><li>How fast does it index</li><li>How fast does it search</li><li>Expressiveness of query language</li></ul><p><strong>Data Retrieval Performance Evaluation (after establishing correctness)</strong></p><ul><li>Response time</li><li>Index space</li></ul><p><strong>Information Retrieval Performance Evaluation</strong></p><ul><li>How relevant is the answer set?</li></ul><br><table><thead><tr><th></th><th><strong>Relevant</strong></th><th><strong>Irrelevant</strong></th></tr></thead><tbody><tr><td><strong>Retrieved</strong></td><td>$R_R$</td><td>$I_R$</td></tr><tr><td><strong>Not Retrieved</strong></td><td>$R_N$</td><td>$I_N$</td></tr></tbody></table><p>Precision:  $P=R_R/(R_R+I_R)$</p><p>Recall:  $R=R_R/(R_R+R_N)$<br><br></p><hr><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><p><img src="/images/ads/ifi/ex1.png" alt="ex1"></p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51559937" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51559937</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Leftist Heap</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/leftist/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/leftist/</id>
    <published>2020-01-26T14:30:53.000Z</published>
    <updated>2020-01-26T15:39:18.801Z</updated>
    
    <content type="html"><![CDATA[<p>二叉堆的合并需要耗费O(N)的代价，而leftist heap只需O(logN)</p><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Npl (X)<br>The null path length, Npl(X), of any node X is the length of the shortest path from X to a node without two children. Define Npl(NULL) = –1.<br>也就是说，npl是从该节点到第一个没有两个孩子的子节点的路径长度。</p><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PriorityQueue  <span class="title">Merge</span> <span class="params">( PriorityQueue H1, PriorityQueue H2 )</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> ( H1 == <span class="literal">NULL</span> )   <span class="keyword">return</span> H2;  </span><br><span class="line">    <span class="keyword">if</span> ( H2 == <span class="literal">NULL</span> )   <span class="keyword">return</span> H1;  </span><br><span class="line">    <span class="keyword">if</span> ( H1-&gt;Element &lt; H2-&gt;Element )  <span class="keyword">return</span> Merge1( H1, H2 );</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Merge1( H2, H1 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PriorityQueue</span><br><span class="line">Merge1( PriorityQueue H1, PriorityQueue H2 )</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">if</span> ( H1-&gt;Left == <span class="literal">NULL</span> )     <span class="comment">/* single node */</span></span><br><span class="line">        H1-&gt;Left = H2;  <span class="comment">/* H1-&gt;Right is already NULL </span></span><br><span class="line"><span class="comment">                        and H1-&gt;Npl is already 0 */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        H1-&gt;Right = Merge( H1-&gt;Right, H2 );     <span class="comment">/* Step 1 &amp; 2 */</span></span><br><span class="line">        <span class="keyword">if</span> ( H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl )</span><br><span class="line">            SwapChildren( H1 ); <span class="comment">/* Step 3 */</span></span><br><span class="line">        H1-&gt;Npl = H1-&gt;Right-&gt;Npl + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="comment">/* end else */</span></span><br><span class="line">    <span class="keyword">return</span> H1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><p><img src="/images/ads/leftist/ex1.png" alt="ex1"></p><img src="/images/ads/letist/ex2.png" width=60%><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51571024" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51571024</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二叉堆的合并需要耗费O(N)的代价，而leftist heap只需O(logN)&lt;/p&gt;
&lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definiti
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Skew Heap</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/skew_heap/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/skew_heap/</id>
    <published>2020-01-26T14:22:01.000Z</published>
    <updated>2020-01-26T14:29:29.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/images/ads/skew/ex1.png" alt="ex1"></p><p><img src="/images/ads/skew/ex2.png" alt="ex2"></p><p><img src="/images/ads/skew/ex3.png" alt="ex3"></p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51586384" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51586384</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Exercise&quot;&gt;&lt;a href=&quot;#Exercise&quot; class=&quot;headerlink&quot; title=&quot;Exercise&quot;&gt;&lt;/a&gt;Exercise&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/ads/skew/ex1.png&quot; alt=&quot;ex1&quot;&gt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Binomial Queue</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/binomial_queue/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/binomial_queue/</id>
    <published>2020-01-26T14:20:26.000Z</published>
    <updated>2020-01-26T14:21:33.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Time-complexity"><a href="#Time-complexity" class="headerlink" title="Time complexity"></a>Time complexity</h2><p>Find min: O(logN)</p><p>Merge: O(logN)</p><p>Insert: average time is const, worst case is O(N)</p><p>A binomial queue of N elements can be built by N successive insertions in O(N) time.</p><p>$T_{worst} = O(log N),$  but  $T_{amortized} = 2$</p><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><p>left-child-next-sibling</p><p>the new tree will be the largest</p><p>maintain the subtrees in decreasing order</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"binomialqueue.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"fatal.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXTREES 25</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAPACITY ((1&lt;&lt;MAXTREES)-1)<span class="comment">//容量是2^0+2^1+2^3+2^(MAXTREES-1)</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span> &#123;</span></span><br><span class="line">ElementType element;</span><br><span class="line">Position leftChild;</span><br><span class="line">Position nextSibling;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Collection</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> currentSize;</span><br><span class="line">BinTree theTrees[MAXTREES];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">BinQueue <span class="title">initialize</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">BinQueue h = (BinQueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Collection));</span><br><span class="line"><span class="keyword">if</span> (h == <span class="literal">NULL</span>)</span><br><span class="line">Error(<span class="string">"OUT OF MEMORY"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXTREES; i++)</span><br><span class="line">h-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h-&gt;currentSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ElementType <span class="title">findMin</span><span class="params">(BinQueue h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(h))</span><br><span class="line">Error(<span class="string">"EMPTY HEAP"</span>);</span><br><span class="line">ElementType minElem;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt;= h-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;<span class="comment">//找到第一个的二项树的根,j代表i二项树结点的个数，最大的二项树的下一个二项树的结点的个数比currentSize的最大值大1</span></span><br><span class="line"><span class="keyword">if</span> (h-&gt;theTrees[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">minElem = h-&gt;theTrees[i]-&gt;element;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; j &lt;= h-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;<span class="comment">//再和剩下的比较</span></span><br><span class="line"><span class="keyword">if</span> (h-&gt;theTrees[i] &amp;&amp; h-&gt;theTrees[i]-&gt;element &lt; minElem) &#123;</span><br><span class="line">minElem = h-&gt;theTrees[i]-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> minElem;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isEmpty</span><span class="params">(BinQueue h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> h-&gt;currentSize == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> BinTree <span class="title">combineTrees</span><span class="params">(BinTree t1, BinTree t2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t1-&gt;element &gt; t2-&gt;element)</span><br><span class="line"><span class="keyword">return</span> combineTrees(t2, t1);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">t2-&gt;nextSibling = t1-&gt;leftChild;<span class="comment">//leftchild指向高度高的二项树，高度依次从nextSibling减少</span></span><br><span class="line">t1-&gt;leftChild = t2;</span><br><span class="line"><span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">BinQueue <span class="title">merge</span><span class="params">(BinQueue &amp;h1, BinQueue &amp;h2)</span> </span>&#123;<span class="comment">//h2合并到h1当中</span></span><br><span class="line"><span class="keyword">if</span> (h1 == h2)</span><br><span class="line"><span class="keyword">return</span> h1;</span><br><span class="line">BinTree t1, t2;</span><br><span class="line">BinTree carry = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> carrt_tag;</span><br><span class="line"><span class="keyword">if</span> (h1-&gt;currentSize + h2-&gt;currentSize &gt; CAPACITY)</span><br><span class="line">Error(<span class="string">"TOO MUCH ELEM"</span>);</span><br><span class="line"><span class="keyword">if</span> (h1-&gt;currentSize &lt; h2-&gt;currentSize) &#123;</span><br><span class="line"><span class="comment">//互换</span></span><br><span class="line">BinQueue temp;</span><br><span class="line">temp = h1;</span><br><span class="line">h1 = h2;</span><br><span class="line">h2 = temp;</span><br><span class="line">&#125;</span><br><span class="line">h1-&gt;currentSize += h2-&gt;currentSize;</span><br><span class="line"><span class="keyword">int</span> h2Size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt;= h1-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;<span class="comment">//统计h2中树的数量</span></span><br><span class="line"><span class="keyword">if</span> (h2-&gt;theTrees[i] != <span class="literal">NULL</span>)</span><br><span class="line">h2Size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; (carry || h2Size) &amp;&amp; j &lt;= h1-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;</span><br><span class="line">t1 = h1-&gt;theTrees[i];</span><br><span class="line">t2 = h2-&gt;theTrees[i];</span><br><span class="line"><span class="keyword">if</span> (carry)</span><br><span class="line">carrt_tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">carrt_tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (!!t1 + <span class="number">2</span> * !!t2 + <span class="number">4</span> * carrt_tag) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//t1,t2,carry空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//t1非空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//t2非空</span></span><br><span class="line">h1-&gt;theTrees[i] = t2;</span><br><span class="line">h2-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2Size--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//t1,t2非空</span></span><br><span class="line">carry = combineTrees(t1, t2);</span><br><span class="line">h1-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2Size--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//carry非空</span></span><br><span class="line">h1-&gt;theTrees[i] = carry;</span><br><span class="line">carry = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//t1,carry非空</span></span><br><span class="line">carry = combineTrees(t1, carry);</span><br><span class="line">h1-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//t2, carry非空</span></span><br><span class="line">carry = combineTrees(t2, carry);</span><br><span class="line">h2-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2Size--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">h1-&gt;theTrees[i] = carry;</span><br><span class="line">carry = combineTrees(t1, t2);</span><br><span class="line">h2-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line">h2Size--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Error(<span class="string">"error"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(ElementType X, BinQueue h)</span> </span>&#123;</span><br><span class="line">BinTree t1;</span><br><span class="line">BinTree carry = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct BinNode));</span><br><span class="line"><span class="keyword">if</span> (carry == <span class="literal">NULL</span>)</span><br><span class="line">Error(<span class="string">"EMPTY MEOERY"</span>);</span><br><span class="line">carry-&gt;element = X;</span><br><span class="line">carry-&gt;leftChild = carry-&gt;nextSibling = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> carrt_tag;</span><br><span class="line"><span class="keyword">if</span> (h-&gt;currentSize + <span class="number">1</span> &gt; CAPACITY)</span><br><span class="line">Error(<span class="string">"TOO MUCH ELEM"</span>);</span><br><span class="line">h-&gt;currentSize += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (carry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">t1 = h-&gt;theTrees[i];</span><br><span class="line"><span class="keyword">if</span> (carry)</span><br><span class="line">carrt_tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">carrt_tag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (!!t1 + <span class="number">2</span> * !!carrt_tag) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//t1,t2,carry空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//t1非空</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//carry非空</span></span><br><span class="line">h-&gt;theTrees[i] = carry;</span><br><span class="line">carry = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//t1,carry非空</span></span><br><span class="line">carry = combineTrees(t1, carry);</span><br><span class="line">h-&gt;theTrees[i] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Error(<span class="string">"error"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">BinQueue <span class="title">deleteMin</span><span class="params">(BinQueue h)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(h))</span><br><span class="line">Error(<span class="string">"EMPTY HEAP"</span>);</span><br><span class="line"><span class="keyword">int</span> minTree;</span><br><span class="line">ElementType minElem;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt;= h-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (h-&gt;theTrees[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">minElem = h-&gt;theTrees[i]-&gt;element;</span><br><span class="line">minTree = i;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; j &lt;= h-&gt;currentSize; i++, j *= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (h-&gt;theTrees[i] &amp;&amp; h-&gt;theTrees[i]-&gt;element &lt; minElem) &#123;</span><br><span class="line">minElem = h-&gt;theTrees[i]-&gt;element;</span><br><span class="line">minTree = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BinQueue deleteQueue = initialize();</span><br><span class="line">deleteQueue-&gt;currentSize = (<span class="number">1</span> &lt;&lt; minTree) - <span class="number">1</span>;<span class="comment">//mintree的儿子有mintree个，结点个数加起来就是 (1 &lt;&lt; minTree) - 1</span></span><br><span class="line">Position p = h-&gt;theTrees[minTree]-&gt;leftChild;<span class="comment">//高度从大到小</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = minTree - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, p = p-&gt;nextSibling) &#123;</span><br><span class="line">deleteQueue-&gt;theTrees[i] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(h-&gt;theTrees[minTree]);</span><br><span class="line">h-&gt;theTrees[minTree] = <span class="literal">NULL</span>;</span><br><span class="line">h-&gt;currentSize -= (deleteQueue-&gt;currentSize + <span class="number">1</span>);</span><br><span class="line">merge(h, deleteQueue);</span><br><span class="line"><span class="built_in">free</span>(deleteQueue);</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Time-complexity&quot;&gt;&lt;a href=&quot;#Time-complexity&quot; class=&quot;headerlink&quot; title=&quot;Time complexity&quot;&gt;&lt;/a&gt;Time complexity&lt;/h2&gt;&lt;p&gt;Find min: O(logN)&lt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Devide &amp; Conquer</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/devide_n_conquer/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/devide_n_conquer/</id>
    <published>2020-01-26T14:15:14.000Z</published>
    <updated>2020-01-26T14:29:44.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Master-theorem"><a href="#Master-theorem" class="headerlink" title="Master theorem"></a>Master theorem</h2><ul><li>substitution method</li><li>recursion tree method</li><li>master method</li></ul><img src="/images/ads/devide-n-conquer/master.png" width=90%><p><img src="/images/ads/devide-n-conquer/master2.png" alt="master2"></p><br><hr><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><blockquote><p>Which one of the following is the lowest upper bound of T(n) for the following recursion $T(n)=2T(\sqrt n)+logn$ ? (4分) A<br>A. $O(lognloglogn)$<br>B. $O(log^2n)$<br>C. $O(nlogn)$<br>D. $O(n^2)$</p></blockquote><p>设 $m = logn$, 则$2^m = n$.<br>$T(2^m) = 2T(2^{m/2}) + m$<br>设 $G(m) = T(2^m)$，则原式转化为$G(m) = 2G(m/2) + m$<br>根据主定理，$a = 2, b = 2, k = 1, p = 0. a = b^k$，满足条件2，所以算法复杂度为$O（mlogm）$<br>又因为 $m = logn$ ,所以算法复杂度为$O（logn loglogn)$</p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/zju_fish1996/article/details/51074532" target="_blank" rel="noopener">https://blog.csdn.net/zju_fish1996/article/details/51074532</a></p><br> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Master-theorem&quot;&gt;&lt;a href=&quot;#Master-theorem&quot; class=&quot;headerlink&quot; title=&quot;Master theorem&quot;&gt;&lt;/a&gt;Master theorem&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;substitution met
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Dynamic Programming</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/dp/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/dp/</id>
    <published>2020-01-26T14:12:19.000Z</published>
    <updated>2020-01-26T14:29:07.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ordering-matrix-multiplication"><a href="#Ordering-matrix-multiplication" class="headerlink" title="Ordering matrix multiplication"></a>Ordering matrix multiplication</h2><img src="/images/ads/dp/matrix.png" width=50%><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* r contains number of columns for each of the N matrices */</span> </span><br><span class="line"><span class="comment">/* r[ 0 ] is the number of rows in matrix 1 */</span> </span><br><span class="line"><span class="comment">/* Minimum number of multiplications is left in M[ 1 ][ N ] */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OptMatrix</span><span class="params">( <span class="keyword">const</span> <span class="keyword">long</span> r[ ], <span class="keyword">int</span> N, TwoDimArray M )</span> </span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span>  i, j, k, L; </span><br><span class="line">    <span class="keyword">long</span>  ThisM; </span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= N; i++ )   M[ i ][ i ] = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span>( k = <span class="number">1</span>; k &lt; N; k++ ) <span class="comment">/* k = j - i */</span> </span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">1</span>; i &lt;= N - k; i++ ) &#123; <span class="comment">/* For each position */</span> </span><br><span class="line">j = i + k;    M[ i ][ j ] = Infinity; </span><br><span class="line"><span class="keyword">for</span>( L = i; L &lt; j; L++ ) &#123; </span><br><span class="line">    ThisM = M[ i ][ L ] + M[ L + <span class="number">1</span> ][ j ] + r[ i - <span class="number">1</span> ] * r[ L ] * r[ j ]; </span><br><span class="line">    <span class="keyword">if</span> ( ThisM &lt; M[ i ][ j ] )  <span class="comment">/* Update min */</span> </span><br><span class="line">M[ i ][ j ] = ThisM; </span><br><span class="line">&#125;  <span class="comment">/* end for-L */</span></span><br><span class="line">        &#125;  <span class="comment">/* end for-Left */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Optimal-binary-search-tree"><a href="#Optimal-binary-search-tree" class="headerlink" title="Optimal binary search tree"></a>Optimal binary search tree</h2><p>$T(N) = \sum p_i (1+d_i)$<br><br></p><h2 id="All-pairs-shortest-path"><a href="#All-pairs-shortest-path" class="headerlink" title="All-pairs shortest path"></a>All-pairs shortest path</h2><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* A[ ] contains the adjacency matrix with A[ i ][ i ] = 0 */</span> </span><br><span class="line"><span class="comment">/* D[ ] contains the values of the shortest path */</span> </span><br><span class="line"><span class="comment">/* N is the number of vertices */</span> </span><br><span class="line"><span class="comment">/* A negative cycle exists iff D[ i ][ i ] &lt; 0 */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AllPairs</span><span class="params">( TwoDimArray A, TwoDimArray D, <span class="keyword">int</span> N )</span> </span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span>  i, j, k; </span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; i++ )  <span class="comment">/* Initialize D */</span> </span><br><span class="line">    <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; N; j++ )</span><br><span class="line"> D[ i ][ j ] = A[ i ][ j ]; </span><br><span class="line">    <span class="keyword">for</span>( k = <span class="number">0</span>; k &lt; N; k++ )  <span class="comment">/* add one vertex k into the path */</span></span><br><span class="line">         <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; N; i++ ) </span><br><span class="line"> <span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; N; j++ ) </span><br><span class="line">    <span class="keyword">if</span>( D[ i ][ k ] + D[ k ][ j ] &lt; D[ i ][ j ] ) </span><br><span class="line"><span class="comment">/* Update shortest path */</span> </span><br><span class="line">D[ i ][ j ] = D[ i ][ k ] + D[ k ][ j ]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="Product-assembly"><a href="#Product-assembly" class="headerlink" title="Product assembly"></a>Product assembly</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ordering-matrix-multiplication&quot;&gt;&lt;a href=&quot;#Ordering-matrix-multiplication&quot; class=&quot;headerlink&quot; title=&quot;Ordering matrix multiplication&quot;&gt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Greedy Algorithm</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/greedy/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/greedy/</id>
    <published>2020-01-26T14:04:00.000Z</published>
    <updated>2020-01-26T14:28:33.397Z</updated>
    
    <content type="html"><![CDATA[<p>Greedy algorithm works only if the local optimum is equal to the global optimum.<br><br></p><h2 id="活动选择问题"><a href="#活动选择问题" class="headerlink" title="活动选择问题"></a>活动选择问题</h2><p>Consider any nonempty subproblem $S_k$, and let am be an activity in $S_k$ with the earliest finish time.  Then am is included in some maximum-size subset of mutually compatible activities of $S_k$<br><br></p><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h3><p>f[i][v]：表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。</p><p>状态转移方程是：f[i][v]=max{f[i-1][v],f[i-1][v-weight[i]]+value[i]}</p><p>“将前i件物品放入容量为v的背包中”这个子问题，如果只考虑第i件物品放或者不放，那么就可以转化为只涉及前i-1件物品的问题：</p><ol><li><p>如果不放第i件物品，则问题转化为“前i-1件物品放入容量为v的背包中”；</p></li><li><p>如果放第i件物品，则问题转化为“前i-1件物品放入剩下的容量为v-weight[i]的背包中”，此时能获得的最大价值就是f [i-1][v-weight[i]]，再加上通过放入第i件物品获得的价值value[i]。</p></li></ol><p>f[i][v]的值就是1、2中最大的那个值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 背包问题    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3 <span class="comment">// N件宝贝    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C 5 <span class="comment">// C是背包的总capacity    </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> value[N + <span class="number">1</span>] = &#123; <span class="number">0</span>, <span class="number">60</span>, <span class="number">100</span>, <span class="number">120</span> &#125;; <span class="comment">// 价值    </span></span><br><span class="line">    <span class="keyword">int</span> weight[N + <span class="number">1</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;     <span class="comment">// 重量    </span></span><br><span class="line">    <span class="keyword">int</span> f[N + <span class="number">1</span>][C + <span class="number">1</span>] = &#123; <span class="number">0</span> &#125;;   <span class="comment">// f[i][j]表示在背包容量为j的情况下，前i件宝贝的最大价值    </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; i++)        <span class="comment">//外循环控制物品数量，确保每个物品都会被遍历到  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">/*for (j = weight[i]; j &lt;= C; j++)      //内循环控制物品的重量，确保能够遍历出“以前每个物品放入时的最大价值f[i][j]” </span></span><br><span class="line"><span class="comment">        &#123; </span></span><br><span class="line"><span class="comment">            int x = f[i - 1][j];        //不放第i件物品 </span></span><br><span class="line"><span class="comment">            int y = f[i - 1][j - weight[i]] + value[i];      //放入第i件物品 </span></span><br><span class="line"><span class="comment">            f[i][j] = max(x, y); </span></span><br><span class="line"><span class="comment">        &#125;*/</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= C; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">// 递推关系式    </span></span><br><span class="line">            <span class="keyword">if</span> (j &lt; weight[i])  </span><br><span class="line">            &#123;  </span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">int</span> x = f[i - <span class="number">1</span>][j];  </span><br><span class="line">                <span class="keyword">int</span> y = f[i - <span class="number">1</span>][j - weight[i]] + value[i];  </span><br><span class="line">                f[i][j] = max(x, y);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= N; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= C; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%4d "</span>, f[i][j]);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"选取的最大价值是："</span> &lt;&lt; f[N][C] &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"选取的物品如下："</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    i = N, j = C;  </span><br><span class="line">    <span class="keyword">while</span> (i)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (f[i][j] == (f[i - <span class="number">1</span>][j - weight[i]] + value[i]))  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="string">"weight="</span> &lt;&lt; weight[i] &lt;&lt; <span class="string">", value="</span> &lt;&lt; value[i] &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">            j -= weight[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">        i--;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化空间复杂度：</p><p>上面f[i][v]使用二维数组存储的，可以优化为一维数组f[v]，将主循环改为：</p><p>for i = 1..N；</p><p>for v = V..0；</p><p>f[v] = max（f[v]， f[v-c[i]]+w[i]）；</p><p>即将第二层循环改为从V..0，逆序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MIN = <span class="number">0x80000000</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;   <span class="comment">//物品数量  </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">5</span>;  <span class="comment">//背包容量  </span></span><br><span class="line"><span class="keyword">int</span> f[V + <span class="number">1</span>];              <span class="comment">// 一维数组  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Package</span><span class="params">(<span class="keyword">int</span> *W, <span class="keyword">int</span> *C, <span class="keyword">int</span> N, <span class="keyword">int</span> V)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i, j;  </span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));  <span class="comment">//初始化为0  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= V; i++)       <span class="comment">//此步骤是解决是否恰好满足背包容量，  </span></span><br><span class="line">        f[i] = MIN;                <span class="comment">// 若“恰好”满足背包容量，即正好装满背包，则加上此步骤; 若不需要“恰好”，则初始化为0  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= N; i++)  </span><br><span class="line">        <span class="keyword">for</span> (j = V; j &gt;= C[i]; j--)    <span class="comment">//注意此处与解法一是顺序不同的，弄清原因  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            f[j] = (f[j]&gt;f[j - C[i]] + W[i]) ? f[j] : (f[j - C[i]] + W[i]);  </span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"f["</span> &lt;&lt; i &lt;&lt; <span class="string">"]["</span> &lt;&lt; j &lt;&lt; <span class="string">"]="</span> &lt;&lt; f[j] &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> f[V];  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> W[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span> &#125;;      <span class="comment">//物品权重  </span></span><br><span class="line">    <span class="keyword">int</span> C[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;      <span class="comment">//物品大小  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> result = Package(W, C, N, V);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (result &gt; <span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"the opt value:"</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"can not find the opt value"</span> &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">// 可能不存在正好装满背包的解  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在求最优解的背包问题中，一般有两种不同的问法：</p><p>1.要求“恰好装满背包”时的最优解：<br>在初始化时除了 f[0] 为 0其它f[1..V]均设为 -∞，这样就可以保证最终得到的f[N]是一种恰好装满背包的最优解。如果不能恰好满足背包容量，即不能得到 f[V] 的最优值，则此时 f[V] =-∞，这样就能表示没有找到恰好满足背包容量的最优值。</p><p>2.求小于等于背包容量的最优解，即不一定恰好装满背包：<br>如果并没有要求必须把背包装满，而是只希望价值尽量大，初始化时应该将f[0..V]全部设为0。<br><br></p><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/images/ads/greedy/ex1.png" alt="ex1"></p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/zwpf1994/article/details/79083972" target="_blank" rel="noopener">https://blog.csdn.net/zwpf1994/article/details/79083972</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Greedy algorithm works only if the local optimum is equal to the global optimum.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;活动选择问题&quot;&gt;&lt;a href=&quot;#活动选择问题&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】NP Completeness</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-26/np_completeness/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-26/np_completeness/</id>
    <published>2020-01-26T13:53:29.000Z</published>
    <updated>2020-01-26T14:27:04.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><ol><li><p>P问题是指：用确定图灵机可以在多项式时间内解决的问题。一个问题可以找到一个能在多项式的时间里解决它的算法。也就是复杂度为O(1),O(log(n)),O(n^a)等的。</p></li><li><p>NP问题：用非确定图灵机可以在多项式时间内解决。可以在多项式的时间里验证一个解的问题（注意，NP问题不是非P问题！！！）。所以比如最短路问题、TSP旅行商问题，一个解出来了（一条路径出来了），那么我验证这个解（计算这条路径的长度）可以在O(n)的复杂度里解决，所以是NP问题。</p></li><li><p>NPC（NP Complete，NP完全）问题满足：首先，它得是一个NP问题；然后，所有的NP问题都可以约化到它。证明一个问题是NPC问题也很简单。先证明它至少是一个NP问题，再证明其中一个已知的NPC问题能约化到它（由约化的传递性）。第一个NPC问题是逻辑电路问题（给定一个逻辑电路，问是否存在一种输入使输出为True），并且可以证明所有NP问题都能约化到它（证明过程复杂）。Hamilton 回路、TSP问题、SAT问题（判断一组给定的布林函数，是否可以找到一组变数赋值能使其为真）是NPC问题。</p></li><li><p>NP Hard问题满足NPC问题定义的第二条但不一定要满足第一条（即所有NP问题都可以约化到它，但它不一定是NP问题），所以NP Hard问题包含了NPC问题。<br>若A为NP-Hard，A可以规约到B，则B为NP-Hard</p></li></ol><p>所以P问题一定是NP问题，NPC问题也一定是NP问题，NPC问题也一定是NP Hard问题，但NP Hard问题不一定是NP问题。</p><p>$L \in P \Rightarrow \bar L \in P$<br>$L \in NP \Rightarrow \bar L \in co$-$NP$</p> <img src="/images/ads/npc/weien.png" width=50%><h2 id="NP-complete"><a href="#NP-complete" class="headerlink" title="NP-complete:"></a>NP-complete:</h2> <img src="/images/ads/npc/npc.png" width=40%><br><hr><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises:"></a>Exercises:</h2><p><img src="/images/ads/npc/ex1.png" alt="ex1"></p><p><img src="/images/ads/npc/ex2.png" alt="ex2"></p><p>NP + NP-hand -&gt; NP-complete</p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.matrix67.com/blog/archives/105" target="_blank" rel="noopener">http://www.matrix67.com/blog/archives/105</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;P问题是指：用确定图灵机可以在多项式时间内解决的问题。一个
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
</feed>
