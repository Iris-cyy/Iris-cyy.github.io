<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花落知多少</title>
  
  <subtitle>Nice to meet you :)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iris-cyy.github.io/"/>
  <updated>2020-02-11T09:19:53.114Z</updated>
  <id>https://iris-cyy.github.io/</id>
  
  <author>
    <name>Irisssy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【DBS】Lecture 06. Relational Database Design</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs06/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs06/</id>
    <published>2020-02-11T09:17:19.000Z</published>
    <updated>2020-02-11T09:19:53.114Z</updated>
    
    <content type="html"><![CDATA[<p><img src="dbs06.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211171822167.png" width=80%></p><h2 id="First-Normal-Form"><a href="#First-Normal-Form" class="headerlink" title="First Normal Form"></a>First Normal Form</h2><p>atomic</p><h2 id="Functional-dependencies"><a href="#Functional-dependencies" class="headerlink" title="Functional dependencies"></a>Functional dependencies</h2><p>The functional dependency α → β holds on R if and only if for any legal relations r(R), whenever any two tuples t1 and t2 of r agree on the attributes α, they also agree on the attributes β, i.e., t1[α] = t2[α] ⟹ t1[α] = t2[β] </p><p>Trivial: α → β, if β ⊆ α         (平凡的函数依赖) </p><p>Non-trivial: α → β , if β ⊈ α    (非平凡的函数依赖) </p><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>The set of all functional dependencies logically implied by F is the closure of F, denoted by F+ (函数依赖集F的闭包)</p><p>E.g., F = {A → B, B → C}, F+ = {A → B, B → C, A → C, A α A, AB → A, AB → B, AC → C, A → BC, …} </p><p>Armstrong’s Axioms provide inference rules to find F+. </p><p>We can find all of F+ by applying Armstrong’s Axioms: </p><p>If β ⊆ α, then α → β               (reflexivity, 自反律) — trivial </p><p>If α → β, then ?α → ?β (?α → β)    (augmentation, 增补律) </p><p>If α → β, and β → ?, then α → ?   (transitivity, 传递律) </p><p>If α → β and α → ? holds, then α → β? holds (union, 合并律) </p><p>If α → β? holds, then α → β and α → ? holds (decomposition, 分解律) </p><p>If α → β and β? → δ holds, then α? → δ holds (pseudotransitivity, 伪传递律) </p><h2 id="Canonical-cover（正则覆盖）"><a href="#Canonical-cover（正则覆盖）" class="headerlink" title="Canonical cover（正则覆盖）"></a>Canonical cover（正则覆盖）</h2><p>minimal set of functional dependencies in F</p><h2 id="Dependency-preservation（依赖保持）"><a href="#Dependency-preservation（依赖保持）" class="headerlink" title="Dependency preservation（依赖保持）"></a>Dependency preservation（依赖保持）</h2><h2 id="lossless-join-无损分解"><a href="#lossless-join-无损分解" class="headerlink" title="lossless-join 无损分解"></a>lossless-join 无损分解</h2><p>$R_1 \bigcap R_2 \rightarrow R_1 or R_1 \bigcap R_2 \rightarrow R_2$</p><h2 id="Boyce-Codd-Normal-Form"><a href="#Boyce-Codd-Normal-Form" class="headerlink" title="Boyce-Codd Normal Form"></a>Boyce-Codd Normal Form</h2><p><img src="/images/dbs/dbs06.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211171730017.png" alt="在这里插入图片描述"></p><h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><p><img src="/images/dbs/dbs06.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211171730061.png" alt="在这里插入图片描述"></p><p>If a relation is in BCNF, it is in 3NF.</p><p><br></p><hr><p>另外一些相关的博文：</p><p><a href="https://www.cnblogs.com/langdashu/p/5924082.html" target="_blank" rel="noopener">https://www.cnblogs.com/langdashu/p/5924082.html</a></p><p>BCNF 无损分解：<a href="https://blog.csdn.net/panxiqie___/article/details/38899021" target="_blank" rel="noopener">https://blog.csdn.net/panxiqie___/article/details/38899021</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;dbs06.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 09. Storage and File Structure</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs09/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs09/</id>
    <published>2020-02-11T09:13:49.000Z</published>
    <updated>2020-02-11T09:16:59.974Z</updated>
    
    <content type="html"><![CDATA[<p>存储器层次结构（向上变快变贵但是易失）</p><p><img src="/images/dbs/dbs09.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211171459877.png" alt="img"></p><p><strong>基本存储</strong>(primary storage): 高速缓冲存储器(cache)、主存储器(main memory)</p><p><strong>辅助存储</strong>(secondary storage)或<strong>联机存储</strong>(online storage): 基本存储下一层，如磁盘(magnetic disk)</p><p><strong>三级存储</strong>(tertiary storage)或<strong>脱机存储</strong>(offline storage): 最底层，如磁带(magnetic tapes)或光盘(optical disk)</p><p>主存储器以上均为<strong>易失性存储</strong>(volatile storage)：设备断电后失去所有内容</p><p>独立磁盘冗余阵列(RAID)</p><p>平均故障时间(MTTF)</p><p>RAID level:</p><p><img src="/images/dbs/dbs09.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211171600064.png" width=50%></p><h3 id="Choice-of-RAID-Level"><a href="#Choice-of-RAID-Level" class="headerlink" title="Choice of RAID Level"></a>Choice of RAID Level</h3><p>Factors in choosing RAID level </p><ul><li>Monetary cost </li><li>Performance: Number of I/O operations per second, and bandwidth during normal operation </li><li>Performance during failure </li><li>Performance during rebuild of failed disk <ul><li>Including time taken to rebuild failed disk </li></ul></li></ul><p>RAID 0 is used only when data safety is not important </p><ul><li>E.g., data can be recovered quickly from other sources</li></ul><p>Level 2 and 4 never used since they are subsumed by 3 and 5<br>Level 3 is not used anymore since bit-striping forces single block  reads to access all disks, wasting disk arm movement, which block striping (level 5) avoids<br>Level 6 is rarely used since levels 1 and 5 offer adequate safety for almost all applications<br><u>So competition is between 1 and 5 only</u></p><p>Level 1 provides much better write performance than level 5</p><ul><li>Level 5 requires at least 2 block reads and 2 block writes to write a single block, whereas Level 1 only requires 2 block writes</li><li>Level 1 preferred for high update environments such as log disks</li></ul><p>Level 1 had higher storage cost than level 5</p><ul><li>Disk drive capacities increasing rapidly (50%/year) whereas disk access times have decreased much less (x 3 in 10 years) </li><li>I/O requirements have increased greatly, e.g. for Web servers</li><li>When enough disks have been bought to satisfy required rate of I/O, they often have spare storage capacity<ul><li>So there is often no extra monetary cost for Level 1! </li></ul></li></ul><p>Level 5 is preferred for applications with low update rate, and large amounts of data.<br>Level 1 is preferred for all other applications. </p><h3 id="Buffer-Manager"><a href="#Buffer-Manager" class="headerlink" title="Buffer Manager"></a>Buffer Manager</h3><p>当Buffer的空闲区不够，不能容下新读入的Block时，需要将Buffer中 原有Block覆盖(替换)。主要策略为:</p><ul><li>LRU strategy (Least Recently Used, 最近最少使用策略): Replace the block which was least recently used.</li><li>MRU strategy (Most recently used, 最近最常用策略): System must pin the block currently being processed. After the final tuple of that block has been processed, the block is unpinned, and it becomes the most recently used block.（最优）</li><li>Toss-immediate，立即丢弃策略：处理完的元组立即丢弃</li></ul><h3 id="File-Organization"><a href="#File-Organization" class="headerlink" title="File Organization"></a>File Organization</h3><ul><li>定长记录</li><li>变长记录</li></ul><h3 id="Organization-of-Records-in-Files"><a href="#Organization-of-Records-in-Files" class="headerlink" title="Organization of Records in Files"></a>Organization of Records in Files</h3><ul><li>heap file 堆文件，流水文件：<br> a record can be placed anywhere in the file where there is space</li><li>sequential file 顺序文件：<br>store records in sequential order, based on the value of a search key of each record</li><li>hashing file 散列文件：<br>a hash function computed on some attribute of each record; the result specifies in which block of the file the record should be placed</li><li>clustering file organization 聚集文件组织：<br>records of several different relations can be stored in the same file<br>Motivation: store related records in different relations on the same block to minimize I/O</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;存储器层次结构（向上变快变贵但是易失）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dbs/dbs09.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ub
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 10. Indexing and Hashing</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs10/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs10/</id>
    <published>2020-02-11T09:09:01.000Z</published>
    <updated>2020-02-11T09:13:10.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>顺序索引</strong>：基于值的顺序排序<br><strong>散列索引</strong>：基于将值平均分布到若干散列桶中</p><p><strong>聚集索引</strong>（clustering index）or <strong>主索引</strong>（primary index）：如果包含记录的文件按照某个搜索码指定的顺序排序，那么该搜索码对应的索引称为聚集索引。聚集索引的搜索码常常是主码，尽管并非必须如此。<br><strong>非聚集索引</strong>（nonclustering index）or <strong>辅助索引</strong>（secondary index）：搜索码指定的顺序与文件中记录的物理顺序不同的索引称为非聚集索引</p><p><strong>稠密索引</strong>（dense index）：在稠密索引中，文件中的每个搜索码值都有一个索引项。在稠密非聚集索引中，索引必须存储指向所有具有相同搜索码值的记录的指针列表。<br><strong>稀疏索引</strong>（sparse index）：在稀硫索引中，只为搜索码的某些值建立索引项，<u>只有索引是聚集索引时才能使用稀疏索引</u>。<br><br></br></p><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><p>叶结点最多有 $n-1$ 个值，最少有 $\lceil (n-1)/2\rceil$ 个值</p><p>非叶节点最多可容纳 $n$ 个指针，最少必须有 $\lceil n/2\rceil$ 个指针</p><h3 id="insertion"><a href="#insertion" class="headerlink" title="insertion"></a>insertion</h3><p><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>insert  “Adams”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911181.png" alt="在这里插入图片描述"></p><p>insert  “Lamport”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911232.png" alt="在这里插入图片描述"></p><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><p><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911238.png" alt="在这里插入图片描述"></p><p>delete “Srinivasan”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911270.png" alt="在这里插入图片描述"></p><p>delete “Singh” and “Wu”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911259.png" alt="在这里插入图片描述"></p><p>delete “Gold”:<br><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911302.png" alt="在这里插入图片描述"></p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p>Similar to B+tree, but B-tree allows search-key values to appear only once; eliminates redundant storage of search keys.</p><p><img src="/image/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211170911324.png" alt="在这里插入图片描述"></p><ul><li>Advantages of B-Tree indices:<br>➢ May use less tree nodes than a corresponding B+tree (because of duplicate).<br>➢ Sometimes possible to find search-key value before reaching leaf node.</li><li>Disadvantages of B-Tree indices:<br>➢ Only small fraction of all search-key values are found early<br>➢ Non-leaf nodes are larger, so fan-out is reduced. Thus B-Trees typically have greater depth than corresponding B+Tree<br>➢ Insertion and deletion more complicated than in B+Trees<br>➢ Implementation is harder than B+Trees.<br>因而许多数据库实现使用B+树</li></ul><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>bucket overflow（桶溢出）处理：</p><ul><li>close addressing：增加溢出桶、溢出链，用来存储溢出部分</li><li>open addressing：溢出部分放到别的桶中（无溢出链）<br><br></li></ul><h2 id="Dynamic-Hashing-动态散列"><a href="#Dynamic-Hashing-动态散列" class="headerlink" title="Dynamic Hashing   动态散列"></a>Dynamic Hashing   动态散列</h2><p>extendable hashing 可扩充散列</p><p><a href="https://www.cnblogs.com/kegeyang/archive/2012/04/05/2432608.html" target="_blank" rel="noopener">https://www.cnblogs.com/kegeyang/archive/2012/04/05/2432608.html</a><br><br></p><h2 id="Index-Definition-in-SQL"><a href="#Index-Definition-in-SQL" class="headerlink" title="Index Definition in SQL"></a>Index Definition in SQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> &lt;<span class="keyword">index</span>-<span class="keyword">name</span>&gt; <span class="keyword">on</span> &lt;<span class="keyword">table</span>-<span class="keyword">name</span>&gt; (&lt;<span class="keyword">attribute</span>-<span class="keyword">list</span>&gt;)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> uni-acnt-<span class="keyword">index</span> <span class="keyword">on</span> <span class="keyword">account</span>(<span class="keyword">account</span>- <span class="built_in">number</span>)</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> &lt;<span class="keyword">index</span>-<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="Bitmap-Indices"><a href="#Bitmap-Indices" class="headerlink" title="Bitmap Indices"></a>Bitmap Indices</h2><p><img src="/images/dbs/dbs10.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0lyaXNfY3l5,size_16,color_FFFFFF,t_70-20200211171147910.png" alt="img"></p><p><br></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/hellojoy/article/details/81740997" target="_blank" rel="noopener">https://blog.csdn.net/hellojoy/article/details/81740997</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;顺序索引&lt;/strong&gt;：基于值的顺序排序&lt;br&gt;&lt;strong&gt;散列索引&lt;/strong&gt;：基于将值平均分布到若干散列桶
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 11. Query Processing</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs11/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs11/</id>
    <published>2020-02-11T08:45:31.000Z</published>
    <updated>2020-02-11T09:08:37.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Meaturing-of-query-cost"><a href="#Meaturing-of-query-cost" class="headerlink" title="Meaturing of query cost"></a>Meaturing of query cost</h2><p>$t_T$ – time to transfer one block. (≈ 0.1ms)<br>$t_S$ – time for one seek. (≈ 4ms)<br>Cost for b block transfers plus S seeks :  $b<em> t_T + S</em> t_S$</p><p><img src="/images/dbs/dbs11.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211164548821.png" alt="11"></p><h2 id="External-merge-sort"><a href="#External-merge-sort" class="headerlink" title="External merge sort"></a>External merge sort</h2><p>cost:<br>M: 缓冲区能容纳的磁盘块数<br>$b_r$: 关系r中记录的磁盘块数<br>$b_b$: 每次从一个归并段读取的数据数<br>merge passes required: $\; \lceil log_{M-1}(b_r/M) \rceil$<br>total number of block transfer:  $\; b_r(2\lceil log_{M-1}(b_r/M) \rceil + 1)$<br>total number of seeks: $\; 2\lceil b_r/M \rceil + \lceil b_r / b_b \rceil (2 \lceil log_{M-1}(b_r/M) \rceil -1 )$<br><br></p><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><p>元组数较少的关系作为外层关系时效果较好</p><h3 id="nested-loop-join-嵌套循环连接"><a href="#nested-loop-join-嵌套循环连接" class="headerlink" title="nested-loop join  嵌套循环连接"></a>nested-loop join  嵌套循环连接</h3><p>n: 元组数（记录数）， b: 磁盘块数</p><p>worst case: $\; n_r * b_s+b_r$ block transfer, plus $n_r +b_r$ disk seeks</p><p>best case: $\; b_r + b_s$ block transfer, plus 2 seeks</p><h3 id="block-nested-loop-join-块嵌套循环连接"><a href="#block-nested-loop-join-块嵌套循环连接" class="headerlink" title="block nested-loop join 块嵌套循环连接"></a>block nested-loop join 块嵌套循环连接</h3><p>worst case: $\; b_r <em> b_s+b_r$ block transfer, plus $2</em>b_r$ seeks</p><p>best case: $\; b_r + b_s$ block transfer, plus 2 seeks</p><p>improve: $\; \lceil b_r / (M-2) * b_s + b_r \rceil$ block transfer, plus $2\lceil b_r / (M-2 ) \rceil$ seeks</p><h3 id="indexed-nested-loop-join-索引嵌套循环连接"><a href="#indexed-nested-loop-join-索引嵌套循环连接" class="headerlink" title="indexed nested-loop join 索引嵌套循环连接"></a>indexed nested-loop join 索引嵌套循环连接</h3><p>c: 用连接条件对s进行单次选择操作的代价</p><p>cost of join: $\; b_r(t_T+t_S)+n_r*c$</p><h3 id="merge-join-排序归并连接"><a href="#merge-join-排序归并连接" class="headerlink" title="merge-join 排序归并连接"></a>merge-join 排序归并连接</h3><p>$b_r+b_s$ block transfers + $\lceil b_r/b_b \rceil + \lceil b_s / b_b \rceil$ seeks</p><h3 id="hash-join"><a href="#hash-join" class="headerlink" title="hash-join"></a>hash-join</h3><p>$M&gt;n_h +1$ 或 $M&gt;(b_s+M)+1$ 或 $M&gt;\sqrt {b_s}$ 时不需要递归划分</p><p>不需要递归划分时：$3(b_r + b_s) +4 * n_h$ block transfers + $2( \lceil b_r / b_b \rceil + \lceil b_s/b_b \rceil)$ seeks</p><p>需要递归划分时：$2(b_r + b_s) \lceil log_{M–1}(b_s) – 1 \rceil + b_r + b_s$ block transfers + $2(\lceil b_r / b_b \rceil + \lceil b_s / b_b \rceil ) \lceil log_{M–1}(b_s) – 1 \rceil$ seeks</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Meaturing-of-query-cost&quot;&gt;&lt;a href=&quot;#Meaturing-of-query-cost&quot; class=&quot;headerlink&quot; title=&quot;Meaturing of query cost&quot;&gt;&lt;/a&gt;Meaturing of quer
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 03. SQL</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs03/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs03/</id>
    <published>2020-02-11T08:41:25.000Z</published>
    <updated>2020-02-11T08:45:16.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Data-Definition-Language"><a href="#Data-Definition-Language" class="headerlink" title="Data Definition Language"></a>Data Definition Language</h2><h3 id="Domain-Types-in-SQL"><a href="#Domain-Types-in-SQL" class="headerlink" title="Domain Types in SQL"></a>Domain Types in SQL</h3><ul><li><strong>char(n)</strong>: Fixed length character string, with user-specified length. </li><li><strong>varchar(n)</strong>: Variable length character strings, with user-specified maximum length n. </li><li><strong>int</strong>: Integer (a finite subset of the integers that is machine-dependent). </li><li><strong>smallint</strong>: Small integer (a machine-dependent subset of the integer domain type). </li><li><strong>numeric(p, d)</strong>: Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. </li><li><p><strong>real, double precision</strong>: Floating point and double-precision floating point numbers, with machine-dependent precision. </p></li><li><p><strong>float(n)</strong>: Floating point number, with user-specified precision of at least <em>n</em> digits. </p></li><li><p>Null values are allowed in all the domain types. Declaring an attribute to be not null prohibits null values for that attribute. </p></li><li><p><strong>date</strong>: Dates, containing a (4 digits) year, month and date. </p><p>E.g., date ‘2007-2-27’  </p></li><li><p><strong>Time</strong>: Time of day, in hours, minutes and seconds. </p><p>E.g., time ‘11:18:16’, time ‘11:18:16.28’ </p></li><li><p><strong>timestamp</strong>: date plus time of day. </p><p>E.g., timestamp ‘2011-3-17 11:18:16.28’ </p></li></ul><h3 id="Creat-Table"><a href="#Creat-Table" class="headerlink" title="Creat Table"></a>Creat Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> r (A1 D1, A2 D2, ..., An Dn,</span><br><span class="line">              (integrity constraint1), </span><br><span class="line">              ..., </span><br><span class="line">              (integrity constraintk))</span><br></pre></td></tr></table></figure><ul><li><p>r  is the name of the relation </p></li><li><p>Each Ai  is an attribute name in the schema of relation r </p></li><li><p>Di  is the data type of values in the domain of attribute Ai </p></li></ul><h3 id="Drop-Table"><a href="#Drop-Table" class="headerlink" title="Drop Table"></a>Drop Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> r</span><br></pre></td></tr></table></figure><h3 id="Alter-Table（增减属性）"><a href="#Alter-Table（增减属性）" class="headerlink" title="Alter Table（增减属性）"></a>Alter Table（增减属性）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> r <span class="keyword">ADD</span> A D;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> r <span class="keyword">ADD</span> (A1D1,…,AnDn);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> r <span class="keyword">DROP</span> A</span><br></pre></td></tr></table></figure><h3 id="Creat-Index-or-Drop-Index（构建索引）"><a href="#Creat-Index-or-Drop-Index（构建索引）" class="headerlink" title="Creat Index or Drop Index（构建索引）"></a>Creat Index or Drop Index（构建索引）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> &lt;i-<span class="keyword">name</span>&gt; <span class="keyword">ON</span> &lt;<span class="keyword">table</span>-<span class="keyword">name</span>&gt;(&lt;<span class="keyword">attribute</span>-<span class="keyword">list</span>&gt;)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> &lt;i-<span class="keyword">name</span>&gt; <span class="keyword">ON</span> &lt;<span class="keyword">table</span>-<span class="keyword">name</span>&gt;(&lt;<span class="keyword">attribute</span>-<span class="keyword">list</span>&gt;)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> &lt;i-<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//allow duplicates</span><br><span class="line"><span class="keyword">SELECT</span> branch_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"></span><br><span class="line">//<span class="keyword">no</span> duplicates</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> branch_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"></span><br><span class="line">//<span class="keyword">allow</span> duplicates</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">all</span> branch_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"></span><br><span class="line">//<span class="keyword">all</span> <span class="keyword">attributes</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> loan</span><br></pre></td></tr></table></figure><p>allow arithmetic expressions</p><h3 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h3><p>SELECT branch_name<br>FROM loan</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> branch_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"><span class="keyword">WHERE</span> branch_name = <span class="string">"Perryridge"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> loan_name</span><br><span class="line"><span class="keyword">FROM</span> loan</span><br><span class="line"><span class="keyword">WHERE</span> amout <span class="keyword">BETWEEN</span> <span class="number">90000</span> <span class="keyword">AND</span> <span class="number">100000</span></span><br></pre></td></tr></table></figure><h3 id="From"><a href="#From" class="headerlink" title="From"></a>From</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//Cartesian product borrow x loan</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> borrow,loan</span><br></pre></td></tr></table></figure><h3 id="String-Operations"><a href="#String-Operations" class="headerlink" title="String Operations"></a>String Operations</h3><ul><li><p>% — matches any substring (like * in the file system). </p></li><li><p>_ — matches any character (like ? in the file system). </p></li><li><p>Converting from upper to lower case (and vice versa) using Functions lower( ) and upper( )</p></li><li><p>Concatenation (using “||” )</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ‘客户名=’ || customer_name </span><br><span class="line"><span class="keyword">FROM</span> *customer* </span><br><span class="line"><span class="keyword">WHERE</span> …</span><br></pre></td></tr></table></figure></li></ul><h3 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h3><p>We may specify <strong>desc</strong> for descending order or <strong>asc</strong> for ascending order, and for each attribute, ascending order is the default. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY customer_name asc</span><br></pre></td></tr></table></figure><h3 id="Set-Operations"><a href="#Set-Operations" class="headerlink" title="Set Operations"></a>Set Operations</h3><p>UNION: ⋃</p><p>INTERSECT: ⋂</p><p>EXCEPT: -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> depositor)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> borrower) </span><br><span class="line"></span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> depositor) </span><br><span class="line"><span class="keyword">INTERSECT</span> </span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> borrower) </span><br><span class="line"></span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> depositor) </span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line">(<span class="keyword">SELECT</span> customer_name <span class="keyword">FROM</span> borrower)</span><br></pre></td></tr></table></figure><h3 id="Aggregate-Functions"><a href="#Aggregate-Functions" class="headerlink" title="Aggregate Functions"></a>Aggregate Functions</h3><ul><li><p>avg(col): average value </p></li><li><p>min(col): minimum value </p></li><li><p>max(col): maximum value </p></li><li><p>sum(col): sum of values </p></li><li><p>count(col): number of values </p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">avg</span>(balance) avg_bal </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">account</span> </span><br><span class="line"><span class="keyword">WHERE</span> branch_name = ‘Perryridge’</span><br></pre></td></tr></table></figure><p>Attributes in select clause outside of aggregate functions must appear in group by list. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> branch_name, <span class="keyword">avg</span>(balance) avg_bal </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">account</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> brach_name</span><br></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><ul><li><p>The meaning is “missing information” or “inapplicable information”, i.e., unknown value or that a value does not exist. </p></li><li><p>The result of any arithmetic expression involving ‘null’ is null.   eg. 5 + null returns null. </p></li><li><p>Any comparison with null returns “unknown”   eg. 5 &lt; null or null &lt;&gt; null or null = null </p></li></ul><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> &lt;v_name&gt; <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> c1, c2, … <span class="keyword">From</span> … </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> &lt;v_name&gt; (c1, c2, …) <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> e1, e2, … <span class="keyword">FROM</span> … </span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> &lt;V_NAME&gt;</span><br></pre></td></tr></table></figure><h3 id="With"><a href="#With" class="headerlink" title="With"></a>With</h3><p>allows views to be defined <strong>locally</strong> for a query<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> max_balance(<span class="keyword">value</span>) <span class="keyword">as</span> </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">max</span>(balance)</span><br><span class="line">  <span class="keyword">FROM</span> <span class="keyword">account</span></span><br><span class="line"><span class="keyword">SELECT</span> account_number</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">account</span>, max_balance</span><br><span class="line"><span class="keyword">WHERE</span> account.balance = max_balance.value</span><br></pre></td></tr></table></figure></p><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;<span class="keyword">table</span>|<span class="keyword">view</span>&gt;</span><br><span class="line">[<span class="keyword">WHERE</span> &lt;condition&gt;&#125;</span><br></pre></td></tr></table></figure><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;<span class="keyword">table</span>|<span class="keyword">view</span>&gt;[(c1,c2,...)]</span><br><span class="line"><span class="keyword">VALUES</span>(e1,e2,...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;<span class="keyword">table</span>|<span class="keyword">view</span>&gt;[(c1,c2,...)]</span><br><span class="line"><span class="keyword">SELECT</span> e1,e2,...</span><br><span class="line"><span class="keyword">FROM</span> ...</span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span></span><br><span class="line"><span class="keyword">SET</span> balance = <span class="keyword">case</span></span><br><span class="line">                <span class="keyword">when</span> balance &lt;= <span class="number">10000</span></span><br><span class="line">                <span class="keyword">then</span> balance*<span class="number">1.05</span></span><br><span class="line">                <span class="keyword">else</span> balance*<span class="number">1.06</span></span><br><span class="line">              <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><ul><li>commit work: makes all updates of the transaction permanent in the database</li><li>rollback work: undoes all updates performed by the transaction<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance - <span class="number">100</span> <span class="keyword">WHERE</span></span><br><span class="line">account_number = <span class="string">'A-101'</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance + <span class="number">100</span> <span class="keyword">WHERE</span></span><br><span class="line">account_number = <span class="string">'A-201'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Joined-Relations"><a href="#Joined-Relations" class="headerlink" title="Joined Relations"></a>Joined Relations</h3><ul><li>Join types:<ul><li>inner join</li><li>left outer join</li><li>right outer join</li><li>full outer join</li></ul></li><li>Join Conditions<ul><li>natual</li><li>on <predicate></li><li>using (A1,A1,…,An)</li></ul></li></ul><p><img src="/images/dbs/dbs03.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211164138236.png" alt="jr"></p><p>Natural join: 以同名属性相等作为连接条件<br>Inner join：只输出匹配成功的元组<br>Outer join：还要考虑不能匹配的元组<br>非自然连接，容许不同名属性的比较，且结果关系中不消去重名属性。</p><p><br></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/grandyang/p/5346963.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/5346963.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Data-Definition-Language&quot;&gt;&lt;a href=&quot;#Data-Definition-Language&quot; class=&quot;headerlink&quot; title=&quot;Data Definition Language&quot;&gt;&lt;/a&gt;Data Definitio
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 04. Advanced SQL</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs04/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs04/</id>
    <published>2020-02-11T08:32:39.000Z</published>
    <updated>2020-02-11T08:39:21.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Integrity-Constraint"><a href="#Integrity-Constraint" class="headerlink" title="Integrity Constraint"></a>Integrity Constraint</h3><ul><li>not null (主码不可为空)</li><li>unique</li><li>check ( \<predicate> )</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">table</span> branch2(branch_name <span class="built_in">varchar</span>(<span class="number">30</span>) primary <span class="keyword">key</span>,</span><br><span class="line">                     branch_city <span class="built_in">varchar</span>(<span class="number">30</span>),</span><br><span class="line">                     assets <span class="built_in">integer</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">                     <span class="keyword">check</span> (assets &gt;= <span class="number">100</span>) );</span><br></pre></td></tr></table></figure><h3 id="Domain-Constraint"><a href="#Domain-Constraint" class="headerlink" title="Domain Constraint"></a>Domain Constraint</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">domain</span> hourly-wage <span class="built_in">numeric</span>(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">constraint value-test <span class="keyword">check</span> (<span class="keyword">value</span> &gt;= <span class="number">4.00</span>);</span><br></pre></td></tr></table></figure><h3 id="Referential-Integrity"><a href="#Referential-Integrity" class="headerlink" title="Referential Integrity"></a>Referential Integrity</h3><p>Account (<u>account-number</u>, branch-name, balance) — 参照关系 </p><p>Branch (<u>branch-name</u>, branch-city, assets) — 被参照关系 </p><p><img src="/images/dbs/dbs04.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211163658066.png" width=80%></p><p><strong>cascading action</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> course</span><br><span class="line">(...</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span> (dept_name) <span class="keyword">references</span> department</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>,</span><br><span class="line">...);</span><br></pre></td></tr></table></figure><h3 id="Assertion"><a href="#Assertion" class="headerlink" title="Assertion"></a>Assertion</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">assertion</span> &lt;<span class="keyword">assertion</span>-<span class="keyword">name</span>&gt;</span><br><span class="line"><span class="keyword">CHECK</span> &lt;predicate&gt;;</span><br></pre></td></tr></table></figure><p>But SQL does not provide a construct for asserting: <u>for all X, P (X)</u></p><p>So it is achieved in a round -about fashion, using: <u>not exists X, such that not P (X)</u></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">assertion</span> credits_earned_constraint <span class="keyword">check</span></span><br><span class="line">  (<span class="keyword">not</span> <span class="keyword">exists</span>  (<span class="keyword">select</span> <span class="keyword">ID</span></span><br><span class="line">                <span class="keyword">from</span> student</span><br><span class="line">                <span class="keyword">where</span> tot_cred &lt;&gt; (<span class="keyword">select</span> <span class="keyword">sum</span> (credits) </span><br><span class="line">                                   <span class="keyword">from</span> takes <span class="keyword">natural</span> <span class="keyword">join</span> course </span><br><span class="line">                                   <span class="keyword">where</span> student. <span class="keyword">ID</span> = takes. <span class="keyword">ID</span></span><br><span class="line">                                   <span class="keyword">and</span> grade <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">and</span> grade &lt;&gt; <span class="string">'F'</span>)</span><br><span class="line">                )</span><br><span class="line">   );</span><br></pre></td></tr></table></figure><p><br></p><h3 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a>Trigger</h3><p><img src="/images/dbs/dbs04.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211163247840.png" alt="trigger"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;CREATE/REPLACE&gt; trigger secure_ student before &lt;insert/delete/update&gt; on student</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line"><span class="keyword">IF</span>(to_char(<span class="keyword">sysdate</span>, <span class="string">'DY'</span>) <span class="keyword">in</span>（<span class="string">'星期六'</span>，<span class="string">'星期日'</span>))</span><br><span class="line"><span class="keyword">OR</span>(to_char(<span class="keyword">sysdate</span>, <span class="string">'HH24'</span>) <span class="keyword">NOT</span> <span class="keyword">Between</span> <span class="number">8</span> <span class="keyword">and</span> <span class="number">17</span>) </span><br><span class="line"><span class="keyword">THEN</span> raise_ application_error(<span class="number">-20506</span>, <span class="string">'你只能在上班时间修改数据'</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> &lt;trigger_name&gt;</span><br></pre></td></tr></table></figure><h3 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h3><ul><li>Security Specification</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> &lt;privilege <span class="keyword">list</span>&gt; <span class="keyword">on</span> &lt;<span class="keyword">table</span>/<span class="keyword">view</span>&gt;</span><br><span class="line"><span class="keyword">TO</span> &lt;<span class="keyword">user</span> <span class="keyword">list</span>&gt;</span><br></pre></td></tr></table></figure><p>  \<user list>: user-ids / public / a role</p><ul><li>Privilege</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span>,<span class="keyword">insert</span> <span class="keyword">ON</span> branch <span class="keyword">TO</span> U1,U2,U3</span><br></pre></td></tr></table></figure><p>  select / insert / update / delete / references / all privileges / all</p><ul><li><p>Roles</p><p>permit common privileges for a class of users can be specified just once</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">role</span> teller; </span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">role</span> manager; </span><br><span class="line"><span class="keyword">Grant</span> <span class="keyword">select</span> <span class="keyword">on</span> branch <span class="keyword">to</span> teller; </span><br><span class="line"><span class="keyword">Grant</span> <span class="keyword">update</span> (balance) <span class="keyword">on</span> <span class="keyword">account</span> <span class="keyword">to</span> teller; </span><br><span class="line"><span class="keyword">Grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> <span class="keyword">account</span> <span class="keyword">to</span> manager; </span><br><span class="line"><span class="keyword">Grant</span> teller <span class="keyword">to</span> manager; </span><br><span class="line"><span class="keyword">Grant</span> teller <span class="keyword">to</span> alice, bob; </span><br><span class="line"><span class="keyword">Grant</span> manager <span class="keyword">to</span> avi;</span><br></pre></td></tr></table></figure><ul><li>Revoke</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> &lt;privilege <span class="keyword">list</span>&gt; <span class="keyword">ON</span> &lt;<span class="keyword">table</span>/<span class="keyword">view</span>&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;<span class="keyword">user</span> <span class="keyword">list</span>&gt; [restrict/<span class="keyword">cascade</span>]</span><br></pre></td></tr></table></figure><p>  restrict：仅撤回用户本人</p><p>  cascade：连锁撤回，同时撤回用户对外的授权</p><h3 id="Audit-Trails"><a href="#Audit-Trails" class="headerlink" title="Audit Trails"></a>Audit Trails</h3><p>log all changes to the database</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUDIT &lt;st-opt&gt;[BY &lt;users&gt;][BY session/access][whenever successful / whenever not seccessful]</span><br></pre></td></tr></table></figure><p>\<st-opt>:  table, view, role, index</p><p>NOAUDIT… 取消审计</p><p>by\<users>缺省时对所有用户审计</p><p>by session：每次会话期间，相同类型需审计的SQL语句仅记录一次</p><ul><li>Audit in oracle:</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUDIT &lt;obj-opt&gt; ON &lt;obj&gt;/DEFAULT [by session / by access][whenever successful / whenever not successful]</span><br></pre></td></tr></table></figure><p>  实体审计对所有用户起作用</p><p>  ON \<obj> 指出审计对象表、视图名。 </p><p>  ON DEFAULT 对其后创建的所有对象起作用。 </p><p>  取消审计：NOAUDIT … </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Integrity-Constraint&quot;&gt;&lt;a href=&quot;#Integrity-Constraint&quot; class=&quot;headerlink&quot; title=&quot;Integrity Constraint&quot;&gt;&lt;/a&gt;Integrity Constraint&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【DBS】Lecture 05. E-R Model</title>
    <link href="https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs05/"/>
    <id>https://iris-cyy.github.io//Notes/Database-System/2020-02-11/dbs05/</id>
    <published>2020-02-11T08:17:10.000Z</published>
    <updated>2020-02-11T08:31:26.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h2><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70.png" alt="keys"></p><h2 id="E-R-Diagram"><a href="#E-R-Diagram" class="headerlink" title="E-R Diagram"></a>E-R Diagram</h2><ul><li>Rectangles represent entity sets. </li><li>Diamonds represent relationship sets. </li><li>Lines link attributes to entity sets and entity sets to relationship sets. </li><li>Ellipses represent attributes. <ul><li>Double ellipses represent multivalued attributes. </li><li>Dashed ellipses denote derived attributes. </li></ul></li><li>Underline indicates primary key attributes.</li></ul><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722463.png" alt="er"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722236.png" alt="er2"></p><ul><li><p>We express cardinality constraints by drawing either a directed line (→), signifying “one”, or an undirected line (—), signifying “many”,  between the relationship set and the entity set. </p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722257.png" alt="er3"></p></li><li><p>Total participation (全参与) (indicated by double line): every entity in the entity set participates in at least one relationship in the relationship set.<br>E.g., participation of loan in borrower is total.<br>Every loan must have a customer associated to it via borrower. </p></li><li><p>Partial participation (部分参与): some entities may not participate in any relationship in the relationship set.<br><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722427.png" alt="er4"></p></li><li><p>An entity set that does not have a primary key is referred to as a weak entity set<br>The discriminator or partial key (分辨符或部分码) of a weak entity set is the set of attributes that distinguishes among all those entities in a weak entity set that depend on one particular strong entity </p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722430.png" alt="er5"><br><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722331.png" alt="er6"><br><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722357.png" alt="er7"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722421.png" alt="er8"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722456.png" alt="er9"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722459.png" alt="er10"></p><p><img src="/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcmlzc3N5LmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70-20200211161722547.png" alt="er11"></p></li><li><p>若一个对象只对其名字及单值感兴趣，则可作为属性，如性别；若一个对象除名字外，本身还有其他属性需描述，则该对象应定义为实体集。如电话, 部门. </p></li><li><p>一个对象不能同时作为实体和属性. </p></li><li><p>一个实体集不能与另一实体集的属性相关联，只能实体与实体相联系</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Keys&quot;&gt;&lt;a href=&quot;#Keys&quot; class=&quot;headerlink&quot; title=&quot;Keys&quot;&gt;&lt;/a&gt;Keys&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/dbs/dbs05.assets/watermark,type_ZmFuZ3poZW5n
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Database System" scheme="https://iris-cyy.github.io/categories/Notes/Database-System/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="DBS" scheme="https://iris-cyy.github.io/tags/DBS/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1010 Radix</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-08/pat_1010/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-08/pat_1010/</id>
    <published>2020-02-08T03:22:27.000Z</published>
    <updated>2020-02-08T15:48:06.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is <code>yes</code>, if 6 is a decimal number and 110 is a binary number.</p><p>Now for any pair of positive integers $N_1$ and $N_2$, your task is to find the radix of one number while that of the other is given.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p><blockquote><p>$N_1$ $N_2$ tag radix</p></blockquote><p>Here <code>N1</code> and <code>N2</code> each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, <code>a</code>-<code>z</code> } where 0-9 represent the decimal numbers 0-9, and <code>a</code>-<code>z</code> represent the decimal numbers 10-35. The last number <code>radix</code> is the radix of <code>N1</code> if <code>tag</code> is 1, or of <code>N2</code> if <code>tag</code> is 2.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the radix of the other number so that the equation <code>N1</code> = <code>N2</code> is true. If the equation is impossible, print <code>Impossible</code>. If the solution is not unique, output the smallest possible radix.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><blockquote><p>6 110 1 10</p></blockquote><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><blockquote><p>2</p></blockquote><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><blockquote><p>1 ab 1 2</p></blockquote><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><blockquote><p>Impossible</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这题的意思和解题思路不太难，但是巨坑，过了很多次才过去。</p><p>题目意思大概就是进制转换，需要注意的有以下几个点</p><ul><li><p>radix和N可能会很大，要用<code>long long</code>而不是<code>int</code></p></li><li><p>可能会出现多种可能进制的情况，这种情况下输出最小的radix。例如<code>8 8 1 10</code>这组输入，可以是9以上任何进制，这时输出9。要注意的是，只有输入的未知进制的数是一位数的时候可能会出现这种情况，因此只要在输入是一位数的时候考虑出现多种可能进制。</p></li><li><p>还是上面那个例子，<code>8 8 1 10</code>的输入，输出是9，因为最大位数是8，只有在9以上的进制会出现8这个数字。这意味着要做一个判定，根据出现的数字或字符找到可能的最小进制。</p></li><li><p>最简单的方式是在范围内线性遍历找到对应的radix，做法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(radix2 = minR(N2); ; radix2++)&#123;</span><br><span class="line">        dec2 = toDec(N2, radix2);</span><br><span class="line">        <span class="keyword">if</span>(dec1 == dec2)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; radix2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dec2 &gt; dec1 || radix2 &gt; dec1)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中<code>minR</code>用于做上一个注意点的判定，<code>toDec</code>用于把不同进制的数转为十进制，<code>dec1</code>是已知进制的数的十进制值。</p><p>这样做会有一个测试点过不去，显示<code>运行超时</code>。问题在于线性遍历太慢，可以用二分遍历降低复杂度。在改为二分遍历之后能够过这个点。</p></li><li><p>在判断的时候要注意溢出问题，如果溢出则要减小二分范围的上界。</p></li></ul><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> N1, N2;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tag, radix, radix2 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dec1, dec2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符转换为对应的数字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">toNum</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'0'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求十进制值</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">toDec</span><span class="params">(<span class="built_in">string</span> num, <span class="keyword">long</span> <span class="keyword">long</span> radix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> next = toNum(num[i]);</span><br><span class="line">        dec = dec * radix + next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到当前数字可能的最小进制，例如12abf最小只能是十六进制</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">minR</span><span class="params">(<span class="built_in">string</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret;</span><br><span class="line">    <span class="keyword">char</span> maxc = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length(); i++)&#123;</span><br><span class="line">        maxc = <span class="built_in">max</span>(maxc, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = toNum(maxc) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        ret = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N1 &gt;&gt; N2 &gt;&gt; tag &gt;&gt; radix;</span><br><span class="line">    <span class="comment">//让已知进制的数作为N1</span></span><br><span class="line">    <span class="keyword">if</span>(tag == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">string</span> temp = N1;</span><br><span class="line">        N1 = N2;</span><br><span class="line">        N2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    dec1 = toDec(N1, radix);</span><br><span class="line">    <span class="comment">//二分遍历</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> rmin = minR(N2);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> rmax = dec1;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> r;</span><br><span class="line">    <span class="keyword">int</span> first = toNum(N2[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//如果只有一位数，且符合，即可能有多种进制情况，输出最小</span></span><br><span class="line">    <span class="keyword">if</span>(N2.length() == <span class="number">1</span> &amp;&amp; dec1 == first)&#123;</span><br><span class="line">        radix2 = rmin;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(rmin &lt;= rmax)&#123;</span><br><span class="line">            r = (rmin + rmax) / <span class="number">2</span>;</span><br><span class="line">            dec2 = toDec(N2, r);</span><br><span class="line">            <span class="comment">//如果溢出，缩小上界</span></span><br><span class="line">            <span class="keyword">if</span>(dec2 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                rmax = r - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dec2 == dec1)&#123;</span><br><span class="line">                radix2 = r;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dec2 &gt; dec1)&#123;</span><br><span class="line">                rmax = r - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dec2 &lt; dec1)&#123;</span><br><span class="line">                rmin = r + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(radix2 == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; radix2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Given a pair of positive integers, for example, 6 
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1009 Product of Polynomials</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-07/pat_1009/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-07/pat_1009/</id>
    <published>2020-02-07T05:36:19.000Z</published>
    <updated>2020-02-08T15:49:24.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>This time, you are supposed to find $A×B$ where $A$ and $B$ are two polynomials.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><blockquote><p>$K \; N_1 \; a_{N_1} \; N_2 \; a_{N_2} … N_K \; a_{N_K}$</p></blockquote><p>where $K$ is the number of nonzero terms in the polynomial, $N_i$ and $a_{N_i} (i=1,2,⋯,K)$ are the exponents and coefficients, respectively. It is given that $1≤K≤10$, $0≤N_K&lt;⋯&lt;N_2&lt;N_1≤1000$. </p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the product of $A$ and $B$ in one line, with the same format as the input. Notice that there must be <strong>NO</strong> extra space at the end of each line. Please be accurate up to 1 decimal place. </p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>2 1 2.4 0 3.2<br>2 2 1.5 1 0.5</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>3 3 3.6 2 6.0 1 1.6</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Advanced-1002的升华版，要注意的是数组的上界，两个多项式的最高次分别可以是1000，则数组上界要开到2000。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXK 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> poly[MAXN];</span><br><span class="line"><span class="keyword">int</span> K1, K2;</span><br><span class="line"><span class="keyword">int</span> expo[MAXK], expo2;</span><br><span class="line"><span class="keyword">double</span> coe[MAXK], coe2;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> first = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXN; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;MAXK)&#123;</span><br><span class="line">            expo[i] = <span class="number">0</span>;</span><br><span class="line">            coe[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        poly[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K1; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; expo[i] &gt;&gt; coe[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K2; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; expo2 &gt;&gt; coe2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;K1; j++)&#123;</span><br><span class="line">            poly[expo2+expo[j]] += coe2 * coe[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MAXN<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first == <span class="number">-1</span>)&#123;</span><br><span class="line">                first = i;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=first; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; poly[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;This time, you are supposed to find $A×B$ where $A
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1008 Elevator</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-07/pat_1008/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-07/pat_1008/</id>
    <published>2020-02-07T05:06:38.000Z</published>
    <updated>2020-02-07T05:08:44.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>The highest building in our city has only one elevator. A request list is made up with <em>N</em> positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.</p><p>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em>, followed by <em>N</em> positive numbers. All the numbers in the input are less than 100.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the total time on a single line. </p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>3 2 3 1</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>41</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>简单题直接上代码</p><p>注意点：</p><ul><li>从0出发</li><li>最后一站也要算停留的5s时间</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">stop</span>, lastStop;</span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; <span class="built_in">stop</span>;</span><br><span class="line">    time += <span class="number">6</span> * <span class="built_in">stop</span> + <span class="number">5</span>;</span><br><span class="line">    lastStop = <span class="built_in">stop</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; <span class="built_in">stop</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">stop</span> &gt; lastStop)&#123;</span><br><span class="line">            time += <span class="number">6</span> * (<span class="built_in">stop</span> - lastStop) + <span class="number">5</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            time += <span class="number">4</span> * (lastStop - <span class="built_in">stop</span>) + <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastStop = <span class="built_in">stop</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; time &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;The highest building in our city has only one elev
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1007 Maximum Subsequence Sum</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-05/pat_1007/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-05/pat_1007/</id>
    <published>2020-02-05T06:18:52.000Z</published>
    <updated>2020-02-05T09:03:32.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a sequence of $K$ integers ${ N_1, N_2, …, N_K }$. A continuous subsequence is defined to be ${ N_i, N_{i+1}, …, N_j }$ where $1≤i≤j≤K$. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p><p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence. </p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer $K (≤10000)$. The second line contains $K$ numbers, separated by a space. </p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices $i​$ and $j​$ (as shown by the sample case). If all the $K​$ numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. </p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>10<br>-10 1 2 3 4 -5 -23 3 7 -21</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>10 1 4</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这题怪坑的，过了好多次才完全过去。</p><p>题目是很经典的题目，最大子序列和，没记错的话是《数据结构与算法分析》第二章讨论了很久的一个问题。</p><p>稍稍整理一下几个经典的算法</p><h3 id="算法一：疯狂穷举"><a href="#算法一：疯狂穷举" class="headerlink" title="算法一：疯狂穷举"></a>算法一：疯狂穷举</h3><p>最差但也是最简单最不需要动脑子的算法，先穷举子序列起点，再穷举子序列终点，然后求和。</p><p>复杂度是$N^3$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ThisSum, MaxSum;</span><br><span class="line">  MaxSum = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//穷举A[i]</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">    <span class="comment">//穷举A[j]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;N; j++)&#123;</span><br><span class="line">      ThisSum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;=j; k++)&#123;</span><br><span class="line">        <span class="comment">//A[i] + ... + A[j]</span></span><br><span class="line">        ThisSum += A[k];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ThisSum &gt; MaxSum)&#123;</span><br><span class="line">      MaxSum = ThisSum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> MaxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法二：算法一的优化"><a href="#算法二：算法一的优化" class="headerlink" title="算法二：算法一的优化"></a>算法二：算法一的优化</h3><p>类似算法一，先穷举起点再穷举终点，但在求和的部分对算法一进行优化。</p><p>复杂度是$N^2$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ThisSum, MaxSum;</span><br><span class="line">  MaxSum = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//穷举A[i]</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">    ThisSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//穷举A[j]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;N; j++)&#123;</span><br><span class="line">        ThisSum += A[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ThisSum &gt; MaxSum)&#123;</span><br><span class="line">      MaxSum = ThisSum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> MaxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法三：分治"><a href="#算法三：分治" class="headerlink" title="算法三：分治"></a>算法三：分治</h3><p>用递归进行分治，把整个序列分成左右两半，整个序列的最大子序列和可能有三种情况，一种是左半个序列的最大子序列和，一种是右半个序列的最大子序列和，另一种是横跨中间分界线。分别计算这三种的最大和，再取其中最大值即可。前两种直接递归可以算出来，第三种，在左半个中求包含右边界的最大和，在右半个中求包含左边界的最大和，两者相加即可。</p><p>复杂度是$NlogN$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MaxSubSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> MaxLeftSum, MaxRightSum;</span><br><span class="line">  <span class="keyword">int</span> MaxLeftBorderSum, MaxRightBorderSum;</span><br><span class="line">  <span class="keyword">int</span> LeftBorderSum, RightBorderSum;</span><br><span class="line">  <span class="keyword">int</span> center;</span><br><span class="line">  <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">    <span class="keyword">if</span>(A[left] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> A[left];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  center = (left + right) / <span class="number">2</span>;</span><br><span class="line">  <span class="comment">//递归求左右两半的最大子序列和</span></span><br><span class="line">  MaxLeftSum = MaxSubSum(A, left, center);</span><br><span class="line">  MaxRightSum = MaxSubSum(A, center+<span class="number">1</span>, right);</span><br><span class="line">  <span class="comment">//求左半部分中包含右边界的最大和</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=center; i&gt;=left; i--)&#123;</span><br><span class="line">    LeftBorderSum += A[i];</span><br><span class="line">    <span class="keyword">if</span>(LeftBorderSum &gt; MaxLeftBorderSum)&#123;</span><br><span class="line">      MaxLeftBorderSum = LeftBorderSum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//求右半部分中包含左边界的最大和</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=center+<span class="number">1</span>; i&lt;=right; i++)&#123;</span><br><span class="line">    LeftBorderSum += A[i];</span><br><span class="line">    <span class="keyword">if</span>(RightBorderSum &gt; MaxRightBorderSum)&#123;</span><br><span class="line">      MaxRightBorderSum = RightBorderSum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>(MaxLeftBorderSum+MaxRightBorderSum, MaxLeftSum, MaxRightSum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> MaxSubSum(A, <span class="number">0</span>, N<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法四：动态规划"><a href="#算法四：动态规划" class="headerlink" title="算法四：动态规划"></a>算法四：动态规划</h3><p>一个比较取巧的优秀算法，当遇到一部分和小于零就舍弃，这样就只要进行一次遍历。</p><p>后来才发现这有点动态规划的意思，如果用<code>dp[i]</code>存以<code>A[i]</code>结尾的子序列的最大和，则<code>dp[i+1] = max(dp[i]+A[i+1], A[i+1])</code>，简化完大概就是如果<code>dp[i]&lt;0</code>就不要了酱紫。具体看代码。</p><p>复杂度是$N$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> A[], <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> thisSum, maxSum;</span><br><span class="line">  thisSum = maxSum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++)&#123;</span><br><span class="line">    thisSum += A[j];</span><br><span class="line">    <span class="keyword">if</span>(thisSum &gt; maxSum)&#123;</span><br><span class="line">      maxSum = thisSum;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(thisSum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      thisSum = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><hr><p>然后说一下遇到的坑</p><ul><li>手动划重点：If all the $K$ numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. </li><li>如果是0+全负，类似于<code>-1 0 -3 -2</code>这样，要输出<code>0 0 0</code></li><li>可以参考一下前人<a href="https://blog.csdn.net/weixin_38097576/article/details/82715413" target="_blank" rel="noopener">避雷经验</a></li></ul><p>下面贴代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> K;</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="keyword">int</span> maxsum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> first, last;</span><br><span class="line"><span class="keyword">int</span> tempf, templ;</span><br><span class="line"><span class="keyword">bool</span> zero = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(K == <span class="number">0</span>)&#123;</span><br><span class="line">        maxsum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;K; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            zero = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += num[i];</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; maxsum)&#123;</span><br><span class="line">            maxsum = sum;</span><br><span class="line">            first = tempf;</span><br><span class="line">            templ = last = i;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            tempf = templ = i+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            templ = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(maxsum &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(zero)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"0 0 0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; num[<span class="number">0</span>] &lt;&lt; <span class="string">" "</span> &lt;&lt; num[K<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxsum &lt;&lt; <span class="string">" "</span> &lt;&lt; num[first] &lt;&lt; <span class="string">" "</span> &lt;&lt; num[last] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Given a sequence of $K$ integers ${ N_1, N_2, …, N
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1006 Sign In and Sign Out</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-05/pat_1006/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-05/pat_1006/</id>
    <published>2020-02-05T02:35:48.000Z</published>
    <updated>2020-02-05T09:03:42.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer $M$, which is the total number of records, followed by $M$ lines, each in the format:</p><blockquote><p>ID_number Sign_in_time Sign_out_time</p></blockquote><p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>3<br>CS301111 15:30:28 17:00:10<br>SC3021234 08:00:00 11:25:25<br>CS301133 21:45:00 21:58:40</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>SC3021234 CS301133</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>直接比较字符串大小就行了。简单题直接上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">    <span class="built_in">string</span> ID, timeIn, timeOut, first, last;</span><br><span class="line">    <span class="built_in">string</span> inMin = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">string</span> outMax = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ID &gt;&gt; timeIn &gt;&gt; timeOut;</span><br><span class="line">        <span class="keyword">if</span>(inMin == <span class="string">""</span> || timeIn &lt; inMin)&#123;</span><br><span class="line">            inMin = timeIn;</span><br><span class="line">            first = ID;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(outMax == <span class="string">""</span> || timeOut &gt; outMax)&#123;</span><br><span class="line">            outMax = timeOut;</span><br><span class="line">            last = ID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; first &lt;&lt; <span class="string">" "</span> &lt;&lt; last &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;At the beginning of every day, the first person wh
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1005 Spell It Right</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-04/pat_1005/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-04/pat_1005/</id>
    <published>2020-02-04T14:15:56.000Z</published>
    <updated>2020-02-05T09:03:55.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a non-negative integer $N$, your task is to compute the sum of all the digits of $N$, and output every digit of the sum in English.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an $N (≤10^{100})$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>12345</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>one five</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>还挺简单。</p><p>要注意的是两个点</p><ol><li>大数。最大可能是100位，所以读入的时候要用<code>string</code>而不是<code>int</code></li><li>输入是0的时候</li></ol><p>实现代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> input;</span><br><span class="line"><span class="built_in">string</span> output = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(output != <span class="string">""</span>)&#123;</span><br><span class="line">        output = <span class="string">" "</span> + output;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            output = <span class="string">"one"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            output = <span class="string">"two"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            output = <span class="string">"three"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            output = <span class="string">"four"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            output = <span class="string">"five"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            output = <span class="string">"six"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            output = <span class="string">"seven"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            output = <span class="string">"eight"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            output = <span class="string">"nine"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            output = <span class="string">"zero"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">    <span class="keyword">int</span> length = input.length();</span><br><span class="line">    <span class="keyword">while</span>(length--)&#123;</span><br><span class="line">        sum += input[<span class="number">0</span>] - <span class="string">'0'</span>;</span><br><span class="line">        input = input.substr(<span class="number">1</span>, length+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">        output = <span class="string">"zero"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(sum)&#123;</span><br><span class="line">        trans(sum % <span class="number">10</span>);</span><br><span class="line">        sum /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; output &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Given a non-negative integer $N$, your task is to 
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1004 Counting Leaves</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-04/pat_1004/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-04/pat_1004/</id>
    <published>2020-02-04T04:05:47.000Z</published>
    <updated>2020-02-05T02:34:35.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 0&lt;$N$&lt;100, the number of nodes in a tree, and $M (&lt;N)$, the number of non-leaf nodes. Then $M$ lines follow, each in the format:</p><blockquote><p>ID K ID[1] ID[2] … ID[K]</p></blockquote><p>where <code>ID</code> is a two-digit number representing a given non-leaf node, <code>K</code> is the number of its children, followed by a sequence of two-digit <code>ID</code>‘s of its children. For the sake of simplicity, let us fix the root ID to be <code>01</code>.</p><p>The input ends with $N$ being 0. That case must NOT be processed.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you are supposed to count those family members who have no child <strong>for every seniority level</strong> starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.</p><p>The sample case represents a tree with only 2 nodes, where <code>01</code> is the root and <code>02</code> is its only child. Hence on the root <code>01</code>level, there is <code>0</code> leaf node; and on the next level, there is <code>1</code> leaf node. Then we should output <code>0 1</code> in a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>2 1<br>01 1 02</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>0 1</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这题只要根据输入构建一颗树，记录每个节点的<code>child</code>, <code>parent</code>以及<code>level</code>，然后做一个层序遍历，输出每一层没有子节点的节点数即可。</p><p>这里有一个trick，关于<code>level</code>值的更新。发现测试点中大概ID从顶层往下依次增加，并且录入的顺序从小到大，这使得树的构建减少了根据新的父子关系更新整棵子树<code>level</code>值的情况。</p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> M = <span class="number">0</span>; <span class="comment">//number of non-leaf nodes</span></span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>; <span class="comment">//number of nodes</span></span><br><span class="line"><span class="keyword">int</span> leafNum[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> child_num;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">    <span class="keyword">int</span> parent_id;</span><br><span class="line">&#125;Node[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXN; i++)&#123;</span><br><span class="line">        Node[i].child_num = <span class="number">0</span>;</span><br><span class="line">        Node[i].level = <span class="number">0</span>;</span><br><span class="line">        Node[i].parent_id = <span class="number">0</span>;</span><br><span class="line">        leafNum[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">if</span>(N == <span class="number">0</span> || M &gt; N)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id, child_id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; Node[id].child_num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;Node[id].child_num; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; child_id;</span><br><span class="line">            Node[child_id].parent_id = id;</span><br><span class="line">            <span class="comment">//如果会出现乱序情况，大概要在这里加更新level值，</span></span><br><span class="line">            <span class="comment">//并且要加判断，如果child有子节点，则在更新了level之后也要顺便更新子树所有节点的level</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node[<span class="number">1</span>].level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        Node[i].level = Node[Node[i].parent_id].level + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxlevel = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].level &gt; maxlevel)&#123;</span><br><span class="line">            maxlevel = Node[i].level;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].child_num == <span class="number">0</span>)&#123;</span><br><span class="line">            leafNum[Node[i].level]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxlevel; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; leafNum[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; leafNum[maxlevel] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来在网上发现另外一个做法，用的dfs，还挺妙，代码贴在下面，也可以看<a href="https://blog.csdn.net/richenyunqi/article/details/79533166" target="_blank" rel="noopener">原博客</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;tree(<span class="number">100</span>);<span class="comment">//下标存储结点编号，元素内容存储儿子结点编号</span></span><br><span class="line"><span class="keyword">int</span> leaveNumOfLevel[<span class="number">100</span>],maxLevel=<span class="number">-1</span>;<span class="comment">//每层叶子节点数、最大层数</span></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> level)</span></span>&#123;<span class="comment">//深度优先遍历</span></span><br><span class="line">    maxLevel=<span class="built_in">max</span>(level,maxLevel);<span class="comment">//更新最大层数</span></span><br><span class="line">    <span class="keyword">if</span>(tree[v].empty())<span class="comment">//如果没有儿子结点，则为叶节点</span></span><br><span class="line">        ++leaveNumOfLevel[level];<span class="comment">//递增该节点所处层数下的叶节点数目</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:tree[v])<span class="comment">//不是叶节点</span></span><br><span class="line">        DFS(i,level+<span class="number">1</span>);<span class="comment">//递归遍历儿子结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="keyword">int</span> id,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;id,&amp;k);</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="keyword">int</span> iid;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;iid);</span><br><span class="line">            tree[id].push_back(iid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxLevel;++i)<span class="comment">//输出每层叶子节点数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s%d"</span>,i==<span class="number">0</span>?<span class="string">""</span>:<span class="string">" "</span>,leaveNumOfLevel[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;A family hierarchy is usually presented by a pedig
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Learning CNN</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/learning_CNN/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/learning_CNN/</id>
    <published>2020-02-03T05:12:45.000Z</published>
    <updated>2020-02-03T05:15:59.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已实现的功能简述及运行简要说明"><a href="#已实现的功能简述及运行简要说明" class="headerlink" title="已实现的功能简述及运行简要说明"></a>已实现的功能简述及运行简要说明</h2><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>​    利用CNN进行手写数字识别与物体分类:</p><ol><li>使用PyTorch工具实现最基本的卷积神经网络(CNN) LeNet-5以及一个物体分类的CNN</li><li>用MNIST手写数字数据集（0-9一共十个数字）6万样本实现对LeNet-5的训练，对MNIST的1万测试样本进行测试，获得识别率。</li><li>用CIFAR-10数据库实现CNN物体分类功能的训练与测试。</li></ol><h3 id="运行简要说明"><a href="#运行简要说明" class="headerlink" title="运行简要说明"></a>运行简要说明</h3><p>​    由于本次实验使用的两个测试集都比较经典，在torchvision库中都已经做了封装，因此在本实验中选择了直接调用。运行程序后，将先将指定数据集下载到指定路径中，然后再进行训练。为了节省下载时间，也可以将下载好的数据集添加到对应路径（<code>./data/</code>）中直接进行训练。</p><p>​    <code>MNIST.py</code>用于训练MNIST测试集，<code>CIFAR.py</code>用于训练CIFAR-10测试集。</p><p><br></p><h2 id="开发与运行环境"><a href="#开发与运行环境" class="headerlink" title="开发与运行环境"></a>开发与运行环境</h2><p>​    操作系统：Windows 10，64位<br>​    开发环境：Python 3.7.3<br>​    库环境：numpy 1.16.4, torch 1.1.0, torchvision 0.3.0</p><h2 id="算法基本思路、原理"><a href="#算法基本思路、原理" class="headerlink" title="算法基本思路、原理"></a>算法基本思路、原理</h2><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><p>​    卷积神经网络(Convolutional Neural Network, CNN)是深度学习技术中极具代表的网络结构之一，在图像处理领域取得了很大的成功。CNN相较于传统的图像处理算法的优点之一在于，避免了对图像复杂的前期预处理过程（提取人工特征等），可以直接输入原始图像。</p><p>​    CNN中主要有两种类型的网络层，分别是卷积层和池化/采样层。</p><p>​    卷积层的作用是提取图像的各种特征，是卷积核在上一级输入层上通过逐一滑动窗口计算而得，卷积核中的每一个参数都相当于传统神经网络中的权值参数，与对应的局部像素相连接，将卷积核的各个参数与对应的局部像素值相乘之和，（通常还要再加上一个偏置参数），得到卷积层上的结果。</p><p>​    池化层的作用是对原始特征信号进行抽象，从而大幅度减少训练参数，另外还可以减轻模型过拟合的程度。池化/采样的方式通常有以下两种：</p><ul><li>Max-Pooling: 选择Pooling窗口中的最大值作为采样值；</li><li>Mean-Pooling: 将Pooling窗口中的所有值相加取平均，以平均值作为采样值；</li></ul><h3 id="LeNet-5"><a href="#LeNet-5" class="headerlink" title="LeNet-5"></a>LeNet-5</h3><p>​    LeNet-5是一种经典的CNN网络结构，其结构如下图：</p><p><img src="/images/cv/cnn/image-20191231174428209.png" alt="image-20191231174428209"></p><h4 id="输入层"><a href="#输入层" class="headerlink" title="输入层"></a>输入层</h4><p>​    将输入数据的尺寸统一归一化为$32 \times 32$</p><h4 id="卷积层1"><a href="#卷积层1" class="headerlink" title="卷积层1"></a>卷积层1</h4><p>​    使用6个大小为$5 \times 5$的卷积核对输入图像进行第一次卷积运算，得到6个大小为28 * 28的feature map</p><h4 id="池化层1"><a href="#池化层1" class="headerlink" title="池化层1"></a>池化层1</h4><p>​    使用$2 \times 2$的核对第一次卷积之后得到的结果进行池化，得到6个$14\times14$的map</p><h4 id="卷积层2"><a href="#卷积层2" class="headerlink" title="卷积层2"></a>卷积层2</h4><p>​    对上一层池化得到的输出进行组合，将6个特征增加为16个，使用16种$5\times 5$的卷积核进行卷积操作，得到16个$10\times10$的特征图。特征的组合如下：</p><p><img src="/images/cv/cnn/image-20191231225943896.png" alt="image-20191231225943896" style="zoom:67%;" /></p><h4 id="池化层2"><a href="#池化层2" class="headerlink" title="池化层2"></a>池化层2</h4><p>​    对输入的$10\times10$的特征图，使用$2\times2$的核进行池化，得到16个$5\times5$的feature map</p><h4 id="卷积层3"><a href="#卷积层3" class="headerlink" title="卷积层3"></a>卷积层3</h4><p>​    使用120种$5\times5$的卷积核进行卷积，输出120个$1\times1$的feature map</p><h4 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h4><p>​    使用全连接层将上一层输出的120个节点与本层的84个节点进行全连接</p><h4 id="输出层"><a href="#输出层" class="headerlink" title="输出层"></a>输出层</h4><p>​    将前一层的84个节点转换为输出的大小（与输出大小进行全连接）</p><h3 id="MNIST手写数据集"><a href="#MNIST手写数据集" class="headerlink" title="MNIST手写数据集"></a>MNIST手写数据集</h3><p>​    MNIST数据集是机器学习领域中非常经典的一个数据集，由60000个训练样本和10000个测试样本组成，每个样本都是一张28 * 28像素的灰度手写数字图片。</p><p>​    图片示例如下：</p><p><img src="/images/cv/cnn/image-20200101014446671.png" alt="image-20200101014446671" style="zoom: 25%;" /></p><h3 id="CIFAR-10数据集"><a href="#CIFAR-10数据集" class="headerlink" title="CIFAR-10数据集"></a>CIFAR-10数据集</h3><p>​    CIFAR-10数据集由10个类的60000个32x32彩色图像组成，每个类有6000个图像。有50000个训练图像和10000个测试图像。<br>​    数据集分为五个训练批次和一个测试批次，每个批次有10000个图像。测试批次包含来自每个类别的恰好1000个随机选择的图像。训练批次以随机顺序包含剩余图像，但一些训练批次可能包含来自一个类别的图像比另一个更多。总体来说，五个训练集之和包含来自每个类的正好5000张图像。<br>​    以下是数据集中的类，以及来自每个类的10个随机图像：</p><p><img src="/images/cv/cnn/image-20200101014334677.png" alt="image-20200101014334677" style="zoom: 67%;" /></p><p><br></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="LeNet5网络搭建"><a href="#LeNet5网络搭建" class="headerlink" title="LeNet5网络搭建"></a>LeNet5网络搭建</h3><p>​    根据上述LeNet5的每一层结构，搭建LeNet5神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">leNet5</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, output_size)</span>:</span></span><br><span class="line">        super(leNet5, self).__init__()</span><br><span class="line">        padding = (int)((<span class="number">32</span> - np.sqrt(input_size) )/<span class="number">2</span>)</span><br><span class="line">        channel_num = <span class="number">1</span> </span><br><span class="line">        self.c1 = nn.Conv2d(channel_num, <span class="number">6</span>, <span class="number">5</span>, padding = padding)</span><br><span class="line">        self.s2 = nn.MaxPool2d(kernel_size = <span class="number">2</span>, stride = <span class="number">2</span>)</span><br><span class="line">        self.c3 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.s4 = nn.MaxPool2d(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        self.c5 = nn.Conv2d(<span class="number">16</span>, <span class="number">120</span>, <span class="number">5</span>)</span><br><span class="line">        self.f6 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.output = nn.Linear(<span class="number">84</span>, output_size)</span><br><span class="line">        self.relu = nn.ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.relu(self.c1(x))</span><br><span class="line">        x = self.relu(self.s2(x))</span><br><span class="line">        x = self.relu(self.c3(x))</span><br><span class="line">        x = self.relu(self.s4(x))</span><br><span class="line">        x = self.relu(self.c5(x))</span><br><span class="line">        x = x.view(x.size()[<span class="number">0</span>], <span class="number">-1</span>)</span><br><span class="line">        x = self.relu(self.f6(x))</span><br><span class="line">        x = self.output(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="MNIST手写数据集测试"><a href="#MNIST手写数据集测试" class="headerlink" title="MNIST手写数据集测试"></a>MNIST手写数据集测试</h3><p>​    相关参数设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input_size = <span class="number">28</span> * <span class="number">28</span></span><br><span class="line">output_size = <span class="number">10</span></span><br><span class="line">channel_num = <span class="number">1</span></span><br><span class="line">num_epochs = <span class="number">20</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">learning_rate = <span class="number">0.4</span></span><br></pre></td></tr></table></figure><p>​    下载MNIST数据集并进行读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = torchvision.datasets.MNIST(root=<span class="string">'./data'</span>,train=<span class="literal">True</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>) </span><br><span class="line">test_dataset = torchvision.datasets.MNIST(root=<span class="string">'./data'</span>,train=<span class="literal">False</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>​    损失函数及优化器设计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lossFunction = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=learning_rate)</span><br></pre></td></tr></table></figure><p>​    训练网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> i, (images,labels) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        out = model(images)</span><br><span class="line">        loss = lossFunction(out,labels)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Epoch [&#123;&#125;/&#123;&#125;], Step [&#123;&#125;/&#123;&#125;], Loss: &#123;:.4f&#125;'</span> .format(epoch+<span class="number">1</span>, num_epochs, i+<span class="number">1</span>, total_step, loss.item()))</span><br></pre></td></tr></table></figure><h3 id="CIFAR-10数据集测试"><a href="#CIFAR-10数据集测试" class="headerlink" title="CIFAR-10数据集测试"></a>CIFAR-10数据集测试</h3><p>​    相关参数设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input_size = <span class="number">32</span> * <span class="number">32</span></span><br><span class="line">output_size = <span class="number">10</span></span><br><span class="line">channel_num = <span class="number">3</span></span><br><span class="line">num_epochs = <span class="number">20</span></span><br><span class="line">batch_size = <span class="number">128</span></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br></pre></td></tr></table></figure><p>​    下载数据集并进行读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = torchvision.datasets.CIFAR10(root=<span class="string">'./data'</span>,train=<span class="literal">True</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>) </span><br><span class="line">test_dataset = torchvision.datasets.CIFAR10(root=<span class="string">'./data'</span>,train=<span class="literal">False</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>​    损失函数及优化器设计</p><p>​    由于CIFAR-10数据集与MNIST相比更为复杂，因此使用Adam作为优化器，实验证明识别率确实比SGD更高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lossFunction = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.Adam(model.parameters(), lr=learning_rate)</span><br></pre></td></tr></table></figure><p>​    网络训练部分与MNIST类似</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;a href=&quot;#已实现的功能简述及运行简要说明&quot; class=&quot;headerlink&quot; title=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;/a&gt;已实现的功能简述及运行简要说明&lt;/h2&gt;&lt;h3 id=&quot;功能简述&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Image Stitching</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/image_stitching/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/image_stitching/</id>
    <published>2020-02-03T05:07:54.000Z</published>
    <updated>2020-02-03T05:11:48.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已实现的功能简述及运行简要说明"><a href="#已实现的功能简述及运行简要说明" class="headerlink" title="已实现的功能简述及运行简要说明"></a>已实现的功能简述及运行简要说明</h2><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>​    对输入的多张彩色图像，可以自动拼接成全景图像，同时对拼接边缘部分进行融合处理。</p><h3 id="运行简要说明"><a href="#运行简要说明" class="headerlink" title="运行简要说明"></a>运行简要说明</h3><p>​    <code>img1</code>，<code>img2</code>，… 存储读取图像的路径，生成的全景图像将在result窗口中显示，并存储为result.jpg在与代码相同目录下。</p><p><br></p><h2 id="开发与运行环境"><a href="#开发与运行环境" class="headerlink" title="开发与运行环境"></a>开发与运行环境</h2><p>​    操作系统：Windows 10，64位<br>​    开发环境：Python 3.7.3<br>​    库环境：numpy 1.16.4, cv2 3.4.2</p><p><br></p><h2 id="算法基本思路、原理"><a href="#算法基本思路、原理" class="headerlink" title="算法基本思路、原理"></a>算法基本思路、原理</h2><h3 id="SIFT特征提取"><a href="#SIFT特征提取" class="headerlink" title="SIFT特征提取"></a>SIFT特征提取</h3><p>​    SIFT即Scale Invariant Feature Transform，尺度不变特征变换。主要包含尺度空间的极值检测、特征点定位、特征方向赋值、特征点描述四个步骤。</p><p>​    首先由不同高斯卷积得到图像的高斯尺寸空间</p><p><img src="/images/cv/image_stitching/image-20191221213624451.png" alt="image-20191221213624451" style="zoom:80%;" /></p><p>​    其中，$G(x,y,σ)$是高斯核函数，$σ$代表尺度空间因子，是高斯正态分布的标准差，反应了被模糊的程度，其值越大，模糊程度越高，尺度也就越大。$L(x,y,σ)$代表高斯尺度空间，构建好后就可以检测出在不同尺度下的特征点。特征点的检测可以使用LoG算子，但是LoG的运算量过于大，通常使用的DoG，即差分高斯。</p><p><img src="/images/cv/image_stitching/image-20191221213738519.png" alt="image-20191221213738519" style="zoom:80%;" /></p><p>​    DoG是由两个相邻的高斯空间图像相减得到的。所以需要得到一系列的高斯空间尺度，可以在对图像平滑和向下取样得到结果的基础上加上高斯滤波，即对向下取样的每层图像使用不同的尺度空间因子$σ$进行模糊。通过这样的方式，通过相邻两层相减就可以得到DoG的集合。</p><p>​    为了寻找尺度空间的极值点，每个像素点要和其图像域（同一尺度空间）和尺度域（相邻的尺度空间）的所有相邻点进行比较，当其大于（或者小于）所有相邻点时，该点就是极值点。</p><p><img src="/images/cv/image_stitching/image-20191221213900801.png" alt="image-20191221213900801" style="zoom: 50%;" /></p><p>​    利用特征点邻域像素的梯度分布特性来确定其方向参数，再利用图像的梯度直方图求取关键点局部结构的稳定方向。</p><p><img src="/images/cv/image_stitching/image-20191221220450416.png" alt="image-20191221220450416" style="zoom: 50%;" /></p><h3 id="特征点匹配"><a href="#特征点匹配" class="headerlink" title="特征点匹配"></a>特征点匹配</h3><p>​    通过K邻近算法将之前使用SIFT算法得到的特征点以及相应特征描述进行匹配。使用KNN算法找到最近邻的两个数据点，如果这两个点的距离比值小于指定的值，那么我们就可以认为这两个点是最接近的，并认为这两个点是好的匹配点加入到我们的列表中。</p><h3 id="图像变换"><a href="#图像变换" class="headerlink" title="图像变换"></a>图像变换</h3><p>​    通过Homography矩阵进行图像变换。使用之前得到的匹配点计算Homography矩阵。通过矩阵的表达式可以看出，需要求解这六个未知数需要用到三对匹配点。而这些点的选择将通过RANSAC算法来进行。</p><p><img src="/images/cv/image_stitching/image-20191221221017082.png" alt="image-20191221221017082" style="zoom: 40%;" /></p><p>​    RANSAC算法即随机抽样一致算法（Random Sample Consensus）。将从数据中随机选择的点定位内点，拟合模型，然后将其他点带入模型中，如果Loss在指定阈值之内，则将这些点标为内点。如果内点数量足够多则可以认为模型比较理想。重复以上步骤得到最理想的模型。</p><h3 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h3><p>​    一种图像融合的方式是，使用高斯金字塔和拉普拉斯金字塔，对尺寸相同但是内容不同的两张图片进行无缝连接。算法及示例如下：</p><p><img src="/images/cv/image_stitching/image-20191221222509555.png" alt="image-20191221222509555" style="zoom: 40%;" /></p><p><img src="/images/cv/image_stitching/image-20191221222537361.png" alt="image-20191221222537361" style="zoom:50%;" /></p><p><img src="/images/cv/image_stitching/image-20191221222639642.png" alt="image-20191221222639642" style="zoom: 33%;" /></p><p>​    在本项目的实现，即全景图片的拼接中，由于拼接部分内容相似，只是可能存在色差等问题，因此采用更为简便的方法。即根据当前像素点与待融合部分左边缘的距离，选择递增的权重，在待融合部分进行渐变显示。<br>$$<br>output\,[i,\,j] = img_left\,[i,\,j] \times (1-\alpha) \; + \; img_right\,[i,\,j] \times \alpha<br>$$</p><p>$$<br>\alpha = \frac{j-leftend}{rightend-leftend}<br>$$</p><p><br></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>​    直接调用opencv中的SIFT相关函数进行特征匹配，实现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift_compute</span><span class="params">(img)</span>:</span></span><br><span class="line">    sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">    kp, des = sift.detectAndCompute(img, <span class="literal">None</span>)</span><br><span class="line">    kp_img = cv2.drawKeypoints(img, kp, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> kp_img, kp, des</span><br></pre></td></tr></table></figure><h3 id="特征点匹配-1"><a href="#特征点匹配-1" class="headerlink" title="特征点匹配"></a>特征点匹配</h3><p>​    调用knnMatch函数进行特征点匹配，如果距离相近，则认为是好的匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bf = cv2.BFMatcher()</span><br><span class="line">matches = bf.knnMatch(des1, des2, k=<span class="number">2</span>)</span><br><span class="line">k = <span class="number">0.75</span></span><br><span class="line">goodMatch = []</span><br><span class="line"><span class="keyword">for</span> (i, j) <span class="keyword">in</span> matches:</span><br><span class="line">    <span class="keyword">if</span> i.distance &lt; k * j.distance:</span><br><span class="line">        goodMatch.append(i)</span><br></pre></td></tr></table></figure><h3 id="图像变换-1"><a href="#图像变换-1" class="headerlink" title="图像变换"></a>图像变换</h3><p>​    调用函数，利用RANSAC算法计算Homography矩阵，并进行图像变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fitting transformation</span></span><br><span class="line">ptsA= np.float32([kp1[m.queryIdx].pt <span class="keyword">for</span> m <span class="keyword">in</span> goodMatch]).reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">ptsB = np.float32([kp2[m.trainIdx].pt <span class="keyword">for</span> m <span class="keyword">in</span> goodMatch]).reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">ransacReprojThreshold = <span class="number">4</span>  </span><br><span class="line"><span class="comment">#compute Homography matrix by RANSAC</span></span><br><span class="line">H, status =cv2.findHomography(ptsA,ptsB,cv2.RANSAC,ransacReprojThreshold)</span><br></pre></td></tr></table></figure><h3 id="图像融合-1"><a href="#图像融合-1" class="headerlink" title="图像融合"></a>图像融合</h3><p>​    将位于左边的图片作为要叠加的图片，位于右边的图片（之前进行变换的图片）作为被叠加的图片。为了除去黑色边缘，检测左边图片的像素点，若不在黑边区域则进行显示，否则不显示。此外，若检测得到当前位置为两张图片的重叠区域，则进行融合处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#blending</span></span><br><span class="line">mask_start = <span class="number">0</span> <span class="comment">#the left index of blending</span></span><br><span class="line">mask_end = img_left.shape[<span class="number">1</span>] <span class="comment">#the right index of blending</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(img_left.shape[<span class="number">1</span>]):</span><br><span class="line">    <span class="keyword">if</span> imgOutput[<span class="number">0</span>,i,:].any() != <span class="number">0</span>:</span><br><span class="line">        mask_start = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#to avoid black edges, if the pixel is black, don't show it</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(img_left.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(img_left.shape[<span class="number">1</span>]<span class="number">-1</span>):              </span><br><span class="line">        <span class="keyword">if</span> img_left[i,j+<span class="number">1</span>,:].any() != <span class="number">0</span>:           </span><br><span class="line">            <span class="comment">#in the overlap of two pictures, if the pixel is not so different, apply blending       </span></span><br><span class="line">            <span class="keyword">if</span> imgOutput[i,j,:].any() != <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> isdist(imgOutput[i,j], img_left[i,j]):</span><br><span class="line">                alpha = (j-mask_start) / (mask_end-mask_start)</span><br><span class="line">                imgOutput[i,j] = img_left[i,j] * (<span class="number">1</span>-alpha) + imgOutput[i,j] * alpha</span><br><span class="line">            <span class="keyword">else</span>:    </span><br><span class="line">                imgOutput[i,j] = img_left[i,j]</span><br></pre></td></tr></table></figure><h3 id="显示处理"><a href="#显示处理" class="headerlink" title="显示处理"></a>显示处理</h3><p>​    去除拼接后图像空白的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rows, cols &#x3D; np.where(imgIn[:,:,0] !&#x3D;0)</span><br><span class="line">min_row, max_row &#x3D; min(rows), max(rows) +1</span><br><span class="line">min_col, max_col &#x3D; min(cols), max(cols) +1</span><br><span class="line">imgOut &#x3D; imgIn[min_row:max_row,min_col:max_col,:]</span><br><span class="line">return imgOut</span><br></pre></td></tr></table></figure><p><br></p><h2 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h2><h3 id="yosemite-test"><a href="#yosemite-test" class="headerlink" title="yosemite-test"></a>yosemite-test</h3><h4 id="特征点图"><a href="#特征点图" class="headerlink" title="特征点图"></a>特征点图</h4><p><img src="/images/cv/image_stitching/image-20191221224226332.png" alt="image-20191221224226332" style="zoom:50%;" /></p><h4 id="特征点匹配图"><a href="#特征点匹配图" class="headerlink" title="特征点匹配图"></a>特征点匹配图</h4><p><img src="/images/cv/image_stitching/image-20191221224253606.png" alt="image-20191221224253606" style="zoom:67%;" /></p><h4 id="Homography图像变换"><a href="#Homography图像变换" class="headerlink" title="Homography图像变换"></a>Homography图像变换</h4><p><img src="/images/cv/image_stitching/image-20191221224530256.png" alt="image-20191221224530256" style="zoom:67%;" /></p><h4 id="最终拼接结果"><a href="#最终拼接结果" class="headerlink" title="最终拼接结果"></a>最终拼接结果</h4><p><img src="/images/cv/image_stitching/image-20191221224632376.png" alt="image-20191221224632376"></p><h3 id="其他测试图"><a href="#其他测试图" class="headerlink" title="其他测试图"></a>其他测试图</h3><p>​    使用自己拍摄的图像进行拼接，结果如下：</p><p><img src="/images/cv/image_stitching/image-20191222190616426.png" alt="image-20191222190616426"></p><p>​    可以看出来结果不尽如人意。分析原因可能有以下几点：</p><ol><li>使用手机进行拍摄，在拍摄时就可以发现，镜头边缘变形非常严重，这可能导致了在图像进行拼接时，由于边缘变形导致Homography矩阵出现偏差，这种变形进行累加将导致待拼接的图像数量越多，整体变形越严重</li><li>在本项目的拼接处理中，以最左边的图片作为基准，对其他图片进行变换并融合叠加，这在一定程度上加大了最右边图像所需要做的变形。猜测如果以最中间图片作为基准，对两边图片进行变换，将会有更好的效果</li></ol><p>​    为了验证以上两点猜想，用手机全景照相功能拍摄了一张全景图像，裁剪成多张图片之后再进行拼接，得到结果如下：</p><p><img src="/images/cv/image_stitching/image-20191222190047773.png" alt="image-20191222190047773"></p><p>​    可以看出来效果符合预期，说明之前不符合预期的情况确实可能是由于以上原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;a href=&quot;#已实现的功能简述及运行简要说明&quot; class=&quot;headerlink&quot; title=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;/a&gt;已实现的功能简述及运行简要说明&lt;/h2&gt;&lt;h3 id=&quot;功能简述&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Harris Corner Detection</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/harris_corner/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/harris_corner/</id>
    <published>2020-02-03T05:03:45.000Z</published>
    <updated>2020-02-03T05:06:48.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已实现的功能简述及运行简要说明"><a href="#已实现的功能简述及运行简要说明" class="headerlink" title="已实现的功能简述及运行简要说明"></a>已实现的功能简述及运行简要说明</h2><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>​    对输入的一张彩色图像，自己写代码实现Harris Corner检测算法，显示中间的处理结果及最终的检测结果，包括最大特征值图，最小特征值图，R图（可以考虑彩色展示），原图上叠加检测结果等，并将这些中间结果都输出成图像文件。</p><h3 id="运行简要说明"><a href="#运行简要说明" class="headerlink" title="运行简要说明"></a>运行简要说明</h3><p>​    原始图像位置在<code>img_path</code>变量中存储，将在<code>origin</code>窗口中进行显示；最大特征值图在<code>lambda_max</code>窗口中显示，在相同目录下存储为<code>lambda_max.jpg</code>；最小特征值图在<code>lambda_min</code>窗口中进行显示，在相同目录下存储为<code>lambda_min.jpg</code>；R图在<code>R</code>窗口中显示，在相同目录下存储为<code>R.jpg</code>；设置threshold之后的R图在<code>R_threshold</code>窗口中显示，存储为<code>R_threshold.jpg</code>；局部极大值点图在<code>local_max</code>窗口中显示，存储为<code>local_max.jpg</code>；原图叠加显示结果在<code>cover</code>窗口中显示，并存储为<code>cover.jpg</code>。</p><p><br></p><h2 id="开发与运行环境"><a href="#开发与运行环境" class="headerlink" title="开发与运行环境"></a>开发与运行环境</h2><p>​    操作系统：Windows 10，64位</p><p>​    开发环境：Python 3.7.3</p><p>​    库环境：numpy 1.16.4, cv2 4.1.1</p><p><br></p><h2 id="算法基本思路、原理"><a href="#算法基本思路、原理" class="headerlink" title="算法基本思路、原理"></a>算法基本思路、原理</h2><p>​    角点检测的基本思想是，使用一个固定窗口在图像上进行任意方向上的滑动，比较滑动前与滑动后两种情况，窗口中的像素灰度变化程度，如果存在任意方向上的滑动，都有着较大灰度变化，那么我们可以认为该窗口中存在角点。</p><p><img src="/images/cv/harris/image-20191210103829827.png" alt="image-20191210103829827" style="zoom: 50%;" /></p><p>​    当窗口发生[u,v]移动时，那么滑动前与滑动后对应的窗口中的像素点灰度变化描述如下：</p><p><img src="/images/cv/harris/image-20191210103858663.png" alt="image-20191210103858663" style="zoom: 40%;" /></p><p>​    其中$[u,v]$是窗口的偏移量，$(x,y)$是窗口内所对应的像素坐标位置，窗口有多大，就有多少个位置。$w(x,y)$是窗口函数，有以下两种表示方法，最简单情形就是窗口内的所有像素所对应的w权重系数均为1。但有时候，我们会将$w(x,y)$函数设定为以窗口中心为原点的二元正态分布或高斯分布。如图所示：</p><p><img src="/images/cv/harris/image-20191210104139196.png" alt="image-20191210104139196" style="zoom: 50%;" /></p><p>​    根据上述表达式，当窗口处在平坦区域上滑动，可以想象的到，灰度不会发生变化，那么E(u,v) = 0；如果窗口处在比纹理比较丰富的区域上滑动，那么灰度变化会很大。算法最终思想就是计算灰度发生较大变化时所对应的位置，当然这个较大是指针任意方向上的滑动，并非单指某个方向。</p><p>​    我们对$E(w,v)$表达式进行泰勒展开，结果如下：</p><p><img src="/images/cv/harris/image-20191210104336762.png" alt="image-20191210104336762" style="zoom:50%;" /></p><p>​    可以将$E(u,v)$表达式更新为：</p><p><img src="/images/cv/harris/image-20191210104534120.png" alt="image-20191210104534120" style="zoom:40%;" /></p><p>​    其中</p><p><img src="/images/cv/harris/image-20191210104546366.png" alt="image-20191210104546366" style="zoom:40%;" /></p><p>​    求解M的两个特征值$\lambda_1$和$\lambda_2$，可以根据两个特征值直接的关系得出对应像素点的位置信息（边缘or角点or平坦区域）</p><p>​        corner：在水平、竖直两个方向上变化均较大的点，即Ix、Iy都较大； </p><p>​        edge ：仅在水平、或者仅在竖直方向有较大的点，即Ix和Iy只有其一较大 ；</p><p>​        flat  ： 在水平、竖直方向的变化量均较小的点，即Ix、Iy都较小；</p><p><img src="/images/cv/harris/image-20191210104846204.png" alt="image-20191210104846204" style="zoom:50%;" /></p><p>​    可以定义角点响应函数R来表示：</p><p><img src="/images/cv/harris/image-20191210105159377.png" alt="image-20191210105159377" style="zoom: 40%;" /></p><p>​    其中k是介于0.04-0.06间的常数。</p><p>​    针对三种不同区域的点，R的取值情况如下：</p><p>​        corner：R为大数值整数</p><p>​        edge：R为大数值负数</p><p>​        flat：绝对值R是小数值</p><p><img src="/images/cv/harris/image-20191210105718641.png" alt="image-20191210105718641" style="zoom:50%;" /></p><p><br></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="梯度计算"><a href="#梯度计算" class="headerlink" title="梯度计算"></a>梯度计算</h3><p>​    计算各像素点位置的x、y方向梯度值及梯度方向，实现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height<span class="number">-1</span>):</span><br><span class="line">        ix[i,j] = (int(img[i,j]) - int(img[i+<span class="number">1</span>,j]) + int(img[i,j+<span class="number">1</span>]) - int(img[i+<span class="number">1</span>,j+<span class="number">1</span>])) / <span class="number">2</span></span><br><span class="line">        iy[i,j] = (int(img[i,j]) - int(img[i,j+<span class="number">1</span>]) + int(img[i+<span class="number">1</span>,j]) - int(img[i+<span class="number">1</span>,j+<span class="number">1</span>])) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> ix[i,j] != <span class="number">0</span>:</span><br><span class="line">            theta[i,j] = np.arctan(iy[i,j] / ix[i,j]) * <span class="number">180</span> / np.pi</span><br><span class="line">            <span class="keyword">if</span>(theta[i,j] &lt; <span class="number">0</span>):</span><br><span class="line">                theta[i,j] = theta[i,j] + <span class="number">180</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            theta[i,j] = <span class="number">90</span></span><br></pre></td></tr></table></figure><h3 id="M矩阵构建及计算"><a href="#M矩阵构建及计算" class="headerlink" title="M矩阵构建及计算"></a>M矩阵构建及计算</h3><p>​    根据原理中的公式，对前一步计算得到的x、y方向梯度值进行计算，得到 $I_X^2$ 、$I_Y^2$ 和 $I_{XY}$，并进行高斯滤波，减少噪声带来的影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ixx = cv2.GaussianBlur(ix*ix, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">1.4</span>) <span class="comment">#ix^2</span></span><br><span class="line">iyy = cv2.GaussianBlur(iy*iy, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">1.4</span>) <span class="comment">#iy^2</span></span><br><span class="line">ixy = cv2.GaussianBlur(ix*iy, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">1.4</span>) <span class="comment">#ix*iy</span></span><br></pre></td></tr></table></figure><p>​    计算M的行列式、迹、特征值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">detM = ixx * iyy - ixy * ixy <span class="comment">#行列式</span></span><br><span class="line">traceM = ixx + iyy <span class="comment">#迹</span></span><br><span class="line">lambda_max = (traceM + np.sqrt(np.abs(traceM**<span class="number">2</span><span class="number">-4</span>*detM)))/<span class="number">2</span> <span class="comment">#较大特征值</span></span><br><span class="line">lambda_min = (traceM - np.sqrt(np.abs(traceM**<span class="number">2</span><span class="number">-4</span>*detM)))/<span class="number">2</span> <span class="comment">#较小特征值</span></span><br></pre></td></tr></table></figure><h3 id="角点响应函数"><a href="#角点响应函数" class="headerlink" title="角点响应函数"></a>角点响应函数</h3><p>​    计算角点响应函数，并进行处理，过滤掉R值小于0（即平坦区域的点）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">R = detM - k * traceM**<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> R[i,j] &lt; <span class="number">0</span>:</span><br><span class="line">            R[i,j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>​    设置阈值，去除边缘点，只保留角点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">threshold = np.max(R) / <span class="number">100000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> R[i][j] &gt; threshold:</span><br><span class="line">            Rthreshold[i][j] = R[i][j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Rthreshold[i][j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="局部极大值"><a href="#局部极大值" class="headerlink" title="局部极大值"></a>局部极大值</h3><p>​    在之前选择的角点中进一步进行筛选，只保留局部极大值点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>, width<span class="number">-15</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">15</span>, height<span class="number">-15</span>):</span><br><span class="line">        <span class="keyword">if</span> R[i,j] == np.max(R[i<span class="number">-15</span>:i+<span class="number">15</span>, j<span class="number">-15</span>:j+<span class="number">15</span>]) <span class="keyword">and</span> R[i][j] &gt; threshold:</span><br><span class="line">            local_max[i][j] = <span class="number">255</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            local_max[i][j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="叠加显示"><a href="#叠加显示" class="headerlink" title="叠加显示"></a>叠加显示</h3><p>​    在原图上叠加显示角点检测结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,width<span class="number">-15</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">15</span>,height<span class="number">-15</span>):</span><br><span class="line">        <span class="keyword">if</span> local_max[i,j] == <span class="number">255</span>:</span><br><span class="line">            img_cover[i<span class="number">-2</span>:i+<span class="number">2</span>,j<span class="number">-2</span>:j+<span class="number">2</span>,<span class="number">0</span>] = <span class="number">255</span></span><br><span class="line">            img_cover[i<span class="number">-2</span>:i+<span class="number">2</span>,j<span class="number">-2</span>:j+<span class="number">2</span>,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">            img_cover[i<span class="number">-2</span>:i+<span class="number">2</span>,j<span class="number">-2</span>:j+<span class="number">2</span>,<span class="number">2</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h2><h3 id="课件样例"><a href="#课件样例" class="headerlink" title="课件样例"></a>课件样例</h3><p>​    先对课件中的样例进行测试，结果如下：</p><h4 id="最大特征值图"><a href="#最大特征值图" class="headerlink" title="最大特征值图"></a>最大特征值图</h4><p><img src="/images/cv/harris/image-20191210111911555.png" alt="image-20191210111911555" style="zoom:50%;" /></p><h4 id="最小特征值图"><a href="#最小特征值图" class="headerlink" title="最小特征值图"></a>最小特征值图</h4><p><img src="/images/cv/harris/image-20191210111936812.png" alt="image-20191210111936812" style="zoom:50%;" /></p><h4 id="R图"><a href="#R图" class="headerlink" title="R图"></a>R图</h4><p>​    设置阈值前：</p><p><img src="/images/cv/harris/image-20191210112012691.png" alt="image-20191210112012691" style="zoom:50%;" /></p><p>​    设置阈值后：</p><p><img src="/images/cv/harris/image-20191210112154458.png" alt="image-20191210112154458" style="zoom:50%;" /></p><h4 id="局部极大值-1"><a href="#局部极大值-1" class="headerlink" title="局部极大值"></a>局部极大值</h4><p><img src="/images/cv/harris/image-20191210112229014.png" alt="image-20191210112229014" style="zoom:50%;" /></p><h4 id="原图叠加显示"><a href="#原图叠加显示" class="headerlink" title="原图叠加显示"></a>原图叠加显示</h4><p><img src="/images/cv/harris/image-20191210112256553.png" alt="image-20191210112256553" style="zoom:50%;" /></p><h3 id="其他测试图"><a href="#其他测试图" class="headerlink" title="其他测试图"></a>其他测试图</h3><p>​    自己拍摄图片进行检测，结果如下：</p><h4 id="原始图像："><a href="#原始图像：" class="headerlink" title="原始图像："></a>原始图像：</h4><p><img src="/images/cv/harris/image-20191210110847884.png" alt="image-20191210110847884" style="zoom: 50%;" /></p><h4 id="最大特征值图-1"><a href="#最大特征值图-1" class="headerlink" title="最大特征值图"></a>最大特征值图</h4><p><img src="/images/cv/harris/image-20191210111049232.png" alt="image-20191210111049232" style="zoom:50%;" /></p><h4 id="最小特征值图-1"><a href="#最小特征值图-1" class="headerlink" title="最小特征值图"></a>最小特征值图</h4><p><img src="/images/cv/harris/image-20191210111150195.png" alt="image-20191210111150195" style="zoom:50%;" /></p><h4 id="R图-1"><a href="#R图-1" class="headerlink" title="R图"></a>R图</h4><p>​    由于发现在图片中各处R值大多分布在两端，因此用彩色显示效果并不好，在这里只做灰度显示</p><p>​    设置阈值前：</p><p><img src="/images/cv/harris/image-20191210111324275.png" alt="image-20191210111324275" style="zoom:50%;" /></p><p>​    设置阈值后：</p><p><img src="/images/cv/harris/image-20191210111413499.png" alt="image-20191210111413499" style="zoom:50%;" /></p><h4 id="局部最大值"><a href="#局部最大值" class="headerlink" title="局部最大值"></a>局部最大值</h4><p><img src="/images/cv/harris/image-20191210111533678.png" alt="image-20191210111533678" style="zoom:50%;" /></p><h4 id="原图覆盖显示"><a href="#原图覆盖显示" class="headerlink" title="原图覆盖显示"></a>原图覆盖显示</h4><p><img src="/images/cv/harris/image-20191210111601612.png" alt="image-20191210111601612" style="zoom:50%;" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;a href=&quot;#已实现的功能简述及运行简要说明&quot; class=&quot;headerlink&quot; title=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;/a&gt;已实现的功能简述及运行简要说明&lt;/h2&gt;&lt;h3 id=&quot;功能简述&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Canny Edge Detection</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/canny_edge/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/canny_edge/</id>
    <published>2020-02-03T04:56:39.000Z</published>
    <updated>2020-02-03T05:02:55.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已实现的功能简述及运行简要说明"><a href="#已实现的功能简述及运行简要说明" class="headerlink" title="已实现的功能简述及运行简要说明"></a>已实现的功能简述及运行简要说明</h2><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>​    对输入的彩色图像实现Canny Edge检测算法，自己写函数实现图像梯度计算、非极大抑制、双阈值等步骤，显示中间处理结果及最终检测结果，并将结果输出成图像文件。最终边缘结果图覆盖在原彩色图像后，提取彩色边缘图。</p><h3 id="运行简要说明"><a href="#运行简要说明" class="headerlink" title="运行简要说明"></a>运行简要说明</h3><p>​    原始图像在<code>img_path</code>变量中存储，将在<code>origin</code>窗口中进行显示；高斯平滑滤波的结果在<code>gaussian</code>窗口中显示，在相同目录下存储为<code>gaussian.jpg</code>；图像梯度幅值结果在<code>gradient</code>窗口中进行显示，在相同目录下存储为<code>gradient.jpg</code>；非极大值抑制结果在<code>nms</code>窗口中显示，在相同目录下存储为<code>nms.jpg</code>；双阈值处理结果在<code>dt</code>窗口中显示，存储为<code>dt.jpg</code>；最终提取得到的彩色边缘图在<code>edge</code>窗口中显示，并存储为<code>edge.jpg</code>。</p><p><br></p><h2 id="开发与运行环境"><a href="#开发与运行环境" class="headerlink" title="开发与运行环境"></a>开发与运行环境</h2><p>​    操作系统：Windows 10，64位<br>​    开发环境：Python 3.7.3<br>​    库环境：numpy 1.16.4, cv2 4.1.1</p><p><br></p><h2 id="算法基本思路、原理"><a href="#算法基本思路、原理" class="headerlink" title="算法基本思路、原理"></a>算法基本思路、原理</h2><h3 id="高斯滤波器平滑图像"><a href="#高斯滤波器平滑图像" class="headerlink" title="高斯滤波器平滑图像"></a>高斯滤波器平滑图像</h3><p>​    Canny Edge 检测算法的第一个步骤是使用高斯滤波器进行滤波平滑操作，此步骤的目的是对原始图片进行模糊处理，减少原始图片的噪声，使得边缘信息更为明确。高斯滤波器是对连续高斯函数的离散近似，对高斯曲面进行离散采样和归一化得出。通过将原始图像与高斯滤波器进行卷积可以对图像实现高斯滤波平滑。</p><p>​    二维高斯函数如下所示：<br>$$<br>H(x,y)=e^{-\frac{x^2+y^2}{2\sigma^2}}<br>$$<br>​    对高斯函数进行离散化操作之后，得到 $(2k+1)\times(2k+1)$ 滤波器的计算公式如下：<br>$$<br>H[i,j] = \frac{1}{2\pi\sigma^2}e^{-\frac{(i-k-1)^2+(j-k-1)^2}{2\sigma^2}}<br>$$</p><h3 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h3><p>​    边缘检测的一种方式是，用一阶偏导有限差分计算梯度幅值和方向检测边缘。在图像的边缘处会出现强度快速变化，因此可以通过计算图像的梯度，找出其中幅值来识别图像的边缘。由于图片信息是离散的，可以通过在单位像素点上图片强度的变化率对梯度进行离散近似。</p><p>​    对梯度进行离散近似之后的计算公式如下，分别计算x方向和y方向上的梯度：<br>$$<br>\frac{\partial f}{\partial x} =（\frac{f(x_{n+1},y_n)-f(x_n,y_n)}{\Delta x}+\frac{f(x_{n+1},y_{n+1})-f(x_n,y_{n+1})}{\Delta x}）/2<br>$$</p><p>$$<br>\frac{\partial f}{\partial y} =（\frac{f(x_n,y_{n+1})-f(x_n,y_n)}{\Delta y}+\frac{f(x_{n+1},y_{n+1})-f(x_{n+1},y_n)}{\Delta y}）/2<br>$$</p><p>​    计算梯度幅值的公式为：<br>$$<br>M=\sqrt{\frac{\partial f}{\partial x }^2 + \frac{\partial f}{\partial y} ^2}<br>$$<br>​    梯度方向，即函数最大变化率方向：<br>$$<br>\theta = arctan^{-1}(\frac{\partial f}{\partial y}/\frac{\partial f}{\partial x})<br>$$<br>​    另一种方式是使用sobel、prewitt等算子进行卷积计算。</p><h3 id="非极大抑制（NMS）"><a href="#非极大抑制（NMS）" class="headerlink" title="非极大抑制（NMS）"></a>非极大抑制（NMS）</h3><p>​    去除幅值局部变化中非极大的点，使边缘变细。</p><p>​    在查阅资料以及学习的过程中发现有两种方式可以对梯度幅值进行非极大抑制。</p><p>​    第一种方式是实现方向角的离散化，即将当前坐标点的梯度方向（$\theta$）根据所在的区域离散化为0, 45, 90, 135四个值。如图所示：</p><p><img src="/images/cv/canny/%7B6AD5E307-0299-74AE-648C-BB01B5DE3FF8%7D.jpg" width=400></p><p>​    比较梯度方向离散化后所在方向对应相邻的像素点与当前像素点的梯度幅值，若当前像素点较大则保留，否则丢弃。</p><p>​    第二种方式是在梯度方向上假设存在额外的像素点，如图所示：</p><p><img src="/images/cv/canny/%7BF79140B7-5760-262B-D0A1-F5FC33C59BF3%7D-1575126849212.jpg" width=400></p><p>​    假设a,b是额外生成的像素，可通过线性插值得到a,b的颜色信息。</p><p>​    例如对于b：<br>$$<br>tan \theta = \frac{Gy}{Gx}<br>$$</p><p>$$<br>d_1 = \frac{Gx}{Gy}, \;\; d_2 = 1-d_1<br>$$</p><p>$$<br>b=\frac{d_1}{d_1+d_2} \times g3 + \frac{d_2}{d_1+d_2} \times g4<br>$$</p><p>​    比较当前像素点c与新像素点a,b的梯度关系，若当前像素点比新的两个像素点都大则认为是极值，保留，否则丢弃。</p><h3 id="双阈值检测与边缘连接"><a href="#双阈值检测与边缘连接" class="headerlink" title="双阈值检测与边缘连接"></a>双阈值检测与边缘连接</h3><p>​    设定两个边缘阈值<code>TL</code>和<code>TH</code>，梯度大于TH的被认为是真边缘，保留；低于TL的被认为非边缘，丢弃；介于两者之间的则根据连通性进行判断，若其与真边缘联通，则认为是边缘，否则丢弃。</p><h3 id="提取彩色边缘"><a href="#提取彩色边缘" class="headerlink" title="提取彩色边缘"></a>提取彩色边缘</h3><p>​    读取生成的边缘图像信息，若为边缘，则显示原图像的像素点，否则不显示。最终得到边缘结果覆盖在原彩色图像上得到的彩色边缘图。</p><p><br></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="高斯平滑滤波"><a href="#高斯平滑滤波" class="headerlink" title="高斯平滑滤波"></a>高斯平滑滤波</h3><p>​    使用参数为1.4，大小为5*5的高斯滤波器进行滤波，先使用离散化近似的高斯公示计算高斯核每一位置的值，然后进行归一化处理，将处理完成的高斯核与原图像进行卷积，得到模糊处理后的图像。</p><p>​    实现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        g_ker[i,j] = np.exp(<span class="number">-1</span>*(np.square(i<span class="number">-3</span>)+np.square(j<span class="number">-3</span>))/(<span class="number">2</span>*np.square(sigma)))/(<span class="number">2</span>*np.pi*np.square(sigma))</span><br><span class="line">        g_sum = g_sum + g_ker[i,j]</span><br><span class="line">g_ker = g_ker / g_sum <span class="comment">#归一化</span></span><br><span class="line">g_img = cv2.filter2D(img, <span class="number">-1</span>, g_ker) <span class="comment">#卷积</span></span><br></pre></td></tr></table></figure><h3 id="边缘检测-1"><a href="#边缘检测-1" class="headerlink" title="边缘检测"></a>边缘检测</h3><p>​    在实验过程中，尝试使用了sobel算子卷积和梯度幅值计算两种方式进行边缘检测。</p><p>​    sobel算子卷积的实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sobel算子</span></span><br><span class="line">sobelker_x = np.array([[<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">-2</span>,<span class="number">0</span>,<span class="number">2</span>], [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">sobelker_y = np.array([[<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>], [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="comment">#卷积</span></span><br><span class="line">grad_x = cv2.convertScaleAbs(cv2.filter2D(img, <span class="number">-1</span>, sobelker_x))</span><br><span class="line">grad_y = cv2.convertScaleAbs(cv2.filter2D(img, <span class="number">-1</span>, sobelker_y))</span><br><span class="line"><span class="comment">#合成</span></span><br><span class="line">grad_img = cv2.addWeighted(grad_x, <span class="number">0.5</span>, grad_y, <span class="number">0.5</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>​    一阶偏导有限差分计算梯度幅值及梯度方向的实现方法如下，为了方便后续处理，将角度均转为0-180范围内的角度值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height<span class="number">-1</span>):</span><br><span class="line">        gx[i,j] = (int(g_img[i,j]) - int(g_img[i+<span class="number">1</span>,j]) + int(g_img[i,j+<span class="number">1</span>]) - int(g_img[i+<span class="number">1</span>,j+<span class="number">1</span>])) / <span class="number">2</span></span><br><span class="line">        gy[i,j] = (int(g_img[i,j]) - int(g_img[i,j+<span class="number">1</span>]) + int(g_img[i+<span class="number">1</span>,j]) - int(g_img[i+<span class="number">1</span>,j+<span class="number">1</span>])) / <span class="number">2</span></span><br><span class="line">        m[i,j] = np.sqrt(np.square(gx[i,j])+np.square(gy[i,j]))</span><br><span class="line">        <span class="keyword">if</span> gx[i,j] != <span class="number">0</span>:</span><br><span class="line">            theta[i,j] = np.arctan(gy[i,j] / gx[i,j]) * <span class="number">180</span> / np.pi</span><br><span class="line">            <span class="keyword">if</span>(theta[i,j] &lt; <span class="number">0</span>):</span><br><span class="line">                theta[i,j] = theta[i,j] + <span class="number">180</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            theta[i,j] = <span class="number">90</span></span><br></pre></td></tr></table></figure><p>​    应用于后续操作之后，发现使用slbel算子的效果不如梯度幅值。并且由于下一步可能需要用到梯度方向，因此在最终的项目种保留梯度幅值计算检测边缘。</p><h3 id="非极大抑制（NMS）-1"><a href="#非极大抑制（NMS）-1" class="headerlink" title="非极大抑制（NMS）"></a>非极大抑制（NMS）</h3><p>​    尝试了在算法原理部分所述的两种实现方式，实现方法分别如下：</p><p>​    角度离散化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,width - <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height - <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> ( theta[i,j] &lt; <span class="number">22.5</span> <span class="keyword">or</span> (theta[i,j] &gt;= <span class="number">157.5</span> <span class="keyword">and</span> theta[i,j] &lt; <span class="number">180</span>) ):</span><br><span class="line">            theta[i,j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> ( theta[i,j] &gt;= <span class="number">22.5</span> <span class="keyword">and</span> theta[i,j] &lt; <span class="number">67.5</span> ):</span><br><span class="line">            theta[i,j] = <span class="number">45</span></span><br><span class="line">        <span class="keyword">elif</span> ( theta[i,j] &gt;= <span class="number">67.5</span> <span class="keyword">and</span> theta[i,j] &lt; <span class="number">112.5</span> ) :</span><br><span class="line">            theta[i,j] = <span class="number">90</span></span><br><span class="line">        <span class="keyword">elif</span> ( theta[i,j] &gt;= <span class="number">112.5</span> <span class="keyword">and</span> theta[i,j] &lt; <span class="number">157.5</span>):</span><br><span class="line">            theta[i,j] = <span class="number">135</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, width<span class="number">-2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height<span class="number">-2</span>):</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] == <span class="number">0</span> <span class="keyword">and</span> m[i,j] == np.max([m[i,j],m[i+<span class="number">1</span>,j],m[i<span class="number">-1</span>,j]]):</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] == <span class="number">45</span> <span class="keyword">and</span> m[i,j] == np.max([m[i,j],m[i<span class="number">-1</span>,j<span class="number">-1</span>],m[i+<span class="number">1</span>,j+<span class="number">1</span>]]):</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] == <span class="number">90</span> <span class="keyword">and</span>  m[i,j] == np.max([m[i,j],m[i,j+<span class="number">1</span>],m[i,j<span class="number">-1</span>]]):</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] == <span class="number">45</span> <span class="keyword">and</span> m[i,j] == np.max([m[i,j],m[i<span class="number">-1</span>,j+<span class="number">1</span>],m[i+<span class="number">1</span>,j<span class="number">-1</span>]]):</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br></pre></td></tr></table></figure><p>​    插值生成额外像素点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, width<span class="number">-2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height<span class="number">-2</span>):</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] &lt;= <span class="number">45</span>:</span><br><span class="line">            <span class="keyword">if</span> gx[i,j] != <span class="number">0</span>:</span><br><span class="line">                w = np.abs(gy[i,j]) / np.abs(gx[i,j])</span><br><span class="line">            g1 = (<span class="number">1</span>-w) * m[i<span class="number">-1</span>, j<span class="number">-1</span>] + w * m[i, j<span class="number">-1</span>]</span><br><span class="line">            g2 = (<span class="number">1</span>-w) * m[i+<span class="number">1</span>, j+<span class="number">1</span>] + w * m[i, j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> theta[i,j] &gt; <span class="number">45</span> <span class="keyword">and</span> theta[i,j] &lt;= <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">if</span> gy[i,j] != <span class="number">0</span>:</span><br><span class="line">                w = np.abs(gx[i,j]) / np.abs(gy[i,j])</span><br><span class="line">            g1 = (<span class="number">1</span>-w) * m[i<span class="number">-1</span>, j<span class="number">-1</span>] + w * m[i<span class="number">-1</span>, j]</span><br><span class="line">            g2 = (<span class="number">1</span>-w) * m[i+<span class="number">1</span>, j+<span class="number">1</span>] + w * m[i+<span class="number">1</span>, j]</span><br><span class="line">        <span class="keyword">elif</span> theta[i,j] &gt; <span class="number">90</span> <span class="keyword">and</span> theta[i,j] &lt;= <span class="number">135</span>:</span><br><span class="line">            <span class="keyword">if</span> gy[i,j] != <span class="number">0</span>:</span><br><span class="line">                w = np.abs(gx[i,j]) / np.abs(gy[i,j])</span><br><span class="line">            g1 = (<span class="number">1</span>-w) * m[i<span class="number">-1</span>, j+<span class="number">1</span>] + w * m[i<span class="number">-1</span>, j]</span><br><span class="line">            g2 = (<span class="number">1</span>-w) * m[i+<span class="number">1</span>, j<span class="number">-1</span>] + w * m[i+<span class="number">1</span>, j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gx[i,j] != <span class="number">0</span>:</span><br><span class="line">                w = np.abs(gy[i,j]) / np.abs(gx[i,j])</span><br><span class="line">            g1 = (<span class="number">1</span>-w) * m[i+<span class="number">1</span>, j<span class="number">-1</span>] + w * m[i, j<span class="number">-1</span>]</span><br><span class="line">            g2 = (<span class="number">1</span>-w) * m[i<span class="number">-1</span>, j+<span class="number">1</span>] + w * m[i, j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> m[i,j] &gt; g1 <span class="keyword">and</span> m[i,j] &gt; g2:</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br></pre></td></tr></table></figure><p>​    试验发现两种方法效果差不多，在最终项目中保留了插值的结果。</p><h3 id="双阈值检测与边缘连接-1"><a href="#双阈值检测与边缘连接-1" class="headerlink" title="双阈值检测与边缘连接"></a>双阈值检测与边缘连接</h3><p>​    进行尝试之后，设定的两个阈值分别是<code>0.1*np.max(nms_img)</code>和<code>0.19*np.max(nms_img)</code>，阈值调试的过程及效果比较将在实验结果部分展示。</p><p>​    双阈值检测部分的实现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> nms_img[i,j] &lt; TL:</span><br><span class="line">            dt_img[i,j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> nms_img[i,j] &gt; TH:</span><br><span class="line">            dt_img[i,j] = <span class="number">255</span></span><br><span class="line">        <span class="keyword">elif</span> nms_img[i+<span class="number">1</span>,j] &gt; TH <span class="keyword">or</span> nms_img[i<span class="number">-1</span>,j] &gt; TH <span class="keyword">or</span> nms_img[i,j+<span class="number">1</span>] &gt; TH <span class="keyword">or</span> nms_img[i,j<span class="number">-1</span>] &gt; TH <span class="keyword">or</span> nms_img[i<span class="number">-1</span>,j<span class="number">-1</span>] &gt; TH <span class="keyword">or</span> nms_img[i<span class="number">-1</span>,j+<span class="number">1</span>] &gt; TH <span class="keyword">or</span> nms_img[i+<span class="number">1</span>,j<span class="number">-1</span>] &gt; TH <span class="keyword">or</span> nms_img[i+<span class="number">1</span>,j+<span class="number">1</span>] &gt; TH:</span><br><span class="line">            dt_img[i,j] = <span class="number">255</span></span><br></pre></td></tr></table></figure><h3 id="提取彩色边缘-1"><a href="#提取彩色边缘-1" class="headerlink" title="提取彩色边缘"></a>提取彩色边缘</h3><p>​    实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img_edge = np.zeros(img.shape, dtype=<span class="string">"uint8"</span>)</span><br><span class="line">img_edge = cv2.cvtColor(img_edge, cv2.COLOR_GRAY2BGR)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height):</span><br><span class="line">        <span class="keyword">if</span> dt_img[i,j] == <span class="number">255</span>:</span><br><span class="line">            img_edge[i,j] = img_color[i,j]</span><br></pre></td></tr></table></figure><p><br></p><h2 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h2><h3 id="高斯平滑滤波-1"><a href="#高斯平滑滤波-1" class="headerlink" title="高斯平滑滤波"></a>高斯平滑滤波</h3><p>​    原始图像如下：</p><p><img src="/images/cv/canny/image-20191201091845144.png" width=400></p><p>​    调整为灰度显示之后进行高斯平滑滤波，结果如下：</p><p><img src="/images/cv/canny/image-20191201091947236.png" width=400></p><h3 id="一阶偏导有限差分计算梯度幅值"><a href="#一阶偏导有限差分计算梯度幅值" class="headerlink" title="一阶偏导有限差分计算梯度幅值"></a>一阶偏导有限差分计算梯度幅值</h3><p><img src="/images/cv/canny/image-20191201092324939.png" width=400></p><h3 id="非极大抑制（NMS）-2"><a href="#非极大抑制（NMS）-2" class="headerlink" title="非极大抑制（NMS）"></a>非极大抑制（NMS）</h3><p><img src="/images/cv/canny/image-20191201094802389.png" width=400></p><h3 id="双阈值化及边缘连接"><a href="#双阈值化及边缘连接" class="headerlink" title="双阈值化及边缘连接"></a>双阈值化及边缘连接</h3><p>​    <code>TL = 0.1 * np.max(nms_img), TH = 0.3 * np.max(nms_img)</code></p><p><img src="/images/cv/canny/image-20191201092826991.png" width=400></p><p><code>TL = 0.1 * np.max(nms_img), TH = 0.15 * np.max(nms_img)</code></p><p><img src="/images/cv/canny/image-20191201093058033.png" width=400></p><p>​    <code>TL = 0.1 * np.max(nms_img), TH = 0.2 * np.max(nms_img)</code></p><p><img src="/images/cv/canny/image-20191201092505491.png" width=400></p><p><code>TL = 0.1 * np.max(nms_img), TH = 0.19 * np.max(nms_img)</code></p><p><img src="/images/cv/canny/image-20191201093623541.png" width=400></p><h3 id="彩色边缘显示"><a href="#彩色边缘显示" class="headerlink" title="彩色边缘显示"></a>彩色边缘显示</h3><p><img src="/images/cv/canny/image-20191201093756380.png" width=400></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;a href=&quot;#已实现的功能简述及运行简要说明&quot; class=&quot;headerlink&quot; title=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;/a&gt;已实现的功能简述及运行简要说明&lt;/h2&gt;&lt;h3 id=&quot;功能简述&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Review</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/cv_review/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/cv_review/</id>
    <published>2020-02-03T04:00:30.000Z</published>
    <updated>2020-02-03T04:31:45.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="格式塔法则"><a href="#格式塔法则" class="headerlink" title="格式塔法则"></a>格式塔法则</h3><h4 id="Law-of-Proximity-接近性原则"><a href="#Law-of-Proximity-接近性原则" class="headerlink" title="Law of Proximity 接近性原则"></a>Law of Proximity 接近性原则</h4><p>​    物体之间的相对距离会影响我们感知它是否以及如何组织在一起。互相靠近（相对于其它物体）的物体看起来属于一组，而那些距离较远的则自动划为组外。</p><p><img src="/images/cv/review/image-20200112181346765.png" alt="image-20200112181346765" style="zoom:50%;" /></p><h4 id="Law-of-Similarity-相似性原则"><a href="#Law-of-Similarity-相似性原则" class="headerlink" title="Law of Similarity 相似性原则"></a>Law of Similarity 相似性原则</h4><p>​    如果其它因素相同，那么相似的物体看起来归属于一组（强调内容）</p><p><img src="/images/cv/review/image-20200112181522668.png" alt="image-20200112181522668" style="zoom:50%;" /></p><h4 id="Law-of-Common-Fate-共方向原则"><a href="#Law-of-Common-Fate-共方向原则" class="headerlink" title="Law of Common Fate 共方向原则"></a>Law of Common Fate 共方向原则</h4><p>​    一起运动的物体被感知为属于一组或者是彼此相关的。如果物理沿着相似的光滑路径或具有相似的排列模式，人眼会将它们识别成一类物体。</p><p><img src="/images/cv/review/image-20200112182325271.png" alt="image-20200112182325271" style="zoom:50%;" /></p><h4 id="Law-of-Symmetry-对称性原则"><a href="#Law-of-Symmetry-对称性原则" class="headerlink" title="Law of Symmetry 对称性原则"></a>Law of Symmetry 对称性原则</h4><p>​    人的意识倾向于将物体识别为沿某点或某轴对称的形状。</p><p><img src="/images/cv/review/image-20200112182303487.png" alt="image-20200112182303487" style="zoom:50%;" /></p><h4 id="Law-of-Continuity-连续性原则"><a href="#Law-of-Continuity-连续性原则" class="headerlink" title="Law of Continuity 连续性原则"></a>Law of Continuity 连续性原则</h4><p>​    视觉倾向于感知连续的形式而不是离散的碎片</p><p><img src="/images/cv/review/image-20200112181954399.png" alt="image-20200112181954399" style="zoom:50%;" /></p><h4 id="Law-of-Closure-封闭性原则"><a href="#Law-of-Closure-封闭性原则" class="headerlink" title="Law of Closure 封闭性原则"></a>Law of Closure 封闭性原则</h4><p>​    视觉系统自动尝试将敞开的图形关闭起来，从而将其感知为完整的物体而不是分散的碎片。简单理解，当图形是一个残缺图形，但主体有一种使其闭合的倾向，即主体能自行填补缺口而把其知觉为一个整体。</p><p><img src="/images/cv/review/image-20200112182020040.png" alt="image-20200112182020040" style="zoom: 33%;" /></p><h3 id="Marr视觉表示框架的三个阶段"><a href="#Marr视觉表示框架的三个阶段" class="headerlink" title="Marr视觉表示框架的三个阶段"></a>Marr视觉表示框架的三个阶段</h3><h4 id="Primal-Sketch"><a href="#Primal-Sketch" class="headerlink" title="Primal Sketch"></a>Primal Sketch</h4><p>​    将输入的原始图像进行处理，抽取图像中诸如角点、边缘、纹理、线条、边界等<strong>基本特征</strong>，这些特征的集合称为<strong>基元图</strong></p><h4 id="2-5D-Sketch"><a href="#2-5D-Sketch" class="headerlink" title="2.5D Sketch"></a>2.5D Sketch</h4><p>​    指在<strong>以观测者为中心</strong>的坐标系中由输入图像和基元图恢复场景可见部分的深度、法线方向、轮廓等，这些信息包含了深度信息，但不是真正的物体三维表示，因此，称为<strong>二维半图</strong></p><h4 id="3D-Model"><a href="#3D-Model" class="headerlink" title="3D Model"></a>3D Model</h4><p>​    在<strong>以物体为中心</strong>的坐标系中，由输入图像、基元图、二维半图来恢复、表示和识别三维物体</p><hr><h2 id="二值图像"><a href="#二值图像" class="headerlink" title="二值图像"></a>二值图像</h2><h3 id="几何特性"><a href="#几何特性" class="headerlink" title="几何特性"></a>几何特性</h3><h4 id="尺寸和位置"><a href="#尺寸和位置" class="headerlink" title="尺寸和位置"></a>尺寸和位置</h4><ul><li><p>面积（零阶矩）</p><p><img src="/images/cv/review/image-20200112184113076.png" alt="image-20200112184113076" style="zoom:60%;" /></p></li><li><p>区域中心（一阶矩）</p><p><img src="/images/cv/review/image-20200112184200497.png" alt="image-20200112184200497" style="zoom: 60%;" /></p></li></ul><h4 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h4><ul><li><p>方向</p><p>某些形状（如圆）是没有方向的。假定物体是长形的，<strong>长轴方向</strong>为物体的方向</p></li><li><p>求方向 –&gt; 最小化问题 </p><p><img src="/images/cv/review/image-20200112201403535.png" alt="image-20200112201403535" style="zoom:50%;" /></p><p>最小二乘法</p><p><img src="/images/cv/review/image-20200112201456847.png" alt="image-20200112201456847" style="zoom: 50%;" /></p></li></ul><h4 id="伸长率"><a href="#伸长率" class="headerlink" title="伸长率"></a>伸长率</h4><p><img src="/images/cv/review/image-20200112201528557.png" alt="image-20200112201528557" style="zoom:50%;" /></p><h4 id="密集度"><a href="#密集度" class="headerlink" title="密集度"></a>密集度</h4><p><img src="/images/cv/review/image-20200112201544559.png" alt="image-20200112201544559" style="zoom:50%;" /></p><h4 id="形态比"><a href="#形态比" class="headerlink" title="形态比"></a>形态比</h4><p>​    区域的最小外接矩形的长与宽之比</p><h4 id="欧拉数（亏格数，genus）"><a href="#欧拉数（亏格数，genus）" class="headerlink" title="欧拉数（亏格数，genus）"></a>欧拉数（亏格数，genus）</h4><p>​    连通分量数减去洞数：$E=C-H$，平稳，旋转和比例不变</p><p><img src="/images/cv/review/image-20200112201740348.png" alt="image-20200112201740348" style="zoom: 33%;" /></p><h3 id="投影计算"><a href="#投影计算" class="headerlink" title="投影计算"></a>投影计算</h3><p>​    给定一条直线，用垂直该直线的一簇等间距直线将一幅二值图像分割成若干条，每一条内象素值为 1 的象素的数量</p><h4 id="水平-垂直"><a href="#水平-垂直" class="headerlink" title="水平/垂直"></a>水平/垂直</h4><p><img src="/images/cv/review/image-20200112201918068.png" alt="image-20200112201918068" style="zoom:50%;" /></p><h4 id="对角线"><a href="#对角线" class="headerlink" title="对角线"></a>对角线</h4><p>​    图像为$n \times m$，共对应$m+n-1$条对角线，像素点$(i，j), \; i \in [0,n-1],j\in [0,m-1]$对应的位置是$d=i-j+m $（右上对应1，左下对应$m+n-1$）</p><p><img src="/images/cv/review/image-20200112203501711.png" alt="image-20200112203501711" style="zoom:50%;" /></p><h3 id="连通区域（四连通）"><a href="#连通区域（四连通）" class="headerlink" title="连通区域（四连通）"></a>连通区域（四连通）</h3><h4 id="连通分量编辑算法"><a href="#连通分量编辑算法" class="headerlink" title="连通分量编辑算法"></a>连通分量编辑算法</h4><ul><li>递归<ol><li>扫描图像，找到没有标记的一个前景点（即像素值为 1 ），分配标记 L</li><li>递归分配标记 L 给该点的邻点</li><li>如果不存在没标记的点，则停止</li><li>返回第1步</li></ol></li><li>序贯（重要）<ol><li>从左至右、从上到下扫描图像</li><li>如果象素点值为 1 ，则（分 4 种情况）<ul><li>如果上面点和左面点有且仅有一个标记，则复制这一标记</li><li>如果两点有相同标记，复制这一标记</li><li>如果两点有不同标记，则复制上点的标记且将两个标记输入<strong>等价表</strong>中作为等价标记</li><li>否则（两点都无标记）给这一个象素点分配一新的标记并将这一标记输入等价表</li></ul></li><li>如果需要考虑更多点，则返回 2</li><li>在等价表的每一等价集中找到最低的标记</li><li>扫描图像，用等价表中的最低标记取代每一标记</li></ol></li></ul><h4 id="区域边界跟踪算法"><a href="#区域边界跟踪算法" class="headerlink" title="区域边界跟踪算法"></a>区域边界跟踪算法</h4><p>​    c：当前点（在边界上）</p><p>​    b：当前点的领域点（不在边界上）</p><p>​    S：当前连通区域</p><ol><li><p>扫描图像，求区域S的起始点（左-&gt;右，上-&gt;下）：$s(k)=(x(k),y(k)),\;k=0$</p></li><li><p>用c表示当前边界上被跟踪的像素点，置 $c=s(k)$，记c的左邻点为 $b$, $b \notin S$</p></li><li><p>按逆时针方向记从b开始的c的八个邻点分别为 $n_1, n_2,…,n_8, \; k=k+1$</p></li><li><p>从b开始，沿逆时针方向找到一个 $n_i \in S$</p></li><li><p>置 $c=s(k)=n_i, \; b=n_{i-1}$ –&gt; 保证了b不属于S</p></li><li><p>重复3,4,5步直至$s(k)=s(0)$</p><p><img src="/images/cv/review/image-20200112205428248.png" alt="image-20200112205428248" style="zoom:50%;" /></p></li></ol><hr><h2 id="边缘"><a href="#边缘" class="headerlink" title="边缘"></a>边缘</h2><h3 id="模板卷积"><a href="#模板卷积" class="headerlink" title="模板卷积"></a>模板卷积</h3><p><img src="/images/cv/review/image-20200112205648976.png" alt="image-20200112205648976" style="zoom: 67%;" /></p><h3 id="Origin-of-Edges"><a href="#Origin-of-Edges" class="headerlink" title="Origin of Edges"></a>Origin of Edges</h3><ul><li>图像深度不连续处</li><li>图像（梯度）朝向不连续处</li><li>图像光照不连续处</li><li>纹理变化处</li></ul><h3 id="基于一阶的边缘检测"><a href="#基于一阶的边缘检测" class="headerlink" title="基于一阶的边缘检测"></a>基于一阶的边缘检测</h3><h4 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h4><ul><li><p>幅值：<img src="/images/cv/review/image-20200112210106020.png" alt="image-20200112210106020" style="zoom: 80%;" /></p></li><li><p>方向：$a(x,y)=arctan(G_y/G_x)​$，梯度方向为函数最大变化率方向</p></li><li><p>在图像中用差分近似偏导数<br>$$<br>G_x = f[x+1,y]-f[x,y] \\<br>G_y=f[x,y]-f[x,y+1]<br>$$</p></li><li><p>Roberts交叉算子</p><p><img src="/images/cv/review/image-20200112210441780.png" alt="image-20200112210441780" style="zoom:67%;" /></p></li><li><p>Sobel算子</p><p><img src="/images/cv/review/image-20200112210459080.png" alt="image-20200112210459080" style="zoom: 50%;" /></p></li><li><p>Prewitt算子（运算较快）</p><p><img src="/images/cv/review/image-20200112210525125.png" alt="image-20200112210525125" style="zoom:50%;" /></p></li><li><p>均值差分（一定邻域内灰度平均值之差）</p><p><img src="/images/cv/review/image-20200112210917803.png" alt="image-20200112210917803" style="zoom:50%;" /><br>$$<br>G_x = (a_2+ca_3+a_4)-(a_o+ca_7+a_6) \\<br>G_y = (a_0+ca_1+a_2)-(a_6+ca_5+a_4)<br>$$<br>C=1: Prewitt算子</p><p>C=2: Sobel算子</p><p>C=3: Sethi算子</p></li></ul><h3 id="基于二阶的边缘检测"><a href="#基于二阶的边缘检测" class="headerlink" title="基于二阶的边缘检测"></a>基于二阶的边缘检测</h3><h4 id="Laplacian算子"><a href="#Laplacian算子" class="headerlink" title="Laplacian算子"></a>Laplacian算子</h4><p><img src="/images/cv/review/image-20200112211414471.png" alt="image-20200112211414471"></p><h4 id="LoG算子（Laplacian-of-Gaussian）"><a href="#LoG算子（Laplacian-of-Gaussian）" class="headerlink" title="LoG算子（Laplacian of Gaussian）"></a>LoG算子（Laplacian of Gaussian）</h4><p>​    高斯滤波+拉普拉斯边缘检测</p><ul><li><p>基本特征：</p><ul><li>平滑滤波器是高斯滤波器</li><li>采用拉普拉斯算子计算二阶导数</li><li>边缘检测判据是二阶导数零交叉点并对应一阶导数的较大峰值</li><li>使用线性内插方法在子像素分辨率水平上估计边缘的位置</li></ul></li><li><p>LoG算子 = <img src="/images/cv/review/image-20200112211542788.png" alt="image-20200112211542788" style="zoom:80%;" /></p><p>对高斯模板求拉式算子的结果</p><p> <img src="/images/cv/review/image-20200112211454571.png" alt="image-20200112211454571"  /></p></li><li><p>两种等效计算方法</p><ol><li>图像与高斯函数卷积，再求卷积的拉普拉斯微分</li><li>求高斯函数的拉普拉斯微分，再与图像卷积</li></ol></li></ul><h3 id="Canny边缘检测（重要）"><a href="#Canny边缘检测（重要）" class="headerlink" title="Canny边缘检测（重要）"></a>Canny边缘检测（重要）</h3><h4 id="高斯滤波器平滑图像"><a href="#高斯滤波器平滑图像" class="headerlink" title="高斯滤波器平滑图像"></a>高斯滤波器平滑图像</h4><p>​    Canny Edge 检测算法的第一个步骤是使用高斯滤波器进行滤波平滑操作，此步骤的目的是对原始图片进行模糊处理，减少原始图片的噪声，使得边缘信息更为明确。高斯滤波器是对连续高斯函数的离散近似，对高斯曲面进行离散采样和归一化得出。通过将原始图像与高斯滤波器进行卷积可以对图像实现高斯滤波平滑。</p><p>​    二维高斯函数如下所示：<br>$$<br>H(x,y)=e^{-\frac{x^2+y^2}{2\sigma^2}}<br>$$<br>​    对高斯函数进行离散化操作之后，得到 $(2k+1)\times(2k+1)$ 滤波器的计算公式如下：<br>$$<br>H[i,j] = \frac{1}{2\pi\sigma^2}e^{-\frac{(i-k-1)^2+(j-k-1)^2}{2\sigma^2}}<br>$$</p><h4 id="一阶偏导有限差分计算梯度"><a href="#一阶偏导有限差分计算梯度" class="headerlink" title="一阶偏导有限差分计算梯度"></a>一阶偏导有限差分计算梯度</h4><p>​    边缘检测的一种方式是，用一阶偏导有限差分计算梯度幅值和方向检测边缘。在图像的边缘处会出现强度快速变化，因此可以通过计算图像的梯度，找出其中幅值来识别图像的边缘。由于图片信息是离散的，可以通过在单位像素点上图片强度的变化率对梯度进行离散近似。</p><p>​    对梯度进行离散近似之后的计算公式如下，分别计算x方向和y方向上的梯度：<br>$$<br>\frac{\partial f}{\partial x} =（\frac{f(x_{n+1},y_n)-f(x_n,y_n)}{\Delta x}+\frac{f(x_{n+1},y_{n+1})-f(x_n,y_{n+1})}{\Delta x}）/2<br>$$</p><p>$$<br>\frac{\partial f}{\partial y} =（\frac{f(x_n,y_{n+1})-f(x_n,y_n)}{\Delta y}+\frac{f(x_{n+1},y_{n+1})-f(x_{n+1},y_n)}{\Delta y}）/2<br>$$</p><p>​    计算梯度幅值的公式为：<br>$$<br>M=\sqrt{\frac{\partial f}{\partial x }^2 + \frac{\partial f}{\partial y} ^2}<br>$$<br>​    梯度方向，即函数最大变化率方模拟， 向：<br>$$<br>\theta = arctan^{-1}(\frac{\partial f}{\partial y}/\frac{\partial f}{\partial x})<br>$$<br>​    另一种方式是使用sobel、prewitt等算子进行卷积计算。</p><h4 id="简化的非极大抑制（NMS）"><a href="#简化的非极大抑制（NMS）" class="headerlink" title="简化的非极大抑制（NMS）"></a>简化的非极大抑制（NMS）</h4><p>​    去除幅值局部变化中非极大的点，使边缘变细。</p><p>​    实现方向角的离散化，即将当前坐标点的梯度方向（$\theta$）根据所在的区域离散化为0, 45, 90, 135四个值。如图所示：</p><p><img src="/images/cv/review/%7B6AD5E307-0299-74AE-648C-BB01B5DE3FF8%7D.jpg" width=400></p><p>​    在离散后的梯度方向上找到幅值最大的点保留，其余点置零。</p><h4 id="双阈值检测与边缘连接"><a href="#双阈值检测与边缘连接" class="headerlink" title="双阈值检测与边缘连接"></a>双阈值检测与边缘连接</h4><p>​    设定两个边缘阈值<code>TL</code>和<code>TH</code>，梯度大于TH的被认为是真边缘，保留；低于TL的被认为非边缘，丢弃；介于两者之间的则根据连通性（八连通）进行判断，若其与真边缘联通，则认为是边缘，否则丢弃。</p><hr><h2 id="局部特征"><a href="#局部特征" class="headerlink" title="局部特征"></a>局部特征</h2><h3 id="Harris-corner-detector"><a href="#Harris-corner-detector" class="headerlink" title="Harris corner detector"></a>Harris corner detector</h3><h4 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h4><p>​    角点检测的基本思想是，使用一个固定窗口在图像上进行任意方向上的滑动，比较滑动前与滑动后两种情况，窗口中的像素灰度变化程度，如果存在任意方向上的滑动，都有着较大灰度变化，那么我们可以认为该窗口中存在角点。</p><p>​    当窗口发生[u,v]移动时，那么滑动前与滑动后对应的窗口中的像素点灰度变化描述如下：</p><p><img src="/images/cv/review/image-20191210103858663.png" alt="image-20191210103858663" style="zoom: 40%;" /></p><p>​    其中$[u,v]$是窗口的偏移量，$(x,y)$是窗口内所对应的像素坐标位置，窗口有多大，就有多少个位置。$w(x,y)$是窗口函数，有以下两种表示方法，最简单情形就是窗口内的所有像素所对应的w权重系数均为1。但有时候，我们会将$w(x,y)$函数设定为以窗口中心为原点的二元正态分布或高斯分布。如图所示：</p><p><img src="/images/cv/review/image-20191210104139196.png" alt="image-20191210104139196" style="zoom: 50%;" /></p><p>​    根据上述表达式，当窗口处在平坦区域上滑动，可以想象的到，灰度不会发生变化，那么E(u,v) = 0；如果窗口处在比纹理比较丰富的区域上滑动，那么灰度变化会很大。算法最终思想就是计算灰度发生较大变化时所对应的位置，当然这个较大是指针任意方向上的滑动，并非单指某个方向。</p><p>​    我们对$E(w,v)$表达式进行泰勒展开，结果如下：</p><p><img src="/images/cv/review/image-20191210104336762.png" alt="image-20191210104336762" style="zoom:50%;" /></p><p>​    可以将$E(u,v)$表达式更新为：</p><p><img src="/images/cv/review/image-20191210104534120.png" alt="image-20191210104534120" style="zoom:40%;" /></p><p>​    其中</p><p><img src="/images/cv/review/image-20191210104546366.png" alt="image-20191210104546366" style="zoom:40%;" /></p><p>​    求解M的两个特征值$\lambda_1$和$\lambda_2$，可以根据两个特征值直接的关系得出对应像素点的位置信息（边缘or角点or平坦区域）</p><p>​        corner：在水平、竖直两个方向上变化均较大的点，即Ix、Iy都较大； </p><p>​        edge ：仅在水平、或者仅在竖直方向有较大的点，即Ix和Iy只有其一较大 ；</p><p>​        flat  ： 在水平、竖直方向的变化量均较小的点，即Ix、Iy都较小；</p><p><img src="/images/cv/review/image-20191210104846204.png" alt="image-20191210104846204" style="zoom:50%;" /></p><p>​    可以定义角点响应函数R来表示：</p><p><img src="/images/cv/review/image-20191210105159377.png" alt="image-20191210105159377" style="zoom: 40%;" /></p><p>​    其中k是介于0.04-0.06间的常数。</p><p>​    针对三种不同区域的点，R的取值情况如下：</p><p>​        corner：R为大数值整数</p><p>​        edge：R为大数值负数</p><p>​        flat：绝对值R是小数值</p><p><img src="/images/cv/review/image-20191210105718641.png" alt="image-20191210105718641" style="zoom:50%;" /></p><h4 id="旋转不变性"><a href="#旋转不变性" class="headerlink" title="旋转不变性"></a>旋转不变性</h4><p><img src="/images/cv/review/image-20200112230413307.png" alt="image-20200112230413307" style="zoom: 60%;" /></p><h4 id="灰度不变性"><a href="#灰度不变性" class="headerlink" title="灰度不变性"></a>灰度不变性</h4><p><img src="/images/cv/review/image-20200112230448513.png" alt="image-20200112230448513" style="zoom:60%;" /></p><h4 id="尺度不变性"><a href="#尺度不变性" class="headerlink" title="尺度不变性"></a>尺度不变性</h4><p>​    不满足尺度不变性</p><p><img src="/images/cv/review/image-20200112230530393.png" alt="image-20200112230530393" style="zoom:60%;" /></p><h3 id="SIFT"><a href="#SIFT" class="headerlink" title="SIFT"></a>SIFT</h3><ul><li>尺度空间极值检测：搜索所有尺度上的图像位置。通过高斯差分函数来识别潜在的对于尺度和旋转不变的兴趣点。</li><li>关键点定位：在每个候选的位置上，通过一个拟合精细的模型来确定位置和尺度。关键点的选择依据于它们的稳定程度。</li><li>方向确定：基于图像局部的梯度方向，分配给每个关键点位置一个或多个方向。所有后面的对图像数据的操作都相对于关键点的方向、尺度和位置进行变换，从而提供对于这些变换的不变性。</li><li>关键点描述：在每个关键点周围的邻域内，在选定的尺度上测量图像局部的梯度。这些梯度被变换成一种表示，这种表示允许比较大的局部形状的变形和光照变化</li></ul><h4 id="Basic-idea"><a href="#Basic-idea" class="headerlink" title="Basic idea"></a>Basic idea</h4><ol><li>用16*16的窗口放在特征点附近 + 将16*16分成16个4*4的窗口</li><li>计算窗口中每个像素的边的方向（梯度角减去90°）</li><li>丢掉方向能量小的边（使用阈值）</li><li>用直方图描述结果 + 将每个小窗口中的所有的方向离散成8个方向，一共16*8=128个</li></ol><h4 id="Full-version"><a href="#Full-version" class="headerlink" title="Full version"></a>Full version</h4><ul><li>Divide the 16 x 16 window into a 4 x 4 grid of cells ( 2 x 2 case shown below)</li><li>Compute an orientation histogram for each cell</li><li>16 cells * 8 orientations = 128 dimensional descriptor</li></ul><p><img src="/images/cv/review/image-20200112235402616.png" alt="image-20200112235402616" style="zoom: 60%;" /></p><h4 id="使用梯度的原因、好处"><a href="#使用梯度的原因、好处" class="headerlink" title="使用梯度的原因、好处"></a>使用梯度的原因、好处</h4><p>​    梯度信息可以表示边缘信息，并且在光照变化时有抵抗能力</p><h4 id="尺度不变-amp-旋转不变"><a href="#尺度不变-amp-旋转不变" class="headerlink" title="尺度不变&amp;旋转不变"></a>尺度不变&amp;旋转不变</h4><p>​    <a href="https://www.jianshu.com/p/c0379c931e74" target="_blank" rel="noopener">https://www.jianshu.com/p/c0379c931e74</a></p><p>​    <a href="https://bbs.csdn.net/topics/390457105" target="_blank" rel="noopener">https://bbs.csdn.net/topics/390457105</a></p><hr><h2 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h2><h3 id="Hough变换（重要）"><a href="#Hough变换（重要）" class="headerlink" title="Hough变换（重要）"></a>Hough变换（重要）</h3><p>​    Hough 变换是基于投票（Voting）原理的参数估计方法，是一种重要的形状检测技术。</p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>​    图像中每一点对参数组合进行表决，赢得多数票的参数组合为胜者（结果）</p><h4 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h4><ol><li>适当地<strong>量化</strong>参数空间（合适的精度即可）</li><li>假定参数空间的每一个单元都是一个累加器，把累加器<strong>初始化</strong>为零．</li><li>对图像空间的每一点，在其所满足的参数方程对应的累加器上<strong>加 1</strong></li><li>累加器阵列的<strong>最大值</strong>对应模型的参数．</li></ol><h4 id="直线检测"><a href="#直线检测" class="headerlink" title="直线检测"></a>直线检测</h4><p>​    <a href="https://www.jianshu.com/p/ddbeb8e7d8be" target="_blank" rel="noopener">https://www.jianshu.com/p/ddbeb8e7d8be</a></p><p><img src="/images/cv/review/image-20200113095654655.png" alt="image-20200113095654655" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113094438284.png" alt="image-20200113094438284" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113094450588.png" alt="image-20200113094450588" style="zoom:45%;" /></p><p><img src="/images/cv/review/image-20200113095824612.png" alt="image-20200113095824612" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113094529096.png" alt="image-20200113094529096" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113094548139.png" alt="image-20200113094548139" style="zoom:50%;" /></p><h4 id="圆弧检测"><a href="#圆弧检测" class="headerlink" title="圆弧检测"></a>圆弧检测</h4><p><img src="/images/cv/review/image-20200113095410123.png" alt="image-20200113095410123" style="zoom: 40%;" /></p><ol><li>量化关于a，b的参数空间到合适精度</li><li>初始化所有累加器为0</li><li>计算图像空间中边缘点的梯度幅度 $G_{mag}(x,y)$ 和角度 $\theta (x,y)$</li><li>若边缘点参数坐标满足 $b=a\, tan \theta -x\, tan \theta + y$ 则该参数坐标对应的累加器加1</li><li>拥有最大值的累加器所在的坐标即为图像空间中的圆心之所在</li><li>得到圆心坐标之后，我们可以很容易反求r</li></ol><hr><h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><h3 id="主元分析（PCA）"><a href="#主元分析（PCA）" class="headerlink" title="主元分析（PCA）"></a>主元分析（PCA）</h3><h4 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h4><p>​    PCA (Principal Component Analysis)，即<strong>主成分分析方法</strong>，是一种使用最广泛的数据降维算法。PCA的主要思想是将n维特征映射到k维上，这k维是全新的正交特征也被称为主成分，是在原有n维特征的基础上重新构造出来的k维特征。PCA的工作就是从原始的空间中顺序地找一组相互正交的坐标轴，新的坐标轴的选择与数据本身是密切相关的。其中，第一个新坐标轴选择是原始数据中方差最大的方向，第二个新坐标轴选取是与第一个坐标轴正交的平面中使得方差最大的，第三个轴是与第1,2个轴正交的平面中方差最大的。依次类推，可以得到n个这样的坐标轴。通过这种方式获得的新的坐标轴，我们发现，大部分方差都包含在前面k个坐标轴中，后面的坐标轴所含的方差几乎为0。于是，我们可以忽略余下的坐标轴，只保留前面k个含有绝大部分方差的坐标轴。事实上，这相当于只保留包含绝大部分方差的维度特征，而忽略包含方差几乎为0的特征维度，实现对数据特征的降维处理。</p><h4 id="适用的数据"><a href="#适用的数据" class="headerlink" title="适用的数据"></a>适用的数据</h4><p>​    适用于PCA的数据也是统计意义上有强相关性的数据，维度过高但高维信息量低，相关度高的数据（多元高斯分布）</p><h4 id="优化目标函数推导"><a href="#优化目标函数推导" class="headerlink" title="优化目标函数推导"></a>优化目标函数推导</h4><p><img src="/images/cv/review/image-20200113113812857.png" alt="image-20200113113812857" style="zoom: 50%;" /></p><h3 id="Eigenface-人脸识别算法"><a href="#Eigenface-人脸识别算法" class="headerlink" title="Eigenface 人脸识别算法"></a>Eigenface 人脸识别算法</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>获得人脸图像的训练集，通常为整个人脸数据库</li><li>对所有人脸图像作归一化处理</li><li>通过 PCA 计算获得一组特征向量（特征脸）。通常一百个特征向量就足够</li><li>将每幅人脸图像都投影到由该组特征脸张成的子空间中，得到在该子空间坐标</li><li>对输入的一幅待测图像，归一化后，将其映射到特征脸子空间中。然后用某种距离度量来描述两幅人脸图像的相似性，如欧氏距离</li></ol><h4 id="重构原理"><a href="#重构原理" class="headerlink" title="重构原理"></a>重构原理</h4><p>​    识别：将两张图像都投影到人脸空间，比较投影向量的欧氏距离。</p><p>​    重构：将图像投影到人脸空间，通过左乘特征人脸空间矩阵恢复</p><p>​    人脸投影到特征人脸空间中，保留了主要特征的信息，所以可以恢复人脸本来的样子</p><p><img src="/images/cv/review/image-20200113115421201.png" alt="image-20200113115421201" style="zoom:50%;" /></p><hr><h2 id="图像频域与图像分解"><a href="#图像频域与图像分解" class="headerlink" title="图像频域与图像分解"></a>图像频域与图像分解</h2><h3 id="图像的傅里叶变换"><a href="#图像的傅里叶变换" class="headerlink" title="图像的傅里叶变换"></a>图像的傅里叶变换</h3><h4 id="基本含义"><a href="#基本含义" class="headerlink" title="基本含义"></a>基本含义</h4><p>​    任何连续周期信号都可以表示成（或者无限逼近）一系列正弦信号的叠加，将时间域上的信号转变为频率域上的信号。在一维领域，信号是一维正弦波的叠加，那么想象一下，在二维领域，实际上是无数二维平面波的叠加。</p><p>​    Fourier transform stores the magnitude and phase at each frequency</p><ul><li>Magnitude encodes how much signal there is at a particular requency</li><li>Phase encodes spatial information (indirectly)</li><li>For mathematical convenience, this is often notated in terms of real and complex numbers</li></ul><h4 id="基图像"><a href="#基图像" class="headerlink" title="基图像"></a>基图像</h4><p>​    可以将任一4*4像素块表示为16个基图像的加权和，权值即为对应位置的DCT系数</p><p><img src="/images/cv/review/image-20200113120255032.png" alt="image-20200113120255032" style="zoom: 80%;" /></p><p><img src="/images/cv/review/image-20200113120715527.png" alt="image-20200113120715527" style="zoom: 60%;" /></p><h4 id="高频-低频"><a href="#高频-低频" class="headerlink" title="高频/低频"></a>高频/低频</h4><p>​    图像的频率是表征图像中灰度变化剧烈程度的指标，是灰度在平面空间上的梯度</p><p>​    图像的高频部分是像素值变化剧烈的地方，如图像的边缘和轮廓。低频部分是变化不剧烈的地方，对应大的色块。我们从近处看图像看到的是高频信息，而远处看到的是低频信息</p><h3 id="图像分解"><a href="#图像分解" class="headerlink" title="图像分解"></a>图像分解</h3><h4 id="从图像分解角度理解傅里叶变换"><a href="#从图像分解角度理解傅里叶变换" class="headerlink" title="从图像分解角度理解傅里叶变换"></a>从图像分解角度理解傅里叶变换</h4><p>​    傅立叶变换将图像从空间域转换到频率域，将图像的灰度分布函数变换为图像的频率分布函数</p><h4 id="拉普拉斯图像金字塔的每一层是带通滤波"><a href="#拉普拉斯图像金字塔的每一层是带通滤波" class="headerlink" title="拉普拉斯图像金字塔的每一层是带通滤波"></a>拉普拉斯图像金字塔的每一层是带通滤波</h4><p>​    拉普拉斯金字塔是将图像下采样后再上采样得到的差值图像，通过源图像减去先缩小再放大的一系列图像构成的。下采样的时候丢失了高频信息，而相邻金字塔相减的时候丢失了低频信息，因此只有中间频段的信息保留了下来</p><hr><h2 id="图像拼接"><a href="#图像拼接" class="headerlink" title="图像拼接"></a>图像拼接</h2><h3 id="RANSAC"><a href="#RANSAC" class="headerlink" title="RANSAC"></a>RANSAC</h3><p>​    RANSAC是“RANdom SAmple Consensus（随机抽样一致）”的缩写。它可以从一组包含“局外点”的观测数据集中，通过迭代方式估计数学模型的参数，解决3D重建中的位置确定问题，图像匹配、全景拼接</p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>​    采用迭代的方式从一组包含outliers的数据中估算数学模型的参数。核心思想是随机性和假设性，<strong>随机性</strong>是根据正确数据出现的概率去随机选取抽样数据，<strong>假设性</strong>是假设选取出的抽样数据都是正确数据。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>​    是大范围模型匹配问题的一个普遍意义上的方法，且运用简单，计算快</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>​    只能计算outliers不多的情况（投票机制可以解决outliers高的情况）</p><h4 id="基本步骤-1"><a href="#基本步骤-1" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>随机选择一些点作为样本</li><li>计算选出的样本应该使用的变换矩阵</li><li>把刚才没有选中的点代入建立的模型，判断有多少点符合，误差是否小于阈值</li><li>比较匹配数量是否为当前最优解，如果是，则更新当前最优集，并更新迭代次数</li><li><p>重复多次，如果迭代次数大于K（k由最优的inliers的点集计算得到），则退出，否则迭代次数+1</p><p><img src="/images/cv/review/image-20200113121953066.png" alt="image-20200113121953066" style="zoom:55%;" /></p></li></ol><h4 id="成功概率"><a href="#成功概率" class="headerlink" title="成功概率"></a>成功概率</h4><p> <img src="/images/cv/review/image-20200113123402472.png" alt="image-20200113123402472" style="zoom: 52%;" /></p><h3 id="图像拼接-1"><a href="#图像拼接-1" class="headerlink" title="图像拼接"></a>图像拼接</h3><h4 id="基本步骤-2"><a href="#基本步骤-2" class="headerlink" title="基本步骤"></a>基本步骤</h4><ul><li>Detect key points SIFT特征提取</li><li>Build the SIFT descriptors 建立SIFT描述子</li><li>Match SIFT descriptors 特征点匹配（knn）</li><li>Fitting the transformation（RANSAC计算Homography矩阵，进行变换）</li><li>Image Blending 图像融合</li></ul><hr><h2 id="物体识别"><a href="#物体识别" class="headerlink" title="物体识别"></a>物体识别</h2><h3 id="Visual-Recognition"><a href="#Visual-Recognition" class="headerlink" title="Visual Recognition"></a>Visual Recognition</h3><h4 id="基本任务"><a href="#基本任务" class="headerlink" title="基本任务"></a>基本任务</h4><ul><li>图片和视频的分类</li><li>检测和定位物体/图片分割</li><li>估计语义和几何属性</li><li>对人类活动和事件进行分类</li></ul><h4 id="挑战因素"><a href="#挑战因素" class="headerlink" title="挑战因素"></a>挑战因素</h4><ul><li>视角变换</li><li>光线变化</li><li>尺度变化</li><li>物体形变</li><li>物体遮挡</li><li>背景凌乱</li><li>内部类别多样</li></ul><h3 id="基于词袋（BoW）的物体分布"><a href="#基于词袋（BoW）的物体分布" class="headerlink" title="基于词袋（BoW）的物体分布"></a>基于词袋（BoW）的物体分布</h3><h4 id="BoW（bag-of-words）"><a href="#BoW（bag-of-words）" class="headerlink" title="BoW（bag-of-words）"></a>BoW（bag-of-words）</h4><p>​    图像中的单词被定义为一个图像块的特征向量，图像的Bow模型即图像中所有图像块的特征向量得到的直方图</p><h4 id="基本步骤-3"><a href="#基本步骤-3" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>特征提取和表示（grid），每个特征为一个质点</li><li>通过对质点聚类建立字典（k 聚类），得到k个聚类中心，聚类中心就是词袋中的单词，所有聚类中心就是特征直方图的基</li><li>将图片用直方图的基表示出来，这样就可以得到关于图片的特征直方图。该直方图与单词的顺序没有关系，而是每个单词在图片中出现的频率</li><li>将新的图片获取质点，然后映射到直方图上进行聚类</li></ol><hr><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><h3 id="深度网络学习"><a href="#深度网络学习" class="headerlink" title="深度网络学习"></a>深度网络学习</h3><h4 id="end-to-end-学习"><a href="#end-to-end-学习" class="headerlink" title="end-to-end 学习"></a>end-to-end 学习</h4><p>​    raw inputs to predictions    </p><p>​    从输入端（输入数据）到输出端会得到一个预测结果，与真实结果相比较会得到一个误差，这个误差会在模型中的每一层传递（反向传播），每一层的表示都会根据这个误差来做调整，直到模型收敛或达到预期的效果才结束</p><p>​    端到端指的是直接输入原始数据，让模型自己去学习特征，最后输出结果。中间不再需要人工的参与，就像一个工厂，送进去玉米，最后出来爆米花，中间的流程我们一律不参与。</p><h4 id="数学本质"><a href="#数学本质" class="headerlink" title="数学本质"></a>数学本质</h4><p>​    通过不断尝试引入各种参量，最终得到允许误差范围内的解，并通过引入参量系数，最终得到最优解。不断地更新参数 W 和 b 的值从而使损失函数最小化。（给定结构，求解连接关系的权重）</p><h4 id="常用基本方法"><a href="#常用基本方法" class="headerlink" title="常用基本方法"></a>常用基本方法</h4><p>​    梯度下降法</p><h3 id="CNN-卷积神经网络"><a href="#CNN-卷积神经网络" class="headerlink" title="CNN 卷积神经网络"></a>CNN 卷积神经网络</h3><h4 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h4><p>​    卷积层的作用是提取图像的各种特征，是卷积核在上一级输入层上通过逐一滑动窗口计算而得，卷积核中的每一个参数都相当于传统神经网络中的权值参数，与对应的局部像素相连接，将卷积核的各个参数与对应的局部像素值相乘之和，（通常还要再加上一个偏置参数），得到卷积层上的结果。</p><h4 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h4><p>​    池化层的作用是对原始特征信号进行抽象，从而大幅度减少训练参数，另外还可以减轻模型过拟合的程度。池化/采样的方式通常有以下两种：</p><ul><li>Max-Pooling: 选择Pooling窗口中的最大值作为采样值；</li><li>Mean-Pooling: 将Pooling窗口中的所有值相加取平均，以平均值作为采样值；</li></ul><h4 id="相关计算"><a href="#相关计算" class="headerlink" title="相关计算"></a>相关计算</h4><p><img src="/images/cv/review/image-20200113133116285.png" alt="image-20200113133116285" style="zoom: 50%;" /></p><p><img src="/images/cv/review/image-20200113134709704.png" alt="image-20200113134709704" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113134308475.png" alt="image-20200113134308475" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113135434147.png" alt="image-20200113135434147" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113140708120.png" alt="image-20200113140708120" style="zoom: 50%;" /></p><h3 id="BP算法"><a href="#BP算法" class="headerlink" title="BP算法"></a>BP算法</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>​    误差反向传播是将输出误差以某种形式通过隐层向输入层逐层反传，并将误差分摊给各层的所有单元，从而获得各层的误差信号，此误差信号即作为修正单元权值的依据。这种信号正向传播与误差反向传播的各层权值调整过程周而复始的进行，权值不断调整的过程，也就是网络学习训练的过程，此过程一直进行到网络输出的误差减少到可接受的程度，或进行到预先设定的学习次数为止<br>​    使用简单的方法有效的减少了计算量<br>​    仅用于计算<strong>梯度</strong></p><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><p><img src="/images/cv/review/image-20200113144125836.png" alt="image-20200113144125836" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113144152695.png" alt="image-20200113144152695" style="zoom: 67%;" /></p><p><img src="/images/cv/review/image-20200113144351924.png" alt="image-20200113144351924" style="zoom: 50%;" /></p><h4 id="梯度算法-vs-BP算法"><a href="#梯度算法-vs-BP算法" class="headerlink" title="梯度算法 vs BP算法"></a>梯度算法 vs BP算法</h4><p>​    通过梯度下降算法，求取每个参数的偏导数，更新参数实现反向传播以此来让我们的模型更能准确的预测问题。</p><p>​    BP算法由信号的正向传播和误差的反向传播两个过程组成。</p><p>​    正向传播时，输入样本从输入层进入网络，经隐层逐层传递至输出层，如果输出层的实际输出与期望输出(导师信号)不同，则转至误差反向传播；如果输出层的实际输出与期望输出(导师信号)相同，结束学习算法。</p><p>​    反向传播时，将输出误差(期望输出与实际输出之差)按原通路反传计算，通过隐层反向，直至输入层，在反传过程中将误差分摊给各层的各个单元，获得各层各单元的误差信号，并将其作为修正各单元权值的根据。这一计算过程使用梯度下降法完成，在不停地调整各层神经元的权值和阈值后，使误差信号减小到最低限度。</p><hr><h2 id="光流"><a href="#光流" class="headerlink" title="光流"></a>光流</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>​    给定两张图像H和I，评估从H到I的像素运动，解决的是像素对应的问题</p><h4 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h4><ul><li>brightness constancy 亮度恒定</li><li>spatial coherence 空间相干</li><li>small motion 细微运动</li></ul><h4 id="约束公式"><a href="#约束公式" class="headerlink" title="约束公式"></a>约束公式</h4><p><img src="/images/cv/review/image-20200113144747201.png" alt="image-20200113144747201" style="zoom:60%;" /></p><h4 id="可靠位置"><a href="#可靠位置" class="headerlink" title="可靠位置"></a>可靠位置</h4><p>​    纹理复杂区域，梯度比较大且方向不同，求出来的特征值比较大，光流比较可靠</p><hr><h2 id="相机模型"><a href="#相机模型" class="headerlink" title="相机模型"></a>相机模型</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><h4 id="景深"><a href="#景深" class="headerlink" title="景深"></a>景深</h4><p>​    相机镜头能够取得清晰图像的成像所测定的被摄物体前后范围距离</p><h4 id="光圈"><a href="#光圈" class="headerlink" title="光圈"></a>光圈</h4><p>​    镜头中，用来控制光线透过镜头，进入机身内感光面光量的装置</p><h4 id="焦距"><a href="#焦距" class="headerlink" title="焦距"></a>焦距</h4><p>​    从镜片中心到底片等成像平面的距离</p><h4 id="视场"><a href="#视场" class="headerlink" title="视场"></a>视场</h4><p>​    摄像头能够观察到的最大范围</p><h4 id="光圈vs景深"><a href="#光圈vs景深" class="headerlink" title="光圈vs景深"></a>光圈vs景深</h4><p>​    较小的光圈对应较大的景深</p><p>​    但是较小的光圈限制了光线的进入，因此需要增加曝光</p><p><img src="/images/cv/review/image-20200113145059481.png" alt="image-20200113145059481" style="zoom:67%;" /></p><h4 id="焦距vs视场"><a href="#焦距vs视场" class="headerlink" title="焦距vs视场"></a>焦距vs视场</h4><p>​    焦距越短，视场角越大，放大倍率越小，拍摄范围越大，拍摄画面中的人越小</p><p><img src="/images/cv/review/image-20200113145150381.png" alt="image-20200113145150381" style="zoom:50%;" /></p><h3 id="理想的针孔相机模型"><a href="#理想的针孔相机模型" class="headerlink" title="理想的针孔相机模型"></a>理想的针孔相机模型</h3><h4 id="基本投影公式"><a href="#基本投影公式" class="headerlink" title="基本投影公式"></a>基本投影公式</h4><p><img src="/images/cv/review/image-20200113145534415.png" alt="image-20200113145534415" style="zoom: 50%;" /></p><p><img src="/images/cv/review/image-20200113145752100.png" alt="image-20200113145752100" style="zoom: 50%;" /></p><h4 id="齐次坐标下的透视投影"><a href="#齐次坐标下的透视投影" class="headerlink" title="齐次坐标下的透视投影"></a>齐次坐标下的透视投影</h4><p><img src="/images/cv/review/image-20200113150049514.png" alt="image-20200113150049514" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113152207666.png" alt="image-20200113152207666" style="zoom:67%;" /></p><h4 id="齐次坐标表示的好处"><a href="#齐次坐标表示的好处" class="headerlink" title="齐次坐标表示的好处"></a>齐次坐标表示的好处</h4><ul><li>齐次坐标可以表示无穷远处的点</li><li>把各种变换都统一了起来，即把缩放，旋转，平移等变换都统一起来，都表示成一连串的矩阵相乘的形式。保证了形式上的线性一致性</li><li>合并矩阵运算中的乘法和加法</li></ul><h4 id="内参"><a href="#内参" class="headerlink" title="内参"></a>内参</h4><p> <img src="/images/cv/review/image-20200113151253172.png" alt="image-20200113151253172" style="zoom: 55%;" /></p><h4 id="内参矩阵"><a href="#内参矩阵" class="headerlink" title="内参矩阵"></a>内参矩阵</h4><p> <img src="/images/cv/review/image-20200113152411976.png" alt="image-20200113152411976" style="zoom:70%;" /></p><h3 id="畸变"><a href="#畸变" class="headerlink" title="畸变"></a>畸变</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li><p>径向畸变</p><p>不完美的镜头，镜片的不理想，镜头的几何形状，光圈位置<br>↑ 概括成透镜几何性质和孔径位置<br>远离透镜中心的地方比靠近中心的地方更加弯曲</p></li><li><p>切向畸变</p><p>由于CMOS等感光元件摆放倾斜，没有平行于图像平面<br>越靠近中间，畸变越小</p></li></ul><h4 id="径向畸变类型"><a href="#径向畸变类型" class="headerlink" title="径向畸变类型"></a>径向畸变类型</h4><ul><li>枕形畸变：中间向外凸起</li><li>桶形畸变：中间向内凹陷</li></ul><p><img src="/images/cv/review/image-20200113152834059.png" alt="image-20200113152834059" style="zoom:80%;" /></p><h3 id="外参"><a href="#外参" class="headerlink" title="外参"></a>外参</h3><p> <img src="/images/cv/review/image-20200113153500792.png" alt="image-20200113153500792" style="zoom: 55%;" /></p><p>​    前三个指的是旋转参数，后三个指的是平移参数</p><p><img src="/images/cv/review/image-20200113153730043.png" alt="image-20200113153730043"></p><p><img src="/images/cv/review/image-20200113153656265.png" alt="image-20200113153656265" style="zoom:75%;" /></p><h3 id="内参、外参、畸变参数在成像阶段中的角色"><a href="#内参、外参、畸变参数在成像阶段中的角色" class="headerlink" title="内参、外参、畸变参数在成像阶段中的角色"></a>内参、外参、畸变参数在成像阶段中的角色</h3><ol><li>第一步是从世界坐标系转为相机坐标系，这一步是从三维点到三维点的转换，包括R，t等参数（相机外参）</li><li>第二步是从相机坐标系转为成像平面坐标系（像素坐标系），这一步是三维点到二维点的转换，包括K等参数（相机内参）</li><li>最后再用到畸变参数</li></ol><p><img src="/images/cv/review/image-20200113153949770.png" alt="image-20200113153949770" style="zoom: 50%;" /></p><p><img src="/images/cv/review/image-20200113154011459.png" alt="image-20200113154011459" style="zoom: 67%;" /></p><hr><h2 id="相机定标"><a href="#相机定标" class="headerlink" title="相机定标"></a>相机定标</h2><h3 id="一般的相机定标"><a href="#一般的相机定标" class="headerlink" title="一般的相机定标"></a>一般的相机定标</h3><h4 id="要求解的参数"><a href="#要求解的参数" class="headerlink" title="要求解的参数"></a>要求解的参数</h4><p>​    畸变参数，内参，外参</p><h4 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h4><p>​    已知：给定标定物体的N个角点，K个视角（棋盘格子两个点可以得出四个等式）</p><p>​    求解：Distortion coeffients , intrinsic para, extrinsic para。N个点K个视角可以列出2NK个等式，会带来6K+4个参数。每次会变的是外参，而内参和畸变参数是不变的，所以只需要2NK&gt;6K+4即可</p><h3 id="基于Homography的相机定标"><a href="#基于Homography的相机定标" class="headerlink" title="基于Homography的相机定标"></a>基于Homography的相机定标</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>​    三维标定物可由单幅图像进行标定，标定精度较高，但高精密三维标定物的加工和维护较困<br>难。平面型标定物比三维标定物制作简单，精度易保证，可以使用于任意的摄像机模型，标<br>定精度高</p><h4 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h4><ul><li>获取标定物体网格的角点在坐标系的位置</li><li>找到图片的角点</li><li>根据图像空间坐标系到世界坐标系列出等式</li><li>求解相机参数</li></ul><h4 id="自由度"><a href="#自由度" class="headerlink" title="自由度"></a>自由度</h4><p>​    9个参数，8个自由度，求解至少需要4个点，8个等式</p><hr><h2 id="立体视觉"><a href="#立体视觉" class="headerlink" title="立体视觉"></a>立体视觉</h2><h3 id="三角测量基本原理"><a href="#三角测量基本原理" class="headerlink" title="三角测量基本原理"></a>三角测量基本原理</h3><p><img src="/images/cv/review/image-20200113154944320.png" alt="image-20200113154944320" style="zoom:80%;" /></p><h4 id="Triangulation公式"><a href="#Triangulation公式" class="headerlink" title="Triangulation公式"></a>Triangulation公式</h4><p><img src="/images/cv/review/image-20200113160018238.png" alt="image-20200113160018238" style="zoom:55%;" /></p><h4 id="基本步骤-4"><a href="#基本步骤-4" class="headerlink" title="基本步骤"></a>基本步骤</h4><ul><li><p>Undistortion</p><p>remove distortions -&gt; undistorted images 恢复失真，消除畸变</p></li><li><p>Rectification<br>adjust cameras -&gt; the two images row-aligned 矫正相机，使图像在同一个平面上</p></li><li><p>Correspondence<br>find the same features in the two images -&gt; disparity 在两张图中找到对应的相同特征</p></li><li><p>Reprojection<br>triangulation -&gt; a depth map 三角测量</p></li></ul><hr><h2 id="结构光三维成像"><a href="#结构光三维成像" class="headerlink" title="结构光三维成像"></a>结构光三维成像</h2><h3 id="结构光三维成像系统的构成"><a href="#结构光三维成像系统的构成" class="headerlink" title="结构光三维成像系统的构成"></a>结构光三维成像系统的构成</h3><p>​    一个结构光三维成像系统主要由三个部分组成：结构光投影仪（一台或多台），CCD相机（一台或多<br>台），以及深度信息重建系统</p><h3 id="利用结构光获取三维数据的基本原理"><a href="#利用结构光获取三维数据的基本原理" class="headerlink" title="利用结构光获取三维数据的基本原理"></a>利用结构光获取三维数据的基本原理</h3><ul><li>观测对象坐标(x,y,z) ?</li><li>成像坐标(x’,y’)</li><li>投影角度θ.</li><li>投影仪与镜头的距离b</li><li>焦距f</li></ul><p><img src="/images/cv/review/image-20200113160439763.png" alt="image-20200113160439763" style="zoom:67%;" /></p><p><img src="/images/cv/review/image-20200113160704395.png" alt="image-20200113160704395" style="zoom:67%;" /></p><h3 id="ICP问题"><a href="#ICP问题" class="headerlink" title="ICP问题"></a>ICP问题</h3><h4 id="解决的问题-1"><a href="#解决的问题-1" class="headerlink" title="解决的问题"></a>解决的问题</h4><p>​    ICP（Iterative Closest Point）是根据前后两帧图像中匹配好的特征点在相机坐标系下的三维坐标，求解相机帧间运动的一种算法。</p><p>​    迭代最近点方法（用于多个摄像机的配准问题，即把多个扫描结果拼接在一起形成对扫描对象的完整描述）计算两组数据（两帧图像）间的旋转平移量，使之形成最佳匹配</p><p>​    registeration点云配准问题</p><h4 id="基本步骤-5"><a href="#基本步骤-5" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>​    给定两个三维点集X与Y，将Y配准到X：</p><ol><li>计算Y中的每一个点在X中的对应最近点</li><li>求使上述对应点对的平均距离最小的刚体变换，获得刚体变换参数（平移参数和旋转参数）</li><li>对Y应用上一步求得的刚体变换（平移和旋转），更新Y</li><li>如果X与Y的对应点对平均距离大于阈值，回到1，否则停止计算</li></ol><hr><h2 id="图像分割"><a href="#图像分割" class="headerlink" title="图像分割"></a>图像分割</h2><h3 id="基于k-means聚类的图像分割"><a href="#基于k-means聚类的图像分割" class="headerlink" title="基于k-means聚类的图像分割"></a>基于k-means聚类的图像分割</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><ul><li>对相似的点进行分类，并用一个符号表示</li><li>迭代的将点归类到最近的聚类中心上</li></ul><h4 id="基本步骤-6"><a href="#基本步骤-6" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>随机选择K个聚类中心</li><li>对图像上所有点，根据其与聚类中心的距离，将其划分到距离最近对应的中心的聚类簇</li><li>重新计算每一簇的均值来更新中心（簇内均值）</li><li>重复2，3步，直到no points are re-assigned</li></ol><h3 id="基于Mean-Shift的图像分割"><a href="#基于Mean-Shift的图像分割" class="headerlink" title="基于Mean Shift的图像分割"></a>基于Mean Shift的图像分割</h3><h4 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h4><p>​    假设不同簇类的数据集符合不同的概率密度分布,找到任一样本点密度增大的最快方向(最快方向的含义就是Mean Shift),样本密度高的区域对应于该分布的最大值,这些样本点最终会在局部密度最大值收敛,且收敛到相同局部最大值的点被认为是同一簇类的成员。</p><h4 id="基本步骤-7"><a href="#基本步骤-7" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>Choose kernel and bandwidth</li><li>For each point<ul><li>center a window on that point</li><li>compute the mean of the data in the search window</li><li>center the search window at the new mean location</li><li>Repeat (b, c) until convergence</li></ul></li><li>Assign points that lead to nearby modes to the same cluster</li></ol><h4 id="与k-means相比的好处"><a href="#与k-means相比的好处" class="headerlink" title="与k-means相比的好处"></a>与k-means相比的好处</h4><ul><li>Good general-purpose segmentation</li><li>Flexible in number and shape of regions</li><li>Robust to outliers</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;h3 id=&quot;格式塔法则&quot;&gt;&lt;a href=&quot;#格式塔法则&quot; class=&quot;headerlink&quot; title=&quot;格式塔法则&quot;&gt;&lt;/a&gt;格式塔法
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【Java】String、StringBuffer &amp; StringBuilder</title>
    <link href="https://iris-cyy.github.io//Notes/Java/2020-02-03/java_stringbuffer/"/>
    <id>https://iris-cyy.github.io//Notes/Java/2020-02-03/java_stringbuffer/</id>
    <published>2020-02-03T03:49:20.000Z</published>
    <updated>2020-02-03T03:54:56.589Z</updated>
    
    <content type="html"><![CDATA[<p>在JAVA中，对字符串的操作可以通过<code>String</code> 、<code>StringBuffer</code>、<code>StringBuilder</code>来进行。三者虽然功能相似，但在实际开发中，不同场景下使用三者的性能会存在一定差异，三者各有其较适宜使用的场景。本文将通过分析三者的源代码，分析主要数据组织及功能实现上的区别、设计方式的影响，并分析三者分别适合使用的场景。</p><h2 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h2><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="主要结构"><a href="#主要结构" class="headerlink" title="主要结构"></a>主要结构</h4><p>​    String类的结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] value;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span> coder;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> COMPACT_STRINGS;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">       COMPACT_STRINGS = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =</span><br><span class="line">       <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br><span class="line">       </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    String类被final修饰，说明它不可被继承。</p><p>​    String的值由<code>byte[] value</code>来存储，即String的本质是一个byte的数组。被final修饰，说明String是个不可变类，即存储的值不可改变。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>​    String类提供的构造函数有很多种，在下面进行一些简单的分析：</p><ol><li>无参构造，创建空字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = <span class="string">""</span>.coder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>提供一个String作为参数，进行深拷贝</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = original.coder;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>提供一个字符数组作为参数，构造新的String</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(value, <span class="number">0</span>, value.length, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>通过一个现有数组中截取一段子数组，构造新的String</li></ol><p>​    数组可能是字符或者各种形式的编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(value, offset, count, rangeCheck(value, offset, count));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    checkBoundsOffCount(offset, count, codePoints.length);</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">        <span class="keyword">this</span>.coder = <span class="string">""</span>.coder;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (COMPACT_STRINGS) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] val = StringLatin1.toBytes(codePoints, offset, count);</span><br><span class="line">        <span class="keyword">if</span> (val != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.coder = LATIN1;</span><br><span class="line">            <span class="keyword">this</span>.value = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.coder = UTF16;</span><br><span class="line">    <span class="keyword">this</span>.value = StringUTF16.toBytes(codePoints, offset, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charsetName"</span>);</span><br><span class="line">    checkBoundsOffCount(offset, length, bytes.length);</span><br><span class="line">    StringCoding.Result ret =</span><br><span class="line">        StringCoding.decode(charsetName, bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = ret.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = ret.coder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charset"</span>);</span><br><span class="line">    checkBoundsOffCount(offset, length, bytes.length);</span><br><span class="line">    StringCoding.Result ret =</span><br><span class="line">        StringCoding.decode(charset, bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = ret.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = ret.coder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charsetName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBoundsOffCount(offset, length, bytes.length);</span><br><span class="line">    StringCoding.Result ret = StringCoding.decode(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = ret.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = ret.coder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>通过byte数组或者StringBuffer、StringBuilder来构造新的String</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(buffer.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(builder, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>长度</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length &gt;&gt; coder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>判断是否为空</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>取某位置的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">        <span class="keyword">return</span> StringLatin1.charAt(value, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUTF16.charAt(value, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>判断两个字符串是否相等</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String aString = (String)anObject;</span><br><span class="line">        <span class="keyword">if</span> (coder() == aString.coder()) &#123;</span><br><span class="line">            <span class="keyword">return</span> isLatin1() ? StringLatin1.equals(value, aString.value)</span><br><span class="line">                              : StringUTF16.equals(value, aString.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>比较两个字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> v1[] = value;</span><br><span class="line">    <span class="keyword">byte</span> v2[] = anotherString.value;</span><br><span class="line">    <span class="keyword">if</span> (coder() == anotherString.coder()) &#123;</span><br><span class="line">        <span class="keyword">return</span> isLatin1() ? StringLatin1.compareTo(v1, v2)</span><br><span class="line">                          : StringUTF16.compareTo(v1, v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.compareToUTF16(v1, v2)</span><br><span class="line">                      : StringUTF16.compareToLatin1(v1, v2);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>判断起始/终结字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> toffset)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Note: toffset might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (toffset &lt; <span class="number">0</span> || toffset &gt; length() - prefix.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span> ta[] = value;</span><br><span class="line">    <span class="keyword">byte</span> pa[] = prefix.value;</span><br><span class="line">    <span class="keyword">int</span> po = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pc = pa.length;</span><br><span class="line">    <span class="keyword">if</span> (coder() == prefix.coder()) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = isLatin1() ? toffset : toffset &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (po &lt; pc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLatin1()) &#123;  <span class="comment">// &amp;&amp; pcoder == UTF16</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// coder == UTF16 &amp;&amp; pcoder == LATIN1)</span></span><br><span class="line">        <span class="keyword">while</span> (po &lt; pc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUTF16.getChar(ta, toffset++) != (pa[po++] &amp; <span class="number">0xff</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> startsWith(prefix, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> startsWith(suffix, length() - suffix.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>找某字符的下标</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(ch, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (coder() == str.coder()) &#123;</span><br><span class="line">        <span class="keyword">return</span> isLatin1() ? StringLatin1.indexOf(value, str.value)</span><br><span class="line">                          : StringUTF16.indexOf(value, str.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (coder() == LATIN1) &#123;  <span class="comment">// str.coder == UTF16</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StringUTF16.indexOfLatin1(value, str.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(value, coder(), length(), str, fromIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">byte</span> srcCoder, <span class="keyword">int</span> srcCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                   String tgtStr, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] tgt    = tgtStr.value;</span><br><span class="line">    <span class="keyword">byte</span> tgtCoder = tgtStr.coder();</span><br><span class="line">    <span class="keyword">int</span> tgtCount  = tgtStr.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fromIndex &gt;= srcCount) &#123;</span><br><span class="line">        <span class="keyword">return</span> (tgtCount == <span class="number">0</span> ? srcCount : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fromIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tgtCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fromIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tgtCount &gt; srcCount) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (srcCoder == tgtCoder) &#123;</span><br><span class="line">        <span class="keyword">return</span> srcCoder == LATIN1</span><br><span class="line">            ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)</span><br><span class="line">            : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (srcCoder == LATIN1) &#123;    <span class="comment">//  &amp;&amp; tgtCoder == UTF16</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// srcCoder == UTF16 &amp;&amp; tgtCoder == LATIN1) &#123;</span></span><br><span class="line">    <span class="keyword">return</span> StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>取子串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = length() - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)</span><br><span class="line">                      : StringUTF16.newString(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = length();</span><br><span class="line">    checkBoundsBeginEnd(beginIndex, endIndex, length);</span><br><span class="line">    <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex == <span class="number">0</span> &amp;&amp; endIndex == length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)</span><br><span class="line">                      : StringUTF16.newString(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>将String中的指定内容进行替换，需要注意的是，由于String不可变，这种”替换”实际上是新建了一个字符串进行返回，而非改变原来的字符串。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oldChar != newChar) &#123;</span><br><span class="line">        String ret = isLatin1() ? StringLatin1.replace(value, oldChar, newChar)</span><br><span class="line">                                : StringUTF16.replace(value, oldChar, newChar);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractStringBuilder类"><a href="#AbstractStringBuilder类" class="headerlink" title="AbstractStringBuilder类"></a>AbstractStringBuilder类</h3><p>​    分析源码发现，StringBuilder类和StringBuffer类都继承自AbstractStringBuilder父类，故先分析父类的结构和主要功能。</p><h4 id="主要结构-1"><a href="#主要结构-1" class="headerlink" title="主要结构"></a>主要结构</h4><p>​    与String类一样，使用byte数组来存储字符串内容。增加count变量记录字符串的实际长度。</p><p>​    另一个与String不同的点在于，AbstractStringBuilder是一个可变的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123; </span><br><span class="line"><span class="keyword">byte</span>[] value;</span><br><span class="line">    <span class="keyword">byte</span> coder;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><p>​    有参构造通过传入字符数组的容量作为参数，构造指定容量的字符数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AbstractStringBuilder() &#123;</span><br><span class="line">    value = EMPTYVALUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (COMPACT_STRINGS) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">byte</span>[capacity];</span><br><span class="line">        coder = LATIN1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value = StringUTF16.newBytesFor(capacity);</span><br><span class="line">        coder = UTF16;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>字符串间比较</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(AbstractStringBuilder another)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == another) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span> val1[] = value;</span><br><span class="line">    <span class="keyword">byte</span> val2[] = another.value;</span><br><span class="line">    <span class="keyword">int</span> count1 = <span class="keyword">this</span>.count;</span><br><span class="line">    <span class="keyword">int</span> count2 = another.count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coder == another.coder) &#123;</span><br><span class="line">        <span class="keyword">return</span> isLatin1() ? StringLatin1.compareTo(val1, val2, count1, count2)</span><br><span class="line">                          : StringUTF16.compareTo(val1, val2, count1, count2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.compareToUTF16(val1, val2, count1, count2)</span><br><span class="line">                      : StringUTF16.compareToLatin1(val1, val2, count1, count2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>获取字符串长度，由于count变量被用于记录字符串长度，因此只要返回count值即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>由于构造的字符串可变，源码中提供改变字符串所需的函数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于保证容量至少与给定的最小值相等</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minimumCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ensureCapacityInternal(minimumCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于扩大字符串容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">newCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = value.length &gt;&gt; coder;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> SAFE_BOUND = MAX_ARRAY_SIZE &gt;&gt; coder;</span><br><span class="line">    <span class="keyword">return</span> (newCapacity &lt;= <span class="number">0</span> || SAFE_BOUND - newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        ? hugeCapacity(minCapacity)</span><br><span class="line">        : newCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于将容量减小至已用容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = count &lt;&lt; coder;</span><br><span class="line">    <span class="keyword">if</span> (length &lt; value.length) &#123;</span><br><span class="line">        value = Arrays.copyOf(value, length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newLength &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(newLength);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureCapacityInternal(newLength);</span><br><span class="line">    <span class="keyword">if</span> (count &lt; newLength) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">            StringLatin1.fillNull(value, count, newLength);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            StringUTF16.fillNull(value, count, newLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count = newLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>返回某一下标处的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkIndex(index, count);</span><br><span class="line">    <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>)(value[index] &amp; <span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StringUTF16.charAt(value, index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>改变某一下标处的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    checkIndex(index, count);</span><br><span class="line">    <span class="keyword">if</span> (isLatin1() &amp;&amp; StringLatin1.canEncode(ch)) &#123;</span><br><span class="line">        value[index] = (<span class="keyword">byte</span>)ch;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">            inflate();</span><br><span class="line">        &#125;</span><br><span class="line">        StringUTF16.putCharSB(value, index, ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>在现有字符串后面添加新的字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> appendNull();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    ensureCapacityInternal(count + len);</span><br><span class="line">    putStringAt(count, str);</span><br><span class="line">    count += len;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//各种形式的重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(Object obj)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(StringBuffer sb)</span> </span></span><br><span class="line"><span class="function">AbstractStringBuilder <span class="title">append</span><span class="params">(AbstractStringBuilder asb)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(CharSequence s)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span>[] str)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> offset, <span class="keyword">int</span> len)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">int</span> i)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">long</span> l)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br></pre></td></tr></table></figure><ol start="7"><li>替换，此处的替换与String类中的不同，并非返回新的字符串，而是在原有字符串基础上进行改变并返回</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="keyword">this</span>.count;</span><br><span class="line">    <span class="keyword">if</span> (end &gt; count) &#123;</span><br><span class="line">        end = count;</span><br><span class="line">    &#125;</span><br><span class="line">    checkRangeSIOOBE(start, end, count);</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">int</span> newCount = count + len - (end - start);</span><br><span class="line">    ensureCapacityInternal(newCount);</span><br><span class="line">    shift(end, newCount - count);</span><br><span class="line">    <span class="keyword">this</span>.count = newCount;</span><br><span class="line">    putStringAt(start, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>插入/删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span>[] str, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    checkOffset(index, count);</span><br><span class="line">    checkRangeSIOOBE(offset, offset + len, str.length);</span><br><span class="line">    ensureCapacityInternal(count + len);</span><br><span class="line">    shift(index, len);</span><br><span class="line">    count += len;</span><br><span class="line">    putCharsAt(index, str, offset, offset + len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一些重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, Object obj)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, String str)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">char</span>[] str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> dstOffset, CharSequence s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> dstOffset, CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">int</span> i)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">long</span> l)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">double</span> d)</span></span></span><br></pre></td></tr></table></figure><ol start="9"><li>返回子串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> substring(start, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    checkRangeSIOOBE(start, end, count);</span><br><span class="line">    <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">        <span class="keyword">return</span> StringLatin1.newString(value, start, end - start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StringUTF16.newString(value, start, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><h4 id="主要结构-2"><a href="#主要结构-2" class="headerlink" title="主要结构"></a>主要结构</h4><p>​    StringBuilder类继承于AbstractStringBuilder，不同于String，是一个可变类。其主要结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">StringBuilder</span>&gt;, <span class="title">CharSequence</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4383685877147921099L</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数-2"><a href="#构造函数-2" class="headerlink" title="构造函数"></a>构造函数</h4><p>​    StringBuilder的构造函数大多调用父类的接口完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(CharSequence seq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(seq.length() + <span class="number">16</span>);</span><br><span class="line">    append(seq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><p>​    StringBuilder的方法（append、insert等）大多调用父类接口，因此代码很短，实现较为方便。这里不再赘述其代码实现方法。</p><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><h4 id="主要结构-3"><a href="#主要结构-3" class="headerlink" title="主要结构"></a>主要结构</h4><p>​    和StringBuilder一样，StringBuffer也继承于AbstractStringBuilder类，也是可变类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">StringBuffer</span>&gt;, <span class="title">CharSequence</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">transient</span> String toStringCache;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3388685877147921107L</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数-3"><a href="#构造函数-3" class="headerlink" title="构造函数"></a>构造函数</h4><p>​    StringBuffer的构造函数形式和StringBuilder几乎完全一样，都是以继承父类为主</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(CharSequence seq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(seq.length() + <span class="number">16</span>);</span><br><span class="line">    append(seq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><p>​    StringBuffer与StringBuilder的主要方法结构都非常相似，不同点在于StringBuffer的方法前都有<code>synchronized</code>关键字作为修饰。即，StringBuffer类的方法每次只有一个线程可以访问，实现了线程安全。</p><h2 id="String、StringBuffer、StringBuilder的对比"><a href="#String、StringBuffer、StringBuilder的对比" class="headerlink" title="String、StringBuffer、StringBuilder的对比"></a>String、StringBuffer、StringBuilder的对比</h2><p>​    在分析完源代码之后，可以得出三者的主要区别如下：</p><p>​    String为不可变类，即其值为一个常量，不可以被改变。其所在的内存区域为常量池。</p><p>​    StringBuilder为可变类，其值可以通过已定义的函数接口发生改变，分配的内存区域为堆。</p><p>​    StringBuffer为可变类，定义的方法每次只能由一个线程访问，实现线程安全，分配的内存区域为堆。</p><p>​    三者都不可以被继承。</p><p>​    由于三者结构和功能存在区别，它们适合的场景也有一定区别。</p><p>​    由于每次对String的值进行改变时（例如连接、替换等），JVM将会生成一个新的字符串，将原来String的名字链接到新的字符串上，并且回收原有字符串。而在对StringBuffer和StringBuilder进行操作时，只是简单改变其自身的值。这导致了改变字符串时，String的性能和效率显著低于另外两个类。</p><p>​    因此，String适合的场景为，对少量字符串进行操作，并且操作较少的情况。StringBuffer和StringBuilder比较适合对字符串进行复杂操作的场景。其中StringBuffer由于实现线程安全，比较适合在多线程的场景中使用，而StringBuilder在单线程场景中使用效率会比较高。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"Welcome to Java"</span>;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"Welcome to Java"</span>); </span><br><span class="line">String s3 = <span class="string">"Welcome to Java"</span>;</span><br><span class="line">System.out.println(<span class="string">"s1 == s2 is "</span> + (s1 == s2)); </span><br><span class="line">System.out.println(<span class="string">"s1 == s3 is "</span> + (s1 == s3));</span><br></pre></td></tr></table></figure><p>Q: 为什么s1\==s2 返回false，而s1==s3返回true?</p><p>A: 由于String的对象存储在常量池中，s1在常量池中对应”Welcome to Java”，创建s2时由于使用new，创建了一个新的常量，与s1所对应常量不为同一个，故返回false。而s3被直接对应到常量池中”Welcome to Java”，与s1对应常量相同，故返回true。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在JAVA中，对字符串的操作可以通过&lt;code&gt;String&lt;/code&gt; 、&lt;code&gt;StringBuffer&lt;/code&gt;、&lt;code&gt;StringBuilder&lt;/code&gt;来进行。三者虽然功能相似，但在实际开发中，不同场景下使用三者的性能会存在一定差异，三者各有其
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Java" scheme="https://iris-cyy.github.io/categories/Notes/Java/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="Java" scheme="https://iris-cyy.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
