<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花落知多少</title>
  
  <subtitle>Nice to meet you :)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iris-cyy.github.io/"/>
  <updated>2020-02-04T14:19:28.183Z</updated>
  <id>https://iris-cyy.github.io/</id>
  
  <author>
    <name>Irisssy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【PAT】1005 Spell It Right</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-04/pat_1005/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-04/pat_1005/</id>
    <published>2020-02-04T14:15:56.000Z</published>
    <updated>2020-02-04T14:19:28.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Given a non-negative integer $N$, your task is to compute the sum of all the digits of $N$, and output every digit of the sum in English.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an $N (≤10^{100})$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>12345</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>one five</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>还挺简单。</p><p>要注意的是两个点</p><ol><li>大数。最大可能是100位，所以读入的时候要用<code>string</code>而不是<code>int</code></li><li>输入是0的时候</li></ol><p>实现代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> input;</span><br><span class="line"><span class="built_in">string</span> output = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(output != <span class="string">""</span>)&#123;</span><br><span class="line">        output = <span class="string">" "</span> + output;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (num)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            output = <span class="string">"one"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            output = <span class="string">"two"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            output = <span class="string">"three"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            output = <span class="string">"four"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            output = <span class="string">"five"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            output = <span class="string">"six"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            output = <span class="string">"seven"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            output = <span class="string">"eight"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            output = <span class="string">"nine"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            output = <span class="string">"zero"</span> + output;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">    <span class="keyword">int</span> length = input.length();</span><br><span class="line">    <span class="keyword">while</span>(length--)&#123;</span><br><span class="line">        sum += input[<span class="number">0</span>] - <span class="string">'0'</span>;</span><br><span class="line">        input = input.substr(<span class="number">1</span>, length+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">        output = <span class="string">"zero"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(sum)&#123;</span><br><span class="line">        trans(sum % <span class="number">10</span>);</span><br><span class="line">        sum /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; output &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Given a non-negative integer $N$, your task is to 
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1004 Counting Leaves</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-02-04/pat_1004/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-02-04/pat_1004/</id>
    <published>2020-02-04T04:05:47.000Z</published>
    <updated>2020-02-04T11:10:12.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 0&lt;$N$&lt;100, the number of nodes in a tree, and $M (&lt;N)$, the number of non-leaf nodes. Then $M$ lines follow, each in the format:</p><blockquote><p>ID K ID[1] ID[2] … ID[K]</p></blockquote><p>where <code>ID</code> is a two-digit number representing a given non-leaf node, <code>K</code> is the number of its children, followed by a sequence of two-digit <code>ID</code>‘s of its children. For the sake of simplicity, let us fix the root ID to be <code>01</code>.</p><p>The input ends with $N$ being 0. That case must NOT be processed.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you are supposed to count those family members who have no child <strong>for every seniority level</strong> starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.</p><p>The sample case represents a tree with only 2 nodes, where <code>01</code> is the root and <code>02</code> is its only child. Hence on the root <code>01</code>level, there is <code>0</code> leaf node; and on the next level, there is <code>1</code> leaf node. Then we should output <code>0 1</code> in a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>2 1<br>01 1 02</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>0 1</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这题只要根据输入构建一颗树，记录每个节点的<code>child</code>, <code>parent</code>以及<code>level</code>，然后做一个层序遍历，输出每一层没有子节点的节点数即可。</p><p>这里有一个trick，关于<code>level</code>值的更新。发现测试点中大概ID从顶层往下依次增加，并且录入的顺序从小到大，这使得树的构建减少了根据新的父子关系更新整棵子树<code>level</code>值的情况。</p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> M = <span class="number">0</span>; <span class="comment">//number of non-leaf nodes</span></span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>; <span class="comment">//number of nodes</span></span><br><span class="line"><span class="keyword">int</span> leafNum[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> child_num;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">    <span class="keyword">int</span> parent_id;</span><br><span class="line">&#125;Node[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXN; i++)&#123;</span><br><span class="line">        Node[i].child_num = <span class="number">0</span>;</span><br><span class="line">        Node[i].level = <span class="number">0</span>;</span><br><span class="line">        Node[i].parent_id = <span class="number">0</span>;</span><br><span class="line">        leafNum[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">if</span>(N == <span class="number">0</span> || M &gt; N)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id, child_id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; Node[id].child_num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;Node[id].child_num; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; child_id;</span><br><span class="line">            Node[child_id].parent_id = id;</span><br><span class="line">            <span class="comment">//如果会出现乱序情况，大概要在这里加更新level值，</span></span><br><span class="line">            <span class="comment">//并且要加判断，如果child有子节点，则在更新了level之后也要顺便更新子树所有节点的level</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node[<span class="number">1</span>].level = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        Node[i].level = Node[Node[i].parent_id].level + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxlevel = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].level &gt; maxlevel)&#123;</span><br><span class="line">            maxlevel = Node[i].level;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].child_num == <span class="number">0</span>)&#123;</span><br><span class="line">            leafNum[Node[i].level]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;maxlevel; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; leafNum[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; leafNum[maxlevel] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来在网上发现了一个更强的做法，用的dfs，贴在下面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://blog.csdn.net/richenyunqi/article/details/79533166</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;tree(<span class="number">100</span>);<span class="comment">//下标存储结点编号，元素内容存储儿子结点编号</span></span><br><span class="line"><span class="keyword">int</span> leaveNumOfLevel[<span class="number">100</span>],maxLevel=<span class="number">-1</span>;<span class="comment">//每层叶子节点数、最大层数</span></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> level)</span></span>&#123;<span class="comment">//深度优先遍历</span></span><br><span class="line">    maxLevel=<span class="built_in">max</span>(level,maxLevel);<span class="comment">//更新最大层数</span></span><br><span class="line">    <span class="keyword">if</span>(tree[v].empty())<span class="comment">//如果没有儿子结点，则为叶节点</span></span><br><span class="line">        ++leaveNumOfLevel[level];<span class="comment">//递增该节点所处层数下的叶节点数目</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:tree[v])<span class="comment">//不是叶节点</span></span><br><span class="line">        DFS(i,level+<span class="number">1</span>);<span class="comment">//递归遍历儿子结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="keyword">int</span> id,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;id,&amp;k);</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="keyword">int</span> iid;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;iid);</span><br><span class="line">            tree[id].push_back(iid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxLevel;++i)<span class="comment">//输出每层叶子节点数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s%d"</span>,i==<span class="number">0</span>?<span class="string">""</span>:<span class="string">" "</span>,leaveNumOfLevel[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;A family hierarchy is usually presented by a pedig
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Learning CNN</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/learning_CNN/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/learning_CNN/</id>
    <published>2020-02-03T05:12:45.000Z</published>
    <updated>2020-02-03T05:15:59.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已实现的功能简述及运行简要说明"><a href="#已实现的功能简述及运行简要说明" class="headerlink" title="已实现的功能简述及运行简要说明"></a>已实现的功能简述及运行简要说明</h2><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>​    利用CNN进行手写数字识别与物体分类:</p><ol><li>使用PyTorch工具实现最基本的卷积神经网络(CNN) LeNet-5以及一个物体分类的CNN</li><li>用MNIST手写数字数据集（0-9一共十个数字）6万样本实现对LeNet-5的训练，对MNIST的1万测试样本进行测试，获得识别率。</li><li>用CIFAR-10数据库实现CNN物体分类功能的训练与测试。</li></ol><h3 id="运行简要说明"><a href="#运行简要说明" class="headerlink" title="运行简要说明"></a>运行简要说明</h3><p>​    由于本次实验使用的两个测试集都比较经典，在torchvision库中都已经做了封装，因此在本实验中选择了直接调用。运行程序后，将先将指定数据集下载到指定路径中，然后再进行训练。为了节省下载时间，也可以将下载好的数据集添加到对应路径（<code>./data/</code>）中直接进行训练。</p><p>​    <code>MNIST.py</code>用于训练MNIST测试集，<code>CIFAR.py</code>用于训练CIFAR-10测试集。</p><p><br></p><h2 id="开发与运行环境"><a href="#开发与运行环境" class="headerlink" title="开发与运行环境"></a>开发与运行环境</h2><p>​    操作系统：Windows 10，64位<br>​    开发环境：Python 3.7.3<br>​    库环境：numpy 1.16.4, torch 1.1.0, torchvision 0.3.0</p><h2 id="算法基本思路、原理"><a href="#算法基本思路、原理" class="headerlink" title="算法基本思路、原理"></a>算法基本思路、原理</h2><h3 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h3><p>​    卷积神经网络(Convolutional Neural Network, CNN)是深度学习技术中极具代表的网络结构之一，在图像处理领域取得了很大的成功。CNN相较于传统的图像处理算法的优点之一在于，避免了对图像复杂的前期预处理过程（提取人工特征等），可以直接输入原始图像。</p><p>​    CNN中主要有两种类型的网络层，分别是卷积层和池化/采样层。</p><p>​    卷积层的作用是提取图像的各种特征，是卷积核在上一级输入层上通过逐一滑动窗口计算而得，卷积核中的每一个参数都相当于传统神经网络中的权值参数，与对应的局部像素相连接，将卷积核的各个参数与对应的局部像素值相乘之和，（通常还要再加上一个偏置参数），得到卷积层上的结果。</p><p>​    池化层的作用是对原始特征信号进行抽象，从而大幅度减少训练参数，另外还可以减轻模型过拟合的程度。池化/采样的方式通常有以下两种：</p><ul><li>Max-Pooling: 选择Pooling窗口中的最大值作为采样值；</li><li>Mean-Pooling: 将Pooling窗口中的所有值相加取平均，以平均值作为采样值；</li></ul><h3 id="LeNet-5"><a href="#LeNet-5" class="headerlink" title="LeNet-5"></a>LeNet-5</h3><p>​    LeNet-5是一种经典的CNN网络结构，其结构如下图：</p><p><img src="/images/cv/cnn/image-20191231174428209.png" alt="image-20191231174428209"></p><h4 id="输入层"><a href="#输入层" class="headerlink" title="输入层"></a>输入层</h4><p>​    将输入数据的尺寸统一归一化为$32 \times 32$</p><h4 id="卷积层1"><a href="#卷积层1" class="headerlink" title="卷积层1"></a>卷积层1</h4><p>​    使用6个大小为$5 \times 5$的卷积核对输入图像进行第一次卷积运算，得到6个大小为28 * 28的feature map</p><h4 id="池化层1"><a href="#池化层1" class="headerlink" title="池化层1"></a>池化层1</h4><p>​    使用$2 \times 2$的核对第一次卷积之后得到的结果进行池化，得到6个$14\times14$的map</p><h4 id="卷积层2"><a href="#卷积层2" class="headerlink" title="卷积层2"></a>卷积层2</h4><p>​    对上一层池化得到的输出进行组合，将6个特征增加为16个，使用16种$5\times 5$的卷积核进行卷积操作，得到16个$10\times10$的特征图。特征的组合如下：</p><p><img src="/images/cv/cnn/image-20191231225943896.png" alt="image-20191231225943896" style="zoom:67%;" /></p><h4 id="池化层2"><a href="#池化层2" class="headerlink" title="池化层2"></a>池化层2</h4><p>​    对输入的$10\times10$的特征图，使用$2\times2$的核进行池化，得到16个$5\times5$的feature map</p><h4 id="卷积层3"><a href="#卷积层3" class="headerlink" title="卷积层3"></a>卷积层3</h4><p>​    使用120种$5\times5$的卷积核进行卷积，输出120个$1\times1$的feature map</p><h4 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h4><p>​    使用全连接层将上一层输出的120个节点与本层的84个节点进行全连接</p><h4 id="输出层"><a href="#输出层" class="headerlink" title="输出层"></a>输出层</h4><p>​    将前一层的84个节点转换为输出的大小（与输出大小进行全连接）</p><h3 id="MNIST手写数据集"><a href="#MNIST手写数据集" class="headerlink" title="MNIST手写数据集"></a>MNIST手写数据集</h3><p>​    MNIST数据集是机器学习领域中非常经典的一个数据集，由60000个训练样本和10000个测试样本组成，每个样本都是一张28 * 28像素的灰度手写数字图片。</p><p>​    图片示例如下：</p><p><img src="/images/cv/cnn/image-20200101014446671.png" alt="image-20200101014446671" style="zoom: 25%;" /></p><h3 id="CIFAR-10数据集"><a href="#CIFAR-10数据集" class="headerlink" title="CIFAR-10数据集"></a>CIFAR-10数据集</h3><p>​    CIFAR-10数据集由10个类的60000个32x32彩色图像组成，每个类有6000个图像。有50000个训练图像和10000个测试图像。<br>​    数据集分为五个训练批次和一个测试批次，每个批次有10000个图像。测试批次包含来自每个类别的恰好1000个随机选择的图像。训练批次以随机顺序包含剩余图像，但一些训练批次可能包含来自一个类别的图像比另一个更多。总体来说，五个训练集之和包含来自每个类的正好5000张图像。<br>​    以下是数据集中的类，以及来自每个类的10个随机图像：</p><p><img src="/images/cv/cnn/image-20200101014334677.png" alt="image-20200101014334677" style="zoom: 67%;" /></p><p><br></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="LeNet5网络搭建"><a href="#LeNet5网络搭建" class="headerlink" title="LeNet5网络搭建"></a>LeNet5网络搭建</h3><p>​    根据上述LeNet5的每一层结构，搭建LeNet5神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">leNet5</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, output_size)</span>:</span></span><br><span class="line">        super(leNet5, self).__init__()</span><br><span class="line">        padding = (int)((<span class="number">32</span> - np.sqrt(input_size) )/<span class="number">2</span>)</span><br><span class="line">        channel_num = <span class="number">1</span> </span><br><span class="line">        self.c1 = nn.Conv2d(channel_num, <span class="number">6</span>, <span class="number">5</span>, padding = padding)</span><br><span class="line">        self.s2 = nn.MaxPool2d(kernel_size = <span class="number">2</span>, stride = <span class="number">2</span>)</span><br><span class="line">        self.c3 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.s4 = nn.MaxPool2d(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        self.c5 = nn.Conv2d(<span class="number">16</span>, <span class="number">120</span>, <span class="number">5</span>)</span><br><span class="line">        self.f6 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.output = nn.Linear(<span class="number">84</span>, output_size)</span><br><span class="line">        self.relu = nn.ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.relu(self.c1(x))</span><br><span class="line">        x = self.relu(self.s2(x))</span><br><span class="line">        x = self.relu(self.c3(x))</span><br><span class="line">        x = self.relu(self.s4(x))</span><br><span class="line">        x = self.relu(self.c5(x))</span><br><span class="line">        x = x.view(x.size()[<span class="number">0</span>], <span class="number">-1</span>)</span><br><span class="line">        x = self.relu(self.f6(x))</span><br><span class="line">        x = self.output(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h3 id="MNIST手写数据集测试"><a href="#MNIST手写数据集测试" class="headerlink" title="MNIST手写数据集测试"></a>MNIST手写数据集测试</h3><p>​    相关参数设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input_size = <span class="number">28</span> * <span class="number">28</span></span><br><span class="line">output_size = <span class="number">10</span></span><br><span class="line">channel_num = <span class="number">1</span></span><br><span class="line">num_epochs = <span class="number">20</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">learning_rate = <span class="number">0.4</span></span><br></pre></td></tr></table></figure><p>​    下载MNIST数据集并进行读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = torchvision.datasets.MNIST(root=<span class="string">'./data'</span>,train=<span class="literal">True</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>) </span><br><span class="line">test_dataset = torchvision.datasets.MNIST(root=<span class="string">'./data'</span>,train=<span class="literal">False</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>​    损失函数及优化器设计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lossFunction = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=learning_rate)</span><br></pre></td></tr></table></figure><p>​    训练网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> i, (images,labels) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        out = model(images)</span><br><span class="line">        loss = lossFunction(out,labels)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Epoch [&#123;&#125;/&#123;&#125;], Step [&#123;&#125;/&#123;&#125;], Loss: &#123;:.4f&#125;'</span> .format(epoch+<span class="number">1</span>, num_epochs, i+<span class="number">1</span>, total_step, loss.item()))</span><br></pre></td></tr></table></figure><h3 id="CIFAR-10数据集测试"><a href="#CIFAR-10数据集测试" class="headerlink" title="CIFAR-10数据集测试"></a>CIFAR-10数据集测试</h3><p>​    相关参数设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input_size = <span class="number">32</span> * <span class="number">32</span></span><br><span class="line">output_size = <span class="number">10</span></span><br><span class="line">channel_num = <span class="number">3</span></span><br><span class="line">num_epochs = <span class="number">20</span></span><br><span class="line">batch_size = <span class="number">128</span></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br></pre></td></tr></table></figure><p>​    下载数据集并进行读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = torchvision.datasets.CIFAR10(root=<span class="string">'./data'</span>,train=<span class="literal">True</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>) </span><br><span class="line">test_dataset = torchvision.datasets.CIFAR10(root=<span class="string">'./data'</span>,train=<span class="literal">False</span>, transform=transforms.ToTensor(), download=<span class="literal">True</span>)</span><br><span class="line">train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>​    损失函数及优化器设计</p><p>​    由于CIFAR-10数据集与MNIST相比更为复杂，因此使用Adam作为优化器，实验证明识别率确实比SGD更高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lossFunction = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.Adam(model.parameters(), lr=learning_rate)</span><br></pre></td></tr></table></figure><p>​    网络训练部分与MNIST类似</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;a href=&quot;#已实现的功能简述及运行简要说明&quot; class=&quot;headerlink&quot; title=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;/a&gt;已实现的功能简述及运行简要说明&lt;/h2&gt;&lt;h3 id=&quot;功能简述&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Image Stitching</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/image_stitching/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/image_stitching/</id>
    <published>2020-02-03T05:07:54.000Z</published>
    <updated>2020-02-03T05:11:48.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已实现的功能简述及运行简要说明"><a href="#已实现的功能简述及运行简要说明" class="headerlink" title="已实现的功能简述及运行简要说明"></a>已实现的功能简述及运行简要说明</h2><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>​    对输入的多张彩色图像，可以自动拼接成全景图像，同时对拼接边缘部分进行融合处理。</p><h3 id="运行简要说明"><a href="#运行简要说明" class="headerlink" title="运行简要说明"></a>运行简要说明</h3><p>​    <code>img1</code>，<code>img2</code>，… 存储读取图像的路径，生成的全景图像将在result窗口中显示，并存储为result.jpg在与代码相同目录下。</p><p><br></p><h2 id="开发与运行环境"><a href="#开发与运行环境" class="headerlink" title="开发与运行环境"></a>开发与运行环境</h2><p>​    操作系统：Windows 10，64位<br>​    开发环境：Python 3.7.3<br>​    库环境：numpy 1.16.4, cv2 3.4.2</p><p><br></p><h2 id="算法基本思路、原理"><a href="#算法基本思路、原理" class="headerlink" title="算法基本思路、原理"></a>算法基本思路、原理</h2><h3 id="SIFT特征提取"><a href="#SIFT特征提取" class="headerlink" title="SIFT特征提取"></a>SIFT特征提取</h3><p>​    SIFT即Scale Invariant Feature Transform，尺度不变特征变换。主要包含尺度空间的极值检测、特征点定位、特征方向赋值、特征点描述四个步骤。</p><p>​    首先由不同高斯卷积得到图像的高斯尺寸空间</p><p><img src="/images/cv/image_stitching/image-20191221213624451.png" alt="image-20191221213624451" style="zoom:80%;" /></p><p>​    其中，$G(x,y,σ)$是高斯核函数，$σ$代表尺度空间因子，是高斯正态分布的标准差，反应了被模糊的程度，其值越大，模糊程度越高，尺度也就越大。$L(x,y,σ)$代表高斯尺度空间，构建好后就可以检测出在不同尺度下的特征点。特征点的检测可以使用LoG算子，但是LoG的运算量过于大，通常使用的DoG，即差分高斯。</p><p><img src="/images/cv/image_stitching/image-20191221213738519.png" alt="image-20191221213738519" style="zoom:80%;" /></p><p>​    DoG是由两个相邻的高斯空间图像相减得到的。所以需要得到一系列的高斯空间尺度，可以在对图像平滑和向下取样得到结果的基础上加上高斯滤波，即对向下取样的每层图像使用不同的尺度空间因子$σ$进行模糊。通过这样的方式，通过相邻两层相减就可以得到DoG的集合。</p><p>​    为了寻找尺度空间的极值点，每个像素点要和其图像域（同一尺度空间）和尺度域（相邻的尺度空间）的所有相邻点进行比较，当其大于（或者小于）所有相邻点时，该点就是极值点。</p><p><img src="/images/cv/image_stitching/image-20191221213900801.png" alt="image-20191221213900801" style="zoom: 50%;" /></p><p>​    利用特征点邻域像素的梯度分布特性来确定其方向参数，再利用图像的梯度直方图求取关键点局部结构的稳定方向。</p><p><img src="/images/cv/image_stitching/image-20191221220450416.png" alt="image-20191221220450416" style="zoom: 50%;" /></p><h3 id="特征点匹配"><a href="#特征点匹配" class="headerlink" title="特征点匹配"></a>特征点匹配</h3><p>​    通过K邻近算法将之前使用SIFT算法得到的特征点以及相应特征描述进行匹配。使用KNN算法找到最近邻的两个数据点，如果这两个点的距离比值小于指定的值，那么我们就可以认为这两个点是最接近的，并认为这两个点是好的匹配点加入到我们的列表中。</p><h3 id="图像变换"><a href="#图像变换" class="headerlink" title="图像变换"></a>图像变换</h3><p>​    通过Homography矩阵进行图像变换。使用之前得到的匹配点计算Homography矩阵。通过矩阵的表达式可以看出，需要求解这六个未知数需要用到三对匹配点。而这些点的选择将通过RANSAC算法来进行。</p><p><img src="/images/cv/image_stitching/image-20191221221017082.png" alt="image-20191221221017082" style="zoom: 40%;" /></p><p>​    RANSAC算法即随机抽样一致算法（Random Sample Consensus）。将从数据中随机选择的点定位内点，拟合模型，然后将其他点带入模型中，如果Loss在指定阈值之内，则将这些点标为内点。如果内点数量足够多则可以认为模型比较理想。重复以上步骤得到最理想的模型。</p><h3 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h3><p>​    一种图像融合的方式是，使用高斯金字塔和拉普拉斯金字塔，对尺寸相同但是内容不同的两张图片进行无缝连接。算法及示例如下：</p><p><img src="/images/cv/image_stitching/image-20191221222509555.png" alt="image-20191221222509555" style="zoom: 40%;" /></p><p><img src="/images/cv/image_stitching/image-20191221222537361.png" alt="image-20191221222537361" style="zoom:50%;" /></p><p><img src="/images/cv/image_stitching/image-20191221222639642.png" alt="image-20191221222639642" style="zoom: 33%;" /></p><p>​    在本项目的实现，即全景图片的拼接中，由于拼接部分内容相似，只是可能存在色差等问题，因此采用更为简便的方法。即根据当前像素点与待融合部分左边缘的距离，选择递增的权重，在待融合部分进行渐变显示。<br>$$<br>output\,[i,\,j] = img_left\,[i,\,j] \times (1-\alpha) \; + \; img_right\,[i,\,j] \times \alpha<br>$$</p><p>$$<br>\alpha = \frac{j-leftend}{rightend-leftend}<br>$$</p><p><br></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>​    直接调用opencv中的SIFT相关函数进行特征匹配，实现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift_compute</span><span class="params">(img)</span>:</span></span><br><span class="line">    sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">    kp, des = sift.detectAndCompute(img, <span class="literal">None</span>)</span><br><span class="line">    kp_img = cv2.drawKeypoints(img, kp, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> kp_img, kp, des</span><br></pre></td></tr></table></figure><h3 id="特征点匹配-1"><a href="#特征点匹配-1" class="headerlink" title="特征点匹配"></a>特征点匹配</h3><p>​    调用knnMatch函数进行特征点匹配，如果距离相近，则认为是好的匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bf = cv2.BFMatcher()</span><br><span class="line">matches = bf.knnMatch(des1, des2, k=<span class="number">2</span>)</span><br><span class="line">k = <span class="number">0.75</span></span><br><span class="line">goodMatch = []</span><br><span class="line"><span class="keyword">for</span> (i, j) <span class="keyword">in</span> matches:</span><br><span class="line">    <span class="keyword">if</span> i.distance &lt; k * j.distance:</span><br><span class="line">        goodMatch.append(i)</span><br></pre></td></tr></table></figure><h3 id="图像变换-1"><a href="#图像变换-1" class="headerlink" title="图像变换"></a>图像变换</h3><p>​    调用函数，利用RANSAC算法计算Homography矩阵，并进行图像变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fitting transformation</span></span><br><span class="line">ptsA= np.float32([kp1[m.queryIdx].pt <span class="keyword">for</span> m <span class="keyword">in</span> goodMatch]).reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">ptsB = np.float32([kp2[m.trainIdx].pt <span class="keyword">for</span> m <span class="keyword">in</span> goodMatch]).reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">ransacReprojThreshold = <span class="number">4</span>  </span><br><span class="line"><span class="comment">#compute Homography matrix by RANSAC</span></span><br><span class="line">H, status =cv2.findHomography(ptsA,ptsB,cv2.RANSAC,ransacReprojThreshold)</span><br></pre></td></tr></table></figure><h3 id="图像融合-1"><a href="#图像融合-1" class="headerlink" title="图像融合"></a>图像融合</h3><p>​    将位于左边的图片作为要叠加的图片，位于右边的图片（之前进行变换的图片）作为被叠加的图片。为了除去黑色边缘，检测左边图片的像素点，若不在黑边区域则进行显示，否则不显示。此外，若检测得到当前位置为两张图片的重叠区域，则进行融合处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#blending</span></span><br><span class="line">mask_start = <span class="number">0</span> <span class="comment">#the left index of blending</span></span><br><span class="line">mask_end = img_left.shape[<span class="number">1</span>] <span class="comment">#the right index of blending</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(img_left.shape[<span class="number">1</span>]):</span><br><span class="line">    <span class="keyword">if</span> imgOutput[<span class="number">0</span>,i,:].any() != <span class="number">0</span>:</span><br><span class="line">        mask_start = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#to avoid black edges, if the pixel is black, don't show it</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(img_left.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(img_left.shape[<span class="number">1</span>]<span class="number">-1</span>):              </span><br><span class="line">        <span class="keyword">if</span> img_left[i,j+<span class="number">1</span>,:].any() != <span class="number">0</span>:           </span><br><span class="line">            <span class="comment">#in the overlap of two pictures, if the pixel is not so different, apply blending       </span></span><br><span class="line">            <span class="keyword">if</span> imgOutput[i,j,:].any() != <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> isdist(imgOutput[i,j], img_left[i,j]):</span><br><span class="line">                alpha = (j-mask_start) / (mask_end-mask_start)</span><br><span class="line">                imgOutput[i,j] = img_left[i,j] * (<span class="number">1</span>-alpha) + imgOutput[i,j] * alpha</span><br><span class="line">            <span class="keyword">else</span>:    </span><br><span class="line">                imgOutput[i,j] = img_left[i,j]</span><br></pre></td></tr></table></figure><h3 id="显示处理"><a href="#显示处理" class="headerlink" title="显示处理"></a>显示处理</h3><p>​    去除拼接后图像空白的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rows, cols &#x3D; np.where(imgIn[:,:,0] !&#x3D;0)</span><br><span class="line">min_row, max_row &#x3D; min(rows), max(rows) +1</span><br><span class="line">min_col, max_col &#x3D; min(cols), max(cols) +1</span><br><span class="line">imgOut &#x3D; imgIn[min_row:max_row,min_col:max_col,:]</span><br><span class="line">return imgOut</span><br></pre></td></tr></table></figure><p><br></p><h2 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h2><h3 id="yosemite-test"><a href="#yosemite-test" class="headerlink" title="yosemite-test"></a>yosemite-test</h3><h4 id="特征点图"><a href="#特征点图" class="headerlink" title="特征点图"></a>特征点图</h4><p><img src="/images/cv/image_stitching/image-20191221224226332.png" alt="image-20191221224226332" style="zoom:50%;" /></p><h4 id="特征点匹配图"><a href="#特征点匹配图" class="headerlink" title="特征点匹配图"></a>特征点匹配图</h4><p><img src="/images/cv/image_stitching/image-20191221224253606.png" alt="image-20191221224253606" style="zoom:67%;" /></p><h4 id="Homography图像变换"><a href="#Homography图像变换" class="headerlink" title="Homography图像变换"></a>Homography图像变换</h4><p><img src="/images/cv/image_stitching/image-20191221224530256.png" alt="image-20191221224530256" style="zoom:67%;" /></p><h4 id="最终拼接结果"><a href="#最终拼接结果" class="headerlink" title="最终拼接结果"></a>最终拼接结果</h4><p><img src="/images/cv/image_stitching/image-20191221224632376.png" alt="image-20191221224632376"></p><h3 id="其他测试图"><a href="#其他测试图" class="headerlink" title="其他测试图"></a>其他测试图</h3><p>​    使用自己拍摄的图像进行拼接，结果如下：</p><p><img src="/images/cv/image_stitching/image-20191222190616426.png" alt="image-20191222190616426"></p><p>​    可以看出来结果不尽如人意。分析原因可能有以下几点：</p><ol><li>使用手机进行拍摄，在拍摄时就可以发现，镜头边缘变形非常严重，这可能导致了在图像进行拼接时，由于边缘变形导致Homography矩阵出现偏差，这种变形进行累加将导致待拼接的图像数量越多，整体变形越严重</li><li>在本项目的拼接处理中，以最左边的图片作为基准，对其他图片进行变换并融合叠加，这在一定程度上加大了最右边图像所需要做的变形。猜测如果以最中间图片作为基准，对两边图片进行变换，将会有更好的效果</li></ol><p>​    为了验证以上两点猜想，用手机全景照相功能拍摄了一张全景图像，裁剪成多张图片之后再进行拼接，得到结果如下：</p><p><img src="/images/cv/image_stitching/image-20191222190047773.png" alt="image-20191222190047773"></p><p>​    可以看出来效果符合预期，说明之前不符合预期的情况确实可能是由于以上原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;a href=&quot;#已实现的功能简述及运行简要说明&quot; class=&quot;headerlink&quot; title=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;/a&gt;已实现的功能简述及运行简要说明&lt;/h2&gt;&lt;h3 id=&quot;功能简述&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Harris Corner Detection</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/harris_corner/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/harris_corner/</id>
    <published>2020-02-03T05:03:45.000Z</published>
    <updated>2020-02-03T05:06:48.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已实现的功能简述及运行简要说明"><a href="#已实现的功能简述及运行简要说明" class="headerlink" title="已实现的功能简述及运行简要说明"></a>已实现的功能简述及运行简要说明</h2><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>​    对输入的一张彩色图像，自己写代码实现Harris Corner检测算法，显示中间的处理结果及最终的检测结果，包括最大特征值图，最小特征值图，R图（可以考虑彩色展示），原图上叠加检测结果等，并将这些中间结果都输出成图像文件。</p><h3 id="运行简要说明"><a href="#运行简要说明" class="headerlink" title="运行简要说明"></a>运行简要说明</h3><p>​    原始图像位置在<code>img_path</code>变量中存储，将在<code>origin</code>窗口中进行显示；最大特征值图在<code>lambda_max</code>窗口中显示，在相同目录下存储为<code>lambda_max.jpg</code>；最小特征值图在<code>lambda_min</code>窗口中进行显示，在相同目录下存储为<code>lambda_min.jpg</code>；R图在<code>R</code>窗口中显示，在相同目录下存储为<code>R.jpg</code>；设置threshold之后的R图在<code>R_threshold</code>窗口中显示，存储为<code>R_threshold.jpg</code>；局部极大值点图在<code>local_max</code>窗口中显示，存储为<code>local_max.jpg</code>；原图叠加显示结果在<code>cover</code>窗口中显示，并存储为<code>cover.jpg</code>。</p><p><br></p><h2 id="开发与运行环境"><a href="#开发与运行环境" class="headerlink" title="开发与运行环境"></a>开发与运行环境</h2><p>​    操作系统：Windows 10，64位</p><p>​    开发环境：Python 3.7.3</p><p>​    库环境：numpy 1.16.4, cv2 4.1.1</p><p><br></p><h2 id="算法基本思路、原理"><a href="#算法基本思路、原理" class="headerlink" title="算法基本思路、原理"></a>算法基本思路、原理</h2><p>​    角点检测的基本思想是，使用一个固定窗口在图像上进行任意方向上的滑动，比较滑动前与滑动后两种情况，窗口中的像素灰度变化程度，如果存在任意方向上的滑动，都有着较大灰度变化，那么我们可以认为该窗口中存在角点。</p><p><img src="/images/cv/harris/image-20191210103829827.png" alt="image-20191210103829827" style="zoom: 50%;" /></p><p>​    当窗口发生[u,v]移动时，那么滑动前与滑动后对应的窗口中的像素点灰度变化描述如下：</p><p><img src="/images/cv/harris/image-20191210103858663.png" alt="image-20191210103858663" style="zoom: 40%;" /></p><p>​    其中$[u,v]$是窗口的偏移量，$(x,y)$是窗口内所对应的像素坐标位置，窗口有多大，就有多少个位置。$w(x,y)$是窗口函数，有以下两种表示方法，最简单情形就是窗口内的所有像素所对应的w权重系数均为1。但有时候，我们会将$w(x,y)$函数设定为以窗口中心为原点的二元正态分布或高斯分布。如图所示：</p><p><img src="/images/cv/harris/image-20191210104139196.png" alt="image-20191210104139196" style="zoom: 50%;" /></p><p>​    根据上述表达式，当窗口处在平坦区域上滑动，可以想象的到，灰度不会发生变化，那么E(u,v) = 0；如果窗口处在比纹理比较丰富的区域上滑动，那么灰度变化会很大。算法最终思想就是计算灰度发生较大变化时所对应的位置，当然这个较大是指针任意方向上的滑动，并非单指某个方向。</p><p>​    我们对$E(w,v)$表达式进行泰勒展开，结果如下：</p><p><img src="/images/cv/harris/image-20191210104336762.png" alt="image-20191210104336762" style="zoom:50%;" /></p><p>​    可以将$E(u,v)$表达式更新为：</p><p><img src="/images/cv/harris/image-20191210104534120.png" alt="image-20191210104534120" style="zoom:40%;" /></p><p>​    其中</p><p><img src="/images/cv/harris/image-20191210104546366.png" alt="image-20191210104546366" style="zoom:40%;" /></p><p>​    求解M的两个特征值$\lambda_1$和$\lambda_2$，可以根据两个特征值直接的关系得出对应像素点的位置信息（边缘or角点or平坦区域）</p><p>​        corner：在水平、竖直两个方向上变化均较大的点，即Ix、Iy都较大； </p><p>​        edge ：仅在水平、或者仅在竖直方向有较大的点，即Ix和Iy只有其一较大 ；</p><p>​        flat  ： 在水平、竖直方向的变化量均较小的点，即Ix、Iy都较小；</p><p><img src="/images/cv/harris/image-20191210104846204.png" alt="image-20191210104846204" style="zoom:50%;" /></p><p>​    可以定义角点响应函数R来表示：</p><p><img src="/images/cv/harris/image-20191210105159377.png" alt="image-20191210105159377" style="zoom: 40%;" /></p><p>​    其中k是介于0.04-0.06间的常数。</p><p>​    针对三种不同区域的点，R的取值情况如下：</p><p>​        corner：R为大数值整数</p><p>​        edge：R为大数值负数</p><p>​        flat：绝对值R是小数值</p><p><img src="/images/cv/harris/image-20191210105718641.png" alt="image-20191210105718641" style="zoom:50%;" /></p><p><br></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="梯度计算"><a href="#梯度计算" class="headerlink" title="梯度计算"></a>梯度计算</h3><p>​    计算各像素点位置的x、y方向梯度值及梯度方向，实现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height<span class="number">-1</span>):</span><br><span class="line">        ix[i,j] = (int(img[i,j]) - int(img[i+<span class="number">1</span>,j]) + int(img[i,j+<span class="number">1</span>]) - int(img[i+<span class="number">1</span>,j+<span class="number">1</span>])) / <span class="number">2</span></span><br><span class="line">        iy[i,j] = (int(img[i,j]) - int(img[i,j+<span class="number">1</span>]) + int(img[i+<span class="number">1</span>,j]) - int(img[i+<span class="number">1</span>,j+<span class="number">1</span>])) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> ix[i,j] != <span class="number">0</span>:</span><br><span class="line">            theta[i,j] = np.arctan(iy[i,j] / ix[i,j]) * <span class="number">180</span> / np.pi</span><br><span class="line">            <span class="keyword">if</span>(theta[i,j] &lt; <span class="number">0</span>):</span><br><span class="line">                theta[i,j] = theta[i,j] + <span class="number">180</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            theta[i,j] = <span class="number">90</span></span><br></pre></td></tr></table></figure><h3 id="M矩阵构建及计算"><a href="#M矩阵构建及计算" class="headerlink" title="M矩阵构建及计算"></a>M矩阵构建及计算</h3><p>​    根据原理中的公式，对前一步计算得到的x、y方向梯度值进行计算，得到 $I_X^2$ 、$I_Y^2$ 和 $I_{XY}$，并进行高斯滤波，减少噪声带来的影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ixx = cv2.GaussianBlur(ix*ix, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">1.4</span>) <span class="comment">#ix^2</span></span><br><span class="line">iyy = cv2.GaussianBlur(iy*iy, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">1.4</span>) <span class="comment">#iy^2</span></span><br><span class="line">ixy = cv2.GaussianBlur(ix*iy, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">1.4</span>) <span class="comment">#ix*iy</span></span><br></pre></td></tr></table></figure><p>​    计算M的行列式、迹、特征值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">detM = ixx * iyy - ixy * ixy <span class="comment">#行列式</span></span><br><span class="line">traceM = ixx + iyy <span class="comment">#迹</span></span><br><span class="line">lambda_max = (traceM + np.sqrt(np.abs(traceM**<span class="number">2</span><span class="number">-4</span>*detM)))/<span class="number">2</span> <span class="comment">#较大特征值</span></span><br><span class="line">lambda_min = (traceM - np.sqrt(np.abs(traceM**<span class="number">2</span><span class="number">-4</span>*detM)))/<span class="number">2</span> <span class="comment">#较小特征值</span></span><br></pre></td></tr></table></figure><h3 id="角点响应函数"><a href="#角点响应函数" class="headerlink" title="角点响应函数"></a>角点响应函数</h3><p>​    计算角点响应函数，并进行处理，过滤掉R值小于0（即平坦区域的点）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">R = detM - k * traceM**<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> R[i,j] &lt; <span class="number">0</span>:</span><br><span class="line">            R[i,j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>​    设置阈值，去除边缘点，只保留角点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">threshold = np.max(R) / <span class="number">100000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> R[i][j] &gt; threshold:</span><br><span class="line">            Rthreshold[i][j] = R[i][j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Rthreshold[i][j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="局部极大值"><a href="#局部极大值" class="headerlink" title="局部极大值"></a>局部极大值</h3><p>​    在之前选择的角点中进一步进行筛选，只保留局部极大值点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>, width<span class="number">-15</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">15</span>, height<span class="number">-15</span>):</span><br><span class="line">        <span class="keyword">if</span> R[i,j] == np.max(R[i<span class="number">-15</span>:i+<span class="number">15</span>, j<span class="number">-15</span>:j+<span class="number">15</span>]) <span class="keyword">and</span> R[i][j] &gt; threshold:</span><br><span class="line">            local_max[i][j] = <span class="number">255</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            local_max[i][j] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="叠加显示"><a href="#叠加显示" class="headerlink" title="叠加显示"></a>叠加显示</h3><p>​    在原图上叠加显示角点检测结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>,width<span class="number">-15</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">15</span>,height<span class="number">-15</span>):</span><br><span class="line">        <span class="keyword">if</span> local_max[i,j] == <span class="number">255</span>:</span><br><span class="line">            img_cover[i<span class="number">-2</span>:i+<span class="number">2</span>,j<span class="number">-2</span>:j+<span class="number">2</span>,<span class="number">0</span>] = <span class="number">255</span></span><br><span class="line">            img_cover[i<span class="number">-2</span>:i+<span class="number">2</span>,j<span class="number">-2</span>:j+<span class="number">2</span>,<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">            img_cover[i<span class="number">-2</span>:i+<span class="number">2</span>,j<span class="number">-2</span>:j+<span class="number">2</span>,<span class="number">2</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h2><h3 id="课件样例"><a href="#课件样例" class="headerlink" title="课件样例"></a>课件样例</h3><p>​    先对课件中的样例进行测试，结果如下：</p><h4 id="最大特征值图"><a href="#最大特征值图" class="headerlink" title="最大特征值图"></a>最大特征值图</h4><p><img src="/images/cv/harris/image-20191210111911555.png" alt="image-20191210111911555" style="zoom:50%;" /></p><h4 id="最小特征值图"><a href="#最小特征值图" class="headerlink" title="最小特征值图"></a>最小特征值图</h4><p><img src="/images/cv/harris/image-20191210111936812.png" alt="image-20191210111936812" style="zoom:50%;" /></p><h4 id="R图"><a href="#R图" class="headerlink" title="R图"></a>R图</h4><p>​    设置阈值前：</p><p><img src="/images/cv/harris/image-20191210112012691.png" alt="image-20191210112012691" style="zoom:50%;" /></p><p>​    设置阈值后：</p><p><img src="/images/cv/harris/image-20191210112154458.png" alt="image-20191210112154458" style="zoom:50%;" /></p><h4 id="局部极大值-1"><a href="#局部极大值-1" class="headerlink" title="局部极大值"></a>局部极大值</h4><p><img src="/images/cv/harris/image-20191210112229014.png" alt="image-20191210112229014" style="zoom:50%;" /></p><h4 id="原图叠加显示"><a href="#原图叠加显示" class="headerlink" title="原图叠加显示"></a>原图叠加显示</h4><p><img src="/images/cv/harris/image-20191210112256553.png" alt="image-20191210112256553" style="zoom:50%;" /></p><h3 id="其他测试图"><a href="#其他测试图" class="headerlink" title="其他测试图"></a>其他测试图</h3><p>​    自己拍摄图片进行检测，结果如下：</p><h4 id="原始图像："><a href="#原始图像：" class="headerlink" title="原始图像："></a>原始图像：</h4><p><img src="/images/cv/harris/image-20191210110847884.png" alt="image-20191210110847884" style="zoom: 50%;" /></p><h4 id="最大特征值图-1"><a href="#最大特征值图-1" class="headerlink" title="最大特征值图"></a>最大特征值图</h4><p><img src="/images/cv/harris/image-20191210111049232.png" alt="image-20191210111049232" style="zoom:50%;" /></p><h4 id="最小特征值图-1"><a href="#最小特征值图-1" class="headerlink" title="最小特征值图"></a>最小特征值图</h4><p><img src="/images/cv/harris/image-20191210111150195.png" alt="image-20191210111150195" style="zoom:50%;" /></p><h4 id="R图-1"><a href="#R图-1" class="headerlink" title="R图"></a>R图</h4><p>​    由于发现在图片中各处R值大多分布在两端，因此用彩色显示效果并不好，在这里只做灰度显示</p><p>​    设置阈值前：</p><p><img src="/images/cv/harris/image-20191210111324275.png" alt="image-20191210111324275" style="zoom:50%;" /></p><p>​    设置阈值后：</p><p><img src="/images/cv/harris/image-20191210111413499.png" alt="image-20191210111413499" style="zoom:50%;" /></p><h4 id="局部最大值"><a href="#局部最大值" class="headerlink" title="局部最大值"></a>局部最大值</h4><p><img src="/images/cv/harris/image-20191210111533678.png" alt="image-20191210111533678" style="zoom:50%;" /></p><h4 id="原图覆盖显示"><a href="#原图覆盖显示" class="headerlink" title="原图覆盖显示"></a>原图覆盖显示</h4><p><img src="/images/cv/harris/image-20191210111601612.png" alt="image-20191210111601612" style="zoom:50%;" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;a href=&quot;#已实现的功能简述及运行简要说明&quot; class=&quot;headerlink&quot; title=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;/a&gt;已实现的功能简述及运行简要说明&lt;/h2&gt;&lt;h3 id=&quot;功能简述&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Canny Edge Detection</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/canny_edge/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/canny_edge/</id>
    <published>2020-02-03T04:56:39.000Z</published>
    <updated>2020-02-03T05:02:55.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="已实现的功能简述及运行简要说明"><a href="#已实现的功能简述及运行简要说明" class="headerlink" title="已实现的功能简述及运行简要说明"></a>已实现的功能简述及运行简要说明</h2><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>​    对输入的彩色图像实现Canny Edge检测算法，自己写函数实现图像梯度计算、非极大抑制、双阈值等步骤，显示中间处理结果及最终检测结果，并将结果输出成图像文件。最终边缘结果图覆盖在原彩色图像后，提取彩色边缘图。</p><h3 id="运行简要说明"><a href="#运行简要说明" class="headerlink" title="运行简要说明"></a>运行简要说明</h3><p>​    原始图像在<code>img_path</code>变量中存储，将在<code>origin</code>窗口中进行显示；高斯平滑滤波的结果在<code>gaussian</code>窗口中显示，在相同目录下存储为<code>gaussian.jpg</code>；图像梯度幅值结果在<code>gradient</code>窗口中进行显示，在相同目录下存储为<code>gradient.jpg</code>；非极大值抑制结果在<code>nms</code>窗口中显示，在相同目录下存储为<code>nms.jpg</code>；双阈值处理结果在<code>dt</code>窗口中显示，存储为<code>dt.jpg</code>；最终提取得到的彩色边缘图在<code>edge</code>窗口中显示，并存储为<code>edge.jpg</code>。</p><p><br></p><h2 id="开发与运行环境"><a href="#开发与运行环境" class="headerlink" title="开发与运行环境"></a>开发与运行环境</h2><p>​    操作系统：Windows 10，64位<br>​    开发环境：Python 3.7.3<br>​    库环境：numpy 1.16.4, cv2 4.1.1</p><p><br></p><h2 id="算法基本思路、原理"><a href="#算法基本思路、原理" class="headerlink" title="算法基本思路、原理"></a>算法基本思路、原理</h2><h3 id="高斯滤波器平滑图像"><a href="#高斯滤波器平滑图像" class="headerlink" title="高斯滤波器平滑图像"></a>高斯滤波器平滑图像</h3><p>​    Canny Edge 检测算法的第一个步骤是使用高斯滤波器进行滤波平滑操作，此步骤的目的是对原始图片进行模糊处理，减少原始图片的噪声，使得边缘信息更为明确。高斯滤波器是对连续高斯函数的离散近似，对高斯曲面进行离散采样和归一化得出。通过将原始图像与高斯滤波器进行卷积可以对图像实现高斯滤波平滑。</p><p>​    二维高斯函数如下所示：<br>$$<br>H(x,y)=e^{-\frac{x^2+y^2}{2\sigma^2}}<br>$$<br>​    对高斯函数进行离散化操作之后，得到 $(2k+1)\times(2k+1)$ 滤波器的计算公式如下：<br>$$<br>H[i,j] = \frac{1}{2\pi\sigma^2}e^{-\frac{(i-k-1)^2+(j-k-1)^2}{2\sigma^2}}<br>$$</p><h3 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h3><p>​    边缘检测的一种方式是，用一阶偏导有限差分计算梯度幅值和方向检测边缘。在图像的边缘处会出现强度快速变化，因此可以通过计算图像的梯度，找出其中幅值来识别图像的边缘。由于图片信息是离散的，可以通过在单位像素点上图片强度的变化率对梯度进行离散近似。</p><p>​    对梯度进行离散近似之后的计算公式如下，分别计算x方向和y方向上的梯度：<br>$$<br>\frac{\partial f}{\partial x} =（\frac{f(x_{n+1},y_n)-f(x_n,y_n)}{\Delta x}+\frac{f(x_{n+1},y_{n+1})-f(x_n,y_{n+1})}{\Delta x}）/2<br>$$</p><p>$$<br>\frac{\partial f}{\partial y} =（\frac{f(x_n,y_{n+1})-f(x_n,y_n)}{\Delta y}+\frac{f(x_{n+1},y_{n+1})-f(x_{n+1},y_n)}{\Delta y}）/2<br>$$</p><p>​    计算梯度幅值的公式为：<br>$$<br>M=\sqrt{\frac{\partial f}{\partial x }^2 + \frac{\partial f}{\partial y} ^2}<br>$$<br>​    梯度方向，即函数最大变化率方向：<br>$$<br>\theta = arctan^{-1}(\frac{\partial f}{\partial y}/\frac{\partial f}{\partial x})<br>$$<br>​    另一种方式是使用sobel、prewitt等算子进行卷积计算。</p><h3 id="非极大抑制（NMS）"><a href="#非极大抑制（NMS）" class="headerlink" title="非极大抑制（NMS）"></a>非极大抑制（NMS）</h3><p>​    去除幅值局部变化中非极大的点，使边缘变细。</p><p>​    在查阅资料以及学习的过程中发现有两种方式可以对梯度幅值进行非极大抑制。</p><p>​    第一种方式是实现方向角的离散化，即将当前坐标点的梯度方向（$\theta$）根据所在的区域离散化为0, 45, 90, 135四个值。如图所示：</p><p><img src="/images/cv/canny/%7B6AD5E307-0299-74AE-648C-BB01B5DE3FF8%7D.jpg" width=400></p><p>​    比较梯度方向离散化后所在方向对应相邻的像素点与当前像素点的梯度幅值，若当前像素点较大则保留，否则丢弃。</p><p>​    第二种方式是在梯度方向上假设存在额外的像素点，如图所示：</p><p><img src="/images/cv/canny/%7BF79140B7-5760-262B-D0A1-F5FC33C59BF3%7D-1575126849212.jpg" width=400></p><p>​    假设a,b是额外生成的像素，可通过线性插值得到a,b的颜色信息。</p><p>​    例如对于b：<br>$$<br>tan \theta = \frac{Gy}{Gx}<br>$$</p><p>$$<br>d_1 = \frac{Gx}{Gy}, \;\; d_2 = 1-d_1<br>$$</p><p>$$<br>b=\frac{d_1}{d_1+d_2} \times g3 + \frac{d_2}{d_1+d_2} \times g4<br>$$</p><p>​    比较当前像素点c与新像素点a,b的梯度关系，若当前像素点比新的两个像素点都大则认为是极值，保留，否则丢弃。</p><h3 id="双阈值检测与边缘连接"><a href="#双阈值检测与边缘连接" class="headerlink" title="双阈值检测与边缘连接"></a>双阈值检测与边缘连接</h3><p>​    设定两个边缘阈值<code>TL</code>和<code>TH</code>，梯度大于TH的被认为是真边缘，保留；低于TL的被认为非边缘，丢弃；介于两者之间的则根据连通性进行判断，若其与真边缘联通，则认为是边缘，否则丢弃。</p><h3 id="提取彩色边缘"><a href="#提取彩色边缘" class="headerlink" title="提取彩色边缘"></a>提取彩色边缘</h3><p>​    读取生成的边缘图像信息，若为边缘，则显示原图像的像素点，否则不显示。最终得到边缘结果覆盖在原彩色图像上得到的彩色边缘图。</p><p><br></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="高斯平滑滤波"><a href="#高斯平滑滤波" class="headerlink" title="高斯平滑滤波"></a>高斯平滑滤波</h3><p>​    使用参数为1.4，大小为5*5的高斯滤波器进行滤波，先使用离散化近似的高斯公示计算高斯核每一位置的值，然后进行归一化处理，将处理完成的高斯核与原图像进行卷积，得到模糊处理后的图像。</p><p>​    实现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        g_ker[i,j] = np.exp(<span class="number">-1</span>*(np.square(i<span class="number">-3</span>)+np.square(j<span class="number">-3</span>))/(<span class="number">2</span>*np.square(sigma)))/(<span class="number">2</span>*np.pi*np.square(sigma))</span><br><span class="line">        g_sum = g_sum + g_ker[i,j]</span><br><span class="line">g_ker = g_ker / g_sum <span class="comment">#归一化</span></span><br><span class="line">g_img = cv2.filter2D(img, <span class="number">-1</span>, g_ker) <span class="comment">#卷积</span></span><br></pre></td></tr></table></figure><h3 id="边缘检测-1"><a href="#边缘检测-1" class="headerlink" title="边缘检测"></a>边缘检测</h3><p>​    在实验过程中，尝试使用了sobel算子卷积和梯度幅值计算两种方式进行边缘检测。</p><p>​    sobel算子卷积的实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sobel算子</span></span><br><span class="line">sobelker_x = np.array([[<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">-2</span>,<span class="number">0</span>,<span class="number">2</span>], [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">sobelker_y = np.array([[<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>], [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]])</span><br><span class="line"><span class="comment">#卷积</span></span><br><span class="line">grad_x = cv2.convertScaleAbs(cv2.filter2D(img, <span class="number">-1</span>, sobelker_x))</span><br><span class="line">grad_y = cv2.convertScaleAbs(cv2.filter2D(img, <span class="number">-1</span>, sobelker_y))</span><br><span class="line"><span class="comment">#合成</span></span><br><span class="line">grad_img = cv2.addWeighted(grad_x, <span class="number">0.5</span>, grad_y, <span class="number">0.5</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>​    一阶偏导有限差分计算梯度幅值及梯度方向的实现方法如下，为了方便后续处理，将角度均转为0-180范围内的角度值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height<span class="number">-1</span>):</span><br><span class="line">        gx[i,j] = (int(g_img[i,j]) - int(g_img[i+<span class="number">1</span>,j]) + int(g_img[i,j+<span class="number">1</span>]) - int(g_img[i+<span class="number">1</span>,j+<span class="number">1</span>])) / <span class="number">2</span></span><br><span class="line">        gy[i,j] = (int(g_img[i,j]) - int(g_img[i,j+<span class="number">1</span>]) + int(g_img[i+<span class="number">1</span>,j]) - int(g_img[i+<span class="number">1</span>,j+<span class="number">1</span>])) / <span class="number">2</span></span><br><span class="line">        m[i,j] = np.sqrt(np.square(gx[i,j])+np.square(gy[i,j]))</span><br><span class="line">        <span class="keyword">if</span> gx[i,j] != <span class="number">0</span>:</span><br><span class="line">            theta[i,j] = np.arctan(gy[i,j] / gx[i,j]) * <span class="number">180</span> / np.pi</span><br><span class="line">            <span class="keyword">if</span>(theta[i,j] &lt; <span class="number">0</span>):</span><br><span class="line">                theta[i,j] = theta[i,j] + <span class="number">180</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            theta[i,j] = <span class="number">90</span></span><br></pre></td></tr></table></figure><p>​    应用于后续操作之后，发现使用slbel算子的效果不如梯度幅值。并且由于下一步可能需要用到梯度方向，因此在最终的项目种保留梯度幅值计算检测边缘。</p><h3 id="非极大抑制（NMS）-1"><a href="#非极大抑制（NMS）-1" class="headerlink" title="非极大抑制（NMS）"></a>非极大抑制（NMS）</h3><p>​    尝试了在算法原理部分所述的两种实现方式，实现方法分别如下：</p><p>​    角度离散化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,width - <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height - <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> ( theta[i,j] &lt; <span class="number">22.5</span> <span class="keyword">or</span> (theta[i,j] &gt;= <span class="number">157.5</span> <span class="keyword">and</span> theta[i,j] &lt; <span class="number">180</span>) ):</span><br><span class="line">            theta[i,j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> ( theta[i,j] &gt;= <span class="number">22.5</span> <span class="keyword">and</span> theta[i,j] &lt; <span class="number">67.5</span> ):</span><br><span class="line">            theta[i,j] = <span class="number">45</span></span><br><span class="line">        <span class="keyword">elif</span> ( theta[i,j] &gt;= <span class="number">67.5</span> <span class="keyword">and</span> theta[i,j] &lt; <span class="number">112.5</span> ) :</span><br><span class="line">            theta[i,j] = <span class="number">90</span></span><br><span class="line">        <span class="keyword">elif</span> ( theta[i,j] &gt;= <span class="number">112.5</span> <span class="keyword">and</span> theta[i,j] &lt; <span class="number">157.5</span>):</span><br><span class="line">            theta[i,j] = <span class="number">135</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, width<span class="number">-2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height<span class="number">-2</span>):</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] == <span class="number">0</span> <span class="keyword">and</span> m[i,j] == np.max([m[i,j],m[i+<span class="number">1</span>,j],m[i<span class="number">-1</span>,j]]):</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] == <span class="number">45</span> <span class="keyword">and</span> m[i,j] == np.max([m[i,j],m[i<span class="number">-1</span>,j<span class="number">-1</span>],m[i+<span class="number">1</span>,j+<span class="number">1</span>]]):</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] == <span class="number">90</span> <span class="keyword">and</span>  m[i,j] == np.max([m[i,j],m[i,j+<span class="number">1</span>],m[i,j<span class="number">-1</span>]]):</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] == <span class="number">45</span> <span class="keyword">and</span> m[i,j] == np.max([m[i,j],m[i<span class="number">-1</span>,j+<span class="number">1</span>],m[i+<span class="number">1</span>,j<span class="number">-1</span>]]):</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br></pre></td></tr></table></figure><p>​    插值生成额外像素点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, width<span class="number">-2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height<span class="number">-2</span>):</span><br><span class="line">        <span class="keyword">if</span> theta[i,j] &lt;= <span class="number">45</span>:</span><br><span class="line">            <span class="keyword">if</span> gx[i,j] != <span class="number">0</span>:</span><br><span class="line">                w = np.abs(gy[i,j]) / np.abs(gx[i,j])</span><br><span class="line">            g1 = (<span class="number">1</span>-w) * m[i<span class="number">-1</span>, j<span class="number">-1</span>] + w * m[i, j<span class="number">-1</span>]</span><br><span class="line">            g2 = (<span class="number">1</span>-w) * m[i+<span class="number">1</span>, j+<span class="number">1</span>] + w * m[i, j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> theta[i,j] &gt; <span class="number">45</span> <span class="keyword">and</span> theta[i,j] &lt;= <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">if</span> gy[i,j] != <span class="number">0</span>:</span><br><span class="line">                w = np.abs(gx[i,j]) / np.abs(gy[i,j])</span><br><span class="line">            g1 = (<span class="number">1</span>-w) * m[i<span class="number">-1</span>, j<span class="number">-1</span>] + w * m[i<span class="number">-1</span>, j]</span><br><span class="line">            g2 = (<span class="number">1</span>-w) * m[i+<span class="number">1</span>, j+<span class="number">1</span>] + w * m[i+<span class="number">1</span>, j]</span><br><span class="line">        <span class="keyword">elif</span> theta[i,j] &gt; <span class="number">90</span> <span class="keyword">and</span> theta[i,j] &lt;= <span class="number">135</span>:</span><br><span class="line">            <span class="keyword">if</span> gy[i,j] != <span class="number">0</span>:</span><br><span class="line">                w = np.abs(gx[i,j]) / np.abs(gy[i,j])</span><br><span class="line">            g1 = (<span class="number">1</span>-w) * m[i<span class="number">-1</span>, j+<span class="number">1</span>] + w * m[i<span class="number">-1</span>, j]</span><br><span class="line">            g2 = (<span class="number">1</span>-w) * m[i+<span class="number">1</span>, j<span class="number">-1</span>] + w * m[i+<span class="number">1</span>, j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gx[i,j] != <span class="number">0</span>:</span><br><span class="line">                w = np.abs(gy[i,j]) / np.abs(gx[i,j])</span><br><span class="line">            g1 = (<span class="number">1</span>-w) * m[i+<span class="number">1</span>, j<span class="number">-1</span>] + w * m[i, j<span class="number">-1</span>]</span><br><span class="line">            g2 = (<span class="number">1</span>-w) * m[i<span class="number">-1</span>, j+<span class="number">1</span>] + w * m[i, j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> m[i,j] &gt; g1 <span class="keyword">and</span> m[i,j] &gt; g2:</span><br><span class="line">            nms_img[i,j] = m[i,j]</span><br></pre></td></tr></table></figure><p>​    试验发现两种方法效果差不多，在最终项目中保留了插值的结果。</p><h3 id="双阈值检测与边缘连接-1"><a href="#双阈值检测与边缘连接-1" class="headerlink" title="双阈值检测与边缘连接"></a>双阈值检测与边缘连接</h3><p>​    进行尝试之后，设定的两个阈值分别是<code>0.1*np.max(nms_img)</code>和<code>0.19*np.max(nms_img)</code>，阈值调试的过程及效果比较将在实验结果部分展示。</p><p>​    双阈值检测部分的实现方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, width<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, height<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> nms_img[i,j] &lt; TL:</span><br><span class="line">            dt_img[i,j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> nms_img[i,j] &gt; TH:</span><br><span class="line">            dt_img[i,j] = <span class="number">255</span></span><br><span class="line">        <span class="keyword">elif</span> nms_img[i+<span class="number">1</span>,j] &gt; TH <span class="keyword">or</span> nms_img[i<span class="number">-1</span>,j] &gt; TH <span class="keyword">or</span> nms_img[i,j+<span class="number">1</span>] &gt; TH <span class="keyword">or</span> nms_img[i,j<span class="number">-1</span>] &gt; TH <span class="keyword">or</span> nms_img[i<span class="number">-1</span>,j<span class="number">-1</span>] &gt; TH <span class="keyword">or</span> nms_img[i<span class="number">-1</span>,j+<span class="number">1</span>] &gt; TH <span class="keyword">or</span> nms_img[i+<span class="number">1</span>,j<span class="number">-1</span>] &gt; TH <span class="keyword">or</span> nms_img[i+<span class="number">1</span>,j+<span class="number">1</span>] &gt; TH:</span><br><span class="line">            dt_img[i,j] = <span class="number">255</span></span><br></pre></td></tr></table></figure><h3 id="提取彩色边缘-1"><a href="#提取彩色边缘-1" class="headerlink" title="提取彩色边缘"></a>提取彩色边缘</h3><p>​    实现方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img_edge = np.zeros(img.shape, dtype=<span class="string">"uint8"</span>)</span><br><span class="line">img_edge = cv2.cvtColor(img_edge, cv2.COLOR_GRAY2BGR)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height):</span><br><span class="line">        <span class="keyword">if</span> dt_img[i,j] == <span class="number">255</span>:</span><br><span class="line">            img_edge[i,j] = img_color[i,j]</span><br></pre></td></tr></table></figure><p><br></p><h2 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h2><h3 id="高斯平滑滤波-1"><a href="#高斯平滑滤波-1" class="headerlink" title="高斯平滑滤波"></a>高斯平滑滤波</h3><p>​    原始图像如下：</p><p><img src="/images/cv/canny/image-20191201091845144.png" width=400></p><p>​    调整为灰度显示之后进行高斯平滑滤波，结果如下：</p><p><img src="/images/cv/canny/image-20191201091947236.png" width=400></p><h3 id="一阶偏导有限差分计算梯度幅值"><a href="#一阶偏导有限差分计算梯度幅值" class="headerlink" title="一阶偏导有限差分计算梯度幅值"></a>一阶偏导有限差分计算梯度幅值</h3><p><img src="/images/cv/canny/image-20191201092324939.png" width=400></p><h3 id="非极大抑制（NMS）-2"><a href="#非极大抑制（NMS）-2" class="headerlink" title="非极大抑制（NMS）"></a>非极大抑制（NMS）</h3><p><img src="/images/cv/canny/image-20191201094802389.png" width=400></p><h3 id="双阈值化及边缘连接"><a href="#双阈值化及边缘连接" class="headerlink" title="双阈值化及边缘连接"></a>双阈值化及边缘连接</h3><p>​    <code>TL = 0.1 * np.max(nms_img), TH = 0.3 * np.max(nms_img)</code></p><p><img src="/images/cv/canny/image-20191201092826991.png" width=400></p><p><code>TL = 0.1 * np.max(nms_img), TH = 0.15 * np.max(nms_img)</code></p><p><img src="/images/cv/canny/image-20191201093058033.png" width=400></p><p>​    <code>TL = 0.1 * np.max(nms_img), TH = 0.2 * np.max(nms_img)</code></p><p><img src="/images/cv/canny/image-20191201092505491.png" width=400></p><p><code>TL = 0.1 * np.max(nms_img), TH = 0.19 * np.max(nms_img)</code></p><p><img src="/images/cv/canny/image-20191201093623541.png" width=400></p><h3 id="彩色边缘显示"><a href="#彩色边缘显示" class="headerlink" title="彩色边缘显示"></a>彩色边缘显示</h3><p><img src="/images/cv/canny/image-20191201093756380.png" width=400></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;a href=&quot;#已实现的功能简述及运行简要说明&quot; class=&quot;headerlink&quot; title=&quot;已实现的功能简述及运行简要说明&quot;&gt;&lt;/a&gt;已实现的功能简述及运行简要说明&lt;/h2&gt;&lt;h3 id=&quot;功能简述&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【CV】Review</title>
    <link href="https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/cv_review/"/>
    <id>https://iris-cyy.github.io//Notes/Computer-Vision/2020-02-03/cv_review/</id>
    <published>2020-02-03T04:00:30.000Z</published>
    <updated>2020-02-03T04:31:45.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="格式塔法则"><a href="#格式塔法则" class="headerlink" title="格式塔法则"></a>格式塔法则</h3><h4 id="Law-of-Proximity-接近性原则"><a href="#Law-of-Proximity-接近性原则" class="headerlink" title="Law of Proximity 接近性原则"></a>Law of Proximity 接近性原则</h4><p>​    物体之间的相对距离会影响我们感知它是否以及如何组织在一起。互相靠近（相对于其它物体）的物体看起来属于一组，而那些距离较远的则自动划为组外。</p><p><img src="/images/cv/review/image-20200112181346765.png" alt="image-20200112181346765" style="zoom:50%;" /></p><h4 id="Law-of-Similarity-相似性原则"><a href="#Law-of-Similarity-相似性原则" class="headerlink" title="Law of Similarity 相似性原则"></a>Law of Similarity 相似性原则</h4><p>​    如果其它因素相同，那么相似的物体看起来归属于一组（强调内容）</p><p><img src="/images/cv/review/image-20200112181522668.png" alt="image-20200112181522668" style="zoom:50%;" /></p><h4 id="Law-of-Common-Fate-共方向原则"><a href="#Law-of-Common-Fate-共方向原则" class="headerlink" title="Law of Common Fate 共方向原则"></a>Law of Common Fate 共方向原则</h4><p>​    一起运动的物体被感知为属于一组或者是彼此相关的。如果物理沿着相似的光滑路径或具有相似的排列模式，人眼会将它们识别成一类物体。</p><p><img src="/images/cv/review/image-20200112182325271.png" alt="image-20200112182325271" style="zoom:50%;" /></p><h4 id="Law-of-Symmetry-对称性原则"><a href="#Law-of-Symmetry-对称性原则" class="headerlink" title="Law of Symmetry 对称性原则"></a>Law of Symmetry 对称性原则</h4><p>​    人的意识倾向于将物体识别为沿某点或某轴对称的形状。</p><p><img src="/images/cv/review/image-20200112182303487.png" alt="image-20200112182303487" style="zoom:50%;" /></p><h4 id="Law-of-Continuity-连续性原则"><a href="#Law-of-Continuity-连续性原则" class="headerlink" title="Law of Continuity 连续性原则"></a>Law of Continuity 连续性原则</h4><p>​    视觉倾向于感知连续的形式而不是离散的碎片</p><p><img src="/images/cv/review/image-20200112181954399.png" alt="image-20200112181954399" style="zoom:50%;" /></p><h4 id="Law-of-Closure-封闭性原则"><a href="#Law-of-Closure-封闭性原则" class="headerlink" title="Law of Closure 封闭性原则"></a>Law of Closure 封闭性原则</h4><p>​    视觉系统自动尝试将敞开的图形关闭起来，从而将其感知为完整的物体而不是分散的碎片。简单理解，当图形是一个残缺图形，但主体有一种使其闭合的倾向，即主体能自行填补缺口而把其知觉为一个整体。</p><p><img src="/images/cv/review/image-20200112182020040.png" alt="image-20200112182020040" style="zoom: 33%;" /></p><h3 id="Marr视觉表示框架的三个阶段"><a href="#Marr视觉表示框架的三个阶段" class="headerlink" title="Marr视觉表示框架的三个阶段"></a>Marr视觉表示框架的三个阶段</h3><h4 id="Primal-Sketch"><a href="#Primal-Sketch" class="headerlink" title="Primal Sketch"></a>Primal Sketch</h4><p>​    将输入的原始图像进行处理，抽取图像中诸如角点、边缘、纹理、线条、边界等<strong>基本特征</strong>，这些特征的集合称为<strong>基元图</strong></p><h4 id="2-5D-Sketch"><a href="#2-5D-Sketch" class="headerlink" title="2.5D Sketch"></a>2.5D Sketch</h4><p>​    指在<strong>以观测者为中心</strong>的坐标系中由输入图像和基元图恢复场景可见部分的深度、法线方向、轮廓等，这些信息包含了深度信息，但不是真正的物体三维表示，因此，称为<strong>二维半图</strong></p><h4 id="3D-Model"><a href="#3D-Model" class="headerlink" title="3D Model"></a>3D Model</h4><p>​    在<strong>以物体为中心</strong>的坐标系中，由输入图像、基元图、二维半图来恢复、表示和识别三维物体</p><hr><h2 id="二值图像"><a href="#二值图像" class="headerlink" title="二值图像"></a>二值图像</h2><h3 id="几何特性"><a href="#几何特性" class="headerlink" title="几何特性"></a>几何特性</h3><h4 id="尺寸和位置"><a href="#尺寸和位置" class="headerlink" title="尺寸和位置"></a>尺寸和位置</h4><ul><li><p>面积（零阶矩）</p><p><img src="/images/cv/review/image-20200112184113076.png" alt="image-20200112184113076" style="zoom:60%;" /></p></li><li><p>区域中心（一阶矩）</p><p><img src="/images/cv/review/image-20200112184200497.png" alt="image-20200112184200497" style="zoom: 60%;" /></p></li></ul><h4 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h4><ul><li><p>方向</p><p>某些形状（如圆）是没有方向的。假定物体是长形的，<strong>长轴方向</strong>为物体的方向</p></li><li><p>求方向 –&gt; 最小化问题 </p><p><img src="/images/cv/review/image-20200112201403535.png" alt="image-20200112201403535" style="zoom:50%;" /></p><p>最小二乘法</p><p><img src="/images/cv/review/image-20200112201456847.png" alt="image-20200112201456847" style="zoom: 50%;" /></p></li></ul><h4 id="伸长率"><a href="#伸长率" class="headerlink" title="伸长率"></a>伸长率</h4><p><img src="/images/cv/review/image-20200112201528557.png" alt="image-20200112201528557" style="zoom:50%;" /></p><h4 id="密集度"><a href="#密集度" class="headerlink" title="密集度"></a>密集度</h4><p><img src="/images/cv/review/image-20200112201544559.png" alt="image-20200112201544559" style="zoom:50%;" /></p><h4 id="形态比"><a href="#形态比" class="headerlink" title="形态比"></a>形态比</h4><p>​    区域的最小外接矩形的长与宽之比</p><h4 id="欧拉数（亏格数，genus）"><a href="#欧拉数（亏格数，genus）" class="headerlink" title="欧拉数（亏格数，genus）"></a>欧拉数（亏格数，genus）</h4><p>​    连通分量数减去洞数：$E=C-H$，平稳，旋转和比例不变</p><p><img src="/images/cv/review/image-20200112201740348.png" alt="image-20200112201740348" style="zoom: 33%;" /></p><h3 id="投影计算"><a href="#投影计算" class="headerlink" title="投影计算"></a>投影计算</h3><p>​    给定一条直线，用垂直该直线的一簇等间距直线将一幅二值图像分割成若干条，每一条内象素值为 1 的象素的数量</p><h4 id="水平-垂直"><a href="#水平-垂直" class="headerlink" title="水平/垂直"></a>水平/垂直</h4><p><img src="/images/cv/review/image-20200112201918068.png" alt="image-20200112201918068" style="zoom:50%;" /></p><h4 id="对角线"><a href="#对角线" class="headerlink" title="对角线"></a>对角线</h4><p>​    图像为$n \times m$，共对应$m+n-1$条对角线，像素点$(i，j), \; i \in [0,n-1],j\in [0,m-1]$对应的位置是$d=i-j+m $（右上对应1，左下对应$m+n-1$）</p><p><img src="/images/cv/review/image-20200112203501711.png" alt="image-20200112203501711" style="zoom:50%;" /></p><h3 id="连通区域（四连通）"><a href="#连通区域（四连通）" class="headerlink" title="连通区域（四连通）"></a>连通区域（四连通）</h3><h4 id="连通分量编辑算法"><a href="#连通分量编辑算法" class="headerlink" title="连通分量编辑算法"></a>连通分量编辑算法</h4><ul><li>递归<ol><li>扫描图像，找到没有标记的一个前景点（即像素值为 1 ），分配标记 L</li><li>递归分配标记 L 给该点的邻点</li><li>如果不存在没标记的点，则停止</li><li>返回第1步</li></ol></li><li>序贯（重要）<ol><li>从左至右、从上到下扫描图像</li><li>如果象素点值为 1 ，则（分 4 种情况）<ul><li>如果上面点和左面点有且仅有一个标记，则复制这一标记</li><li>如果两点有相同标记，复制这一标记</li><li>如果两点有不同标记，则复制上点的标记且将两个标记输入<strong>等价表</strong>中作为等价标记</li><li>否则（两点都无标记）给这一个象素点分配一新的标记并将这一标记输入等价表</li></ul></li><li>如果需要考虑更多点，则返回 2</li><li>在等价表的每一等价集中找到最低的标记</li><li>扫描图像，用等价表中的最低标记取代每一标记</li></ol></li></ul><h4 id="区域边界跟踪算法"><a href="#区域边界跟踪算法" class="headerlink" title="区域边界跟踪算法"></a>区域边界跟踪算法</h4><p>​    c：当前点（在边界上）</p><p>​    b：当前点的领域点（不在边界上）</p><p>​    S：当前连通区域</p><ol><li><p>扫描图像，求区域S的起始点（左-&gt;右，上-&gt;下）：$s(k)=(x(k),y(k)),\;k=0$</p></li><li><p>用c表示当前边界上被跟踪的像素点，置 $c=s(k)$，记c的左邻点为 $b$, $b \notin S$</p></li><li><p>按逆时针方向记从b开始的c的八个邻点分别为 $n_1, n_2,…,n_8, \; k=k+1$</p></li><li><p>从b开始，沿逆时针方向找到一个 $n_i \in S$</p></li><li><p>置 $c=s(k)=n_i, \; b=n_{i-1}$ –&gt; 保证了b不属于S</p></li><li><p>重复3,4,5步直至$s(k)=s(0)$</p><p><img src="/images/cv/review/image-20200112205428248.png" alt="image-20200112205428248" style="zoom:50%;" /></p></li></ol><hr><h2 id="边缘"><a href="#边缘" class="headerlink" title="边缘"></a>边缘</h2><h3 id="模板卷积"><a href="#模板卷积" class="headerlink" title="模板卷积"></a>模板卷积</h3><p><img src="/images/cv/review/image-20200112205648976.png" alt="image-20200112205648976" style="zoom: 67%;" /></p><h3 id="Origin-of-Edges"><a href="#Origin-of-Edges" class="headerlink" title="Origin of Edges"></a>Origin of Edges</h3><ul><li>图像深度不连续处</li><li>图像（梯度）朝向不连续处</li><li>图像光照不连续处</li><li>纹理变化处</li></ul><h3 id="基于一阶的边缘检测"><a href="#基于一阶的边缘检测" class="headerlink" title="基于一阶的边缘检测"></a>基于一阶的边缘检测</h3><h4 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h4><ul><li><p>幅值：<img src="/images/cv/review/image-20200112210106020.png" alt="image-20200112210106020" style="zoom: 80%;" /></p></li><li><p>方向：$a(x,y)=arctan(G_y/G_x)​$，梯度方向为函数最大变化率方向</p></li><li><p>在图像中用差分近似偏导数<br>$$<br>G_x = f[x+1,y]-f[x,y] \\<br>G_y=f[x,y]-f[x,y+1]<br>$$</p></li><li><p>Roberts交叉算子</p><p><img src="/images/cv/review/image-20200112210441780.png" alt="image-20200112210441780" style="zoom:67%;" /></p></li><li><p>Sobel算子</p><p><img src="/images/cv/review/image-20200112210459080.png" alt="image-20200112210459080" style="zoom: 50%;" /></p></li><li><p>Prewitt算子（运算较快）</p><p><img src="/images/cv/review/image-20200112210525125.png" alt="image-20200112210525125" style="zoom:50%;" /></p></li><li><p>均值差分（一定邻域内灰度平均值之差）</p><p><img src="/images/cv/review/image-20200112210917803.png" alt="image-20200112210917803" style="zoom:50%;" /><br>$$<br>G_x = (a_2+ca_3+a_4)-(a_o+ca_7+a_6) \\<br>G_y = (a_0+ca_1+a_2)-(a_6+ca_5+a_4)<br>$$<br>C=1: Prewitt算子</p><p>C=2: Sobel算子</p><p>C=3: Sethi算子</p></li></ul><h3 id="基于二阶的边缘检测"><a href="#基于二阶的边缘检测" class="headerlink" title="基于二阶的边缘检测"></a>基于二阶的边缘检测</h3><h4 id="Laplacian算子"><a href="#Laplacian算子" class="headerlink" title="Laplacian算子"></a>Laplacian算子</h4><p><img src="/images/cv/review/image-20200112211414471.png" alt="image-20200112211414471"></p><h4 id="LoG算子（Laplacian-of-Gaussian）"><a href="#LoG算子（Laplacian-of-Gaussian）" class="headerlink" title="LoG算子（Laplacian of Gaussian）"></a>LoG算子（Laplacian of Gaussian）</h4><p>​    高斯滤波+拉普拉斯边缘检测</p><ul><li><p>基本特征：</p><ul><li>平滑滤波器是高斯滤波器</li><li>采用拉普拉斯算子计算二阶导数</li><li>边缘检测判据是二阶导数零交叉点并对应一阶导数的较大峰值</li><li>使用线性内插方法在子像素分辨率水平上估计边缘的位置</li></ul></li><li><p>LoG算子 = <img src="/images/cv/review/image-20200112211542788.png" alt="image-20200112211542788" style="zoom:80%;" /></p><p>对高斯模板求拉式算子的结果</p><p> <img src="/images/cv/review/image-20200112211454571.png" alt="image-20200112211454571"  /></p></li><li><p>两种等效计算方法</p><ol><li>图像与高斯函数卷积，再求卷积的拉普拉斯微分</li><li>求高斯函数的拉普拉斯微分，再与图像卷积</li></ol></li></ul><h3 id="Canny边缘检测（重要）"><a href="#Canny边缘检测（重要）" class="headerlink" title="Canny边缘检测（重要）"></a>Canny边缘检测（重要）</h3><h4 id="高斯滤波器平滑图像"><a href="#高斯滤波器平滑图像" class="headerlink" title="高斯滤波器平滑图像"></a>高斯滤波器平滑图像</h4><p>​    Canny Edge 检测算法的第一个步骤是使用高斯滤波器进行滤波平滑操作，此步骤的目的是对原始图片进行模糊处理，减少原始图片的噪声，使得边缘信息更为明确。高斯滤波器是对连续高斯函数的离散近似，对高斯曲面进行离散采样和归一化得出。通过将原始图像与高斯滤波器进行卷积可以对图像实现高斯滤波平滑。</p><p>​    二维高斯函数如下所示：<br>$$<br>H(x,y)=e^{-\frac{x^2+y^2}{2\sigma^2}}<br>$$<br>​    对高斯函数进行离散化操作之后，得到 $(2k+1)\times(2k+1)$ 滤波器的计算公式如下：<br>$$<br>H[i,j] = \frac{1}{2\pi\sigma^2}e^{-\frac{(i-k-1)^2+(j-k-1)^2}{2\sigma^2}}<br>$$</p><h4 id="一阶偏导有限差分计算梯度"><a href="#一阶偏导有限差分计算梯度" class="headerlink" title="一阶偏导有限差分计算梯度"></a>一阶偏导有限差分计算梯度</h4><p>​    边缘检测的一种方式是，用一阶偏导有限差分计算梯度幅值和方向检测边缘。在图像的边缘处会出现强度快速变化，因此可以通过计算图像的梯度，找出其中幅值来识别图像的边缘。由于图片信息是离散的，可以通过在单位像素点上图片强度的变化率对梯度进行离散近似。</p><p>​    对梯度进行离散近似之后的计算公式如下，分别计算x方向和y方向上的梯度：<br>$$<br>\frac{\partial f}{\partial x} =（\frac{f(x_{n+1},y_n)-f(x_n,y_n)}{\Delta x}+\frac{f(x_{n+1},y_{n+1})-f(x_n,y_{n+1})}{\Delta x}）/2<br>$$</p><p>$$<br>\frac{\partial f}{\partial y} =（\frac{f(x_n,y_{n+1})-f(x_n,y_n)}{\Delta y}+\frac{f(x_{n+1},y_{n+1})-f(x_{n+1},y_n)}{\Delta y}）/2<br>$$</p><p>​    计算梯度幅值的公式为：<br>$$<br>M=\sqrt{\frac{\partial f}{\partial x }^2 + \frac{\partial f}{\partial y} ^2}<br>$$<br>​    梯度方向，即函数最大变化率方模拟， 向：<br>$$<br>\theta = arctan^{-1}(\frac{\partial f}{\partial y}/\frac{\partial f}{\partial x})<br>$$<br>​    另一种方式是使用sobel、prewitt等算子进行卷积计算。</p><h4 id="简化的非极大抑制（NMS）"><a href="#简化的非极大抑制（NMS）" class="headerlink" title="简化的非极大抑制（NMS）"></a>简化的非极大抑制（NMS）</h4><p>​    去除幅值局部变化中非极大的点，使边缘变细。</p><p>​    实现方向角的离散化，即将当前坐标点的梯度方向（$\theta$）根据所在的区域离散化为0, 45, 90, 135四个值。如图所示：</p><p><img src="/images/cv/review/%7B6AD5E307-0299-74AE-648C-BB01B5DE3FF8%7D.jpg" width=400></p><p>​    在离散后的梯度方向上找到幅值最大的点保留，其余点置零。</p><h4 id="双阈值检测与边缘连接"><a href="#双阈值检测与边缘连接" class="headerlink" title="双阈值检测与边缘连接"></a>双阈值检测与边缘连接</h4><p>​    设定两个边缘阈值<code>TL</code>和<code>TH</code>，梯度大于TH的被认为是真边缘，保留；低于TL的被认为非边缘，丢弃；介于两者之间的则根据连通性（八连通）进行判断，若其与真边缘联通，则认为是边缘，否则丢弃。</p><hr><h2 id="局部特征"><a href="#局部特征" class="headerlink" title="局部特征"></a>局部特征</h2><h3 id="Harris-corner-detector"><a href="#Harris-corner-detector" class="headerlink" title="Harris corner detector"></a>Harris corner detector</h3><h4 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h4><p>​    角点检测的基本思想是，使用一个固定窗口在图像上进行任意方向上的滑动，比较滑动前与滑动后两种情况，窗口中的像素灰度变化程度，如果存在任意方向上的滑动，都有着较大灰度变化，那么我们可以认为该窗口中存在角点。</p><p>​    当窗口发生[u,v]移动时，那么滑动前与滑动后对应的窗口中的像素点灰度变化描述如下：</p><p><img src="/images/cv/review/image-20191210103858663.png" alt="image-20191210103858663" style="zoom: 40%;" /></p><p>​    其中$[u,v]$是窗口的偏移量，$(x,y)$是窗口内所对应的像素坐标位置，窗口有多大，就有多少个位置。$w(x,y)$是窗口函数，有以下两种表示方法，最简单情形就是窗口内的所有像素所对应的w权重系数均为1。但有时候，我们会将$w(x,y)$函数设定为以窗口中心为原点的二元正态分布或高斯分布。如图所示：</p><p><img src="/images/cv/review/image-20191210104139196.png" alt="image-20191210104139196" style="zoom: 50%;" /></p><p>​    根据上述表达式，当窗口处在平坦区域上滑动，可以想象的到，灰度不会发生变化，那么E(u,v) = 0；如果窗口处在比纹理比较丰富的区域上滑动，那么灰度变化会很大。算法最终思想就是计算灰度发生较大变化时所对应的位置，当然这个较大是指针任意方向上的滑动，并非单指某个方向。</p><p>​    我们对$E(w,v)$表达式进行泰勒展开，结果如下：</p><p><img src="/images/cv/review/image-20191210104336762.png" alt="image-20191210104336762" style="zoom:50%;" /></p><p>​    可以将$E(u,v)$表达式更新为：</p><p><img src="/images/cv/review/image-20191210104534120.png" alt="image-20191210104534120" style="zoom:40%;" /></p><p>​    其中</p><p><img src="/images/cv/review/image-20191210104546366.png" alt="image-20191210104546366" style="zoom:40%;" /></p><p>​    求解M的两个特征值$\lambda_1$和$\lambda_2$，可以根据两个特征值直接的关系得出对应像素点的位置信息（边缘or角点or平坦区域）</p><p>​        corner：在水平、竖直两个方向上变化均较大的点，即Ix、Iy都较大； </p><p>​        edge ：仅在水平、或者仅在竖直方向有较大的点，即Ix和Iy只有其一较大 ；</p><p>​        flat  ： 在水平、竖直方向的变化量均较小的点，即Ix、Iy都较小；</p><p><img src="/images/cv/review/image-20191210104846204.png" alt="image-20191210104846204" style="zoom:50%;" /></p><p>​    可以定义角点响应函数R来表示：</p><p><img src="/images/cv/review/image-20191210105159377.png" alt="image-20191210105159377" style="zoom: 40%;" /></p><p>​    其中k是介于0.04-0.06间的常数。</p><p>​    针对三种不同区域的点，R的取值情况如下：</p><p>​        corner：R为大数值整数</p><p>​        edge：R为大数值负数</p><p>​        flat：绝对值R是小数值</p><p><img src="/images/cv/review/image-20191210105718641.png" alt="image-20191210105718641" style="zoom:50%;" /></p><h4 id="旋转不变性"><a href="#旋转不变性" class="headerlink" title="旋转不变性"></a>旋转不变性</h4><p><img src="/images/cv/review/image-20200112230413307.png" alt="image-20200112230413307" style="zoom: 60%;" /></p><h4 id="灰度不变性"><a href="#灰度不变性" class="headerlink" title="灰度不变性"></a>灰度不变性</h4><p><img src="/images/cv/review/image-20200112230448513.png" alt="image-20200112230448513" style="zoom:60%;" /></p><h4 id="尺度不变性"><a href="#尺度不变性" class="headerlink" title="尺度不变性"></a>尺度不变性</h4><p>​    不满足尺度不变性</p><p><img src="/images/cv/review/image-20200112230530393.png" alt="image-20200112230530393" style="zoom:60%;" /></p><h3 id="SIFT"><a href="#SIFT" class="headerlink" title="SIFT"></a>SIFT</h3><ul><li>尺度空间极值检测：搜索所有尺度上的图像位置。通过高斯差分函数来识别潜在的对于尺度和旋转不变的兴趣点。</li><li>关键点定位：在每个候选的位置上，通过一个拟合精细的模型来确定位置和尺度。关键点的选择依据于它们的稳定程度。</li><li>方向确定：基于图像局部的梯度方向，分配给每个关键点位置一个或多个方向。所有后面的对图像数据的操作都相对于关键点的方向、尺度和位置进行变换，从而提供对于这些变换的不变性。</li><li>关键点描述：在每个关键点周围的邻域内，在选定的尺度上测量图像局部的梯度。这些梯度被变换成一种表示，这种表示允许比较大的局部形状的变形和光照变化</li></ul><h4 id="Basic-idea"><a href="#Basic-idea" class="headerlink" title="Basic idea"></a>Basic idea</h4><ol><li>用16*16的窗口放在特征点附近 + 将16*16分成16个4*4的窗口</li><li>计算窗口中每个像素的边的方向（梯度角减去90°）</li><li>丢掉方向能量小的边（使用阈值）</li><li>用直方图描述结果 + 将每个小窗口中的所有的方向离散成8个方向，一共16*8=128个</li></ol><h4 id="Full-version"><a href="#Full-version" class="headerlink" title="Full version"></a>Full version</h4><ul><li>Divide the 16 x 16 window into a 4 x 4 grid of cells ( 2 x 2 case shown below)</li><li>Compute an orientation histogram for each cell</li><li>16 cells * 8 orientations = 128 dimensional descriptor</li></ul><p><img src="/images/cv/review/image-20200112235402616.png" alt="image-20200112235402616" style="zoom: 60%;" /></p><h4 id="使用梯度的原因、好处"><a href="#使用梯度的原因、好处" class="headerlink" title="使用梯度的原因、好处"></a>使用梯度的原因、好处</h4><p>​    梯度信息可以表示边缘信息，并且在光照变化时有抵抗能力</p><h4 id="尺度不变-amp-旋转不变"><a href="#尺度不变-amp-旋转不变" class="headerlink" title="尺度不变&amp;旋转不变"></a>尺度不变&amp;旋转不变</h4><p>​    <a href="https://www.jianshu.com/p/c0379c931e74" target="_blank" rel="noopener">https://www.jianshu.com/p/c0379c931e74</a></p><p>​    <a href="https://bbs.csdn.net/topics/390457105" target="_blank" rel="noopener">https://bbs.csdn.net/topics/390457105</a></p><hr><h2 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h2><h3 id="Hough变换（重要）"><a href="#Hough变换（重要）" class="headerlink" title="Hough变换（重要）"></a>Hough变换（重要）</h3><p>​    Hough 变换是基于投票（Voting）原理的参数估计方法，是一种重要的形状检测技术。</p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>​    图像中每一点对参数组合进行表决，赢得多数票的参数组合为胜者（结果）</p><h4 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h4><ol><li>适当地<strong>量化</strong>参数空间（合适的精度即可）</li><li>假定参数空间的每一个单元都是一个累加器，把累加器<strong>初始化</strong>为零．</li><li>对图像空间的每一点，在其所满足的参数方程对应的累加器上<strong>加 1</strong></li><li>累加器阵列的<strong>最大值</strong>对应模型的参数．</li></ol><h4 id="直线检测"><a href="#直线检测" class="headerlink" title="直线检测"></a>直线检测</h4><p>​    <a href="https://www.jianshu.com/p/ddbeb8e7d8be" target="_blank" rel="noopener">https://www.jianshu.com/p/ddbeb8e7d8be</a></p><p><img src="/images/cv/review/image-20200113095654655.png" alt="image-20200113095654655" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113094438284.png" alt="image-20200113094438284" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113094450588.png" alt="image-20200113094450588" style="zoom:45%;" /></p><p><img src="/images/cv/review/image-20200113095824612.png" alt="image-20200113095824612" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113094529096.png" alt="image-20200113094529096" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113094548139.png" alt="image-20200113094548139" style="zoom:50%;" /></p><h4 id="圆弧检测"><a href="#圆弧检测" class="headerlink" title="圆弧检测"></a>圆弧检测</h4><p><img src="/images/cv/review/image-20200113095410123.png" alt="image-20200113095410123" style="zoom: 40%;" /></p><ol><li>量化关于a，b的参数空间到合适精度</li><li>初始化所有累加器为0</li><li>计算图像空间中边缘点的梯度幅度 $G_{mag}(x,y)$ 和角度 $\theta (x,y)$</li><li>若边缘点参数坐标满足 $b=a\, tan \theta -x\, tan \theta + y$ 则该参数坐标对应的累加器加1</li><li>拥有最大值的累加器所在的坐标即为图像空间中的圆心之所在</li><li>得到圆心坐标之后，我们可以很容易反求r</li></ol><hr><h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><h3 id="主元分析（PCA）"><a href="#主元分析（PCA）" class="headerlink" title="主元分析（PCA）"></a>主元分析（PCA）</h3><h4 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h4><p>​    PCA (Principal Component Analysis)，即<strong>主成分分析方法</strong>，是一种使用最广泛的数据降维算法。PCA的主要思想是将n维特征映射到k维上，这k维是全新的正交特征也被称为主成分，是在原有n维特征的基础上重新构造出来的k维特征。PCA的工作就是从原始的空间中顺序地找一组相互正交的坐标轴，新的坐标轴的选择与数据本身是密切相关的。其中，第一个新坐标轴选择是原始数据中方差最大的方向，第二个新坐标轴选取是与第一个坐标轴正交的平面中使得方差最大的，第三个轴是与第1,2个轴正交的平面中方差最大的。依次类推，可以得到n个这样的坐标轴。通过这种方式获得的新的坐标轴，我们发现，大部分方差都包含在前面k个坐标轴中，后面的坐标轴所含的方差几乎为0。于是，我们可以忽略余下的坐标轴，只保留前面k个含有绝大部分方差的坐标轴。事实上，这相当于只保留包含绝大部分方差的维度特征，而忽略包含方差几乎为0的特征维度，实现对数据特征的降维处理。</p><h4 id="适用的数据"><a href="#适用的数据" class="headerlink" title="适用的数据"></a>适用的数据</h4><p>​    适用于PCA的数据也是统计意义上有强相关性的数据，维度过高但高维信息量低，相关度高的数据（多元高斯分布）</p><h4 id="优化目标函数推导"><a href="#优化目标函数推导" class="headerlink" title="优化目标函数推导"></a>优化目标函数推导</h4><p><img src="/images/cv/review/image-20200113113812857.png" alt="image-20200113113812857" style="zoom: 50%;" /></p><h3 id="Eigenface-人脸识别算法"><a href="#Eigenface-人脸识别算法" class="headerlink" title="Eigenface 人脸识别算法"></a>Eigenface 人脸识别算法</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>获得人脸图像的训练集，通常为整个人脸数据库</li><li>对所有人脸图像作归一化处理</li><li>通过 PCA 计算获得一组特征向量（特征脸）。通常一百个特征向量就足够</li><li>将每幅人脸图像都投影到由该组特征脸张成的子空间中，得到在该子空间坐标</li><li>对输入的一幅待测图像，归一化后，将其映射到特征脸子空间中。然后用某种距离度量来描述两幅人脸图像的相似性，如欧氏距离</li></ol><h4 id="重构原理"><a href="#重构原理" class="headerlink" title="重构原理"></a>重构原理</h4><p>​    识别：将两张图像都投影到人脸空间，比较投影向量的欧氏距离。</p><p>​    重构：将图像投影到人脸空间，通过左乘特征人脸空间矩阵恢复</p><p>​    人脸投影到特征人脸空间中，保留了主要特征的信息，所以可以恢复人脸本来的样子</p><p><img src="/images/cv/review/image-20200113115421201.png" alt="image-20200113115421201" style="zoom:50%;" /></p><hr><h2 id="图像频域与图像分解"><a href="#图像频域与图像分解" class="headerlink" title="图像频域与图像分解"></a>图像频域与图像分解</h2><h3 id="图像的傅里叶变换"><a href="#图像的傅里叶变换" class="headerlink" title="图像的傅里叶变换"></a>图像的傅里叶变换</h3><h4 id="基本含义"><a href="#基本含义" class="headerlink" title="基本含义"></a>基本含义</h4><p>​    任何连续周期信号都可以表示成（或者无限逼近）一系列正弦信号的叠加，将时间域上的信号转变为频率域上的信号。在一维领域，信号是一维正弦波的叠加，那么想象一下，在二维领域，实际上是无数二维平面波的叠加。</p><p>​    Fourier transform stores the magnitude and phase at each frequency</p><ul><li>Magnitude encodes how much signal there is at a particular requency</li><li>Phase encodes spatial information (indirectly)</li><li>For mathematical convenience, this is often notated in terms of real and complex numbers</li></ul><h4 id="基图像"><a href="#基图像" class="headerlink" title="基图像"></a>基图像</h4><p>​    可以将任一4*4像素块表示为16个基图像的加权和，权值即为对应位置的DCT系数</p><p><img src="/images/cv/review/image-20200113120255032.png" alt="image-20200113120255032" style="zoom: 80%;" /></p><p><img src="/images/cv/review/image-20200113120715527.png" alt="image-20200113120715527" style="zoom: 60%;" /></p><h4 id="高频-低频"><a href="#高频-低频" class="headerlink" title="高频/低频"></a>高频/低频</h4><p>​    图像的频率是表征图像中灰度变化剧烈程度的指标，是灰度在平面空间上的梯度</p><p>​    图像的高频部分是像素值变化剧烈的地方，如图像的边缘和轮廓。低频部分是变化不剧烈的地方，对应大的色块。我们从近处看图像看到的是高频信息，而远处看到的是低频信息</p><h3 id="图像分解"><a href="#图像分解" class="headerlink" title="图像分解"></a>图像分解</h3><h4 id="从图像分解角度理解傅里叶变换"><a href="#从图像分解角度理解傅里叶变换" class="headerlink" title="从图像分解角度理解傅里叶变换"></a>从图像分解角度理解傅里叶变换</h4><p>​    傅立叶变换将图像从空间域转换到频率域，将图像的灰度分布函数变换为图像的频率分布函数</p><h4 id="拉普拉斯图像金字塔的每一层是带通滤波"><a href="#拉普拉斯图像金字塔的每一层是带通滤波" class="headerlink" title="拉普拉斯图像金字塔的每一层是带通滤波"></a>拉普拉斯图像金字塔的每一层是带通滤波</h4><p>​    拉普拉斯金字塔是将图像下采样后再上采样得到的差值图像，通过源图像减去先缩小再放大的一系列图像构成的。下采样的时候丢失了高频信息，而相邻金字塔相减的时候丢失了低频信息，因此只有中间频段的信息保留了下来</p><hr><h2 id="图像拼接"><a href="#图像拼接" class="headerlink" title="图像拼接"></a>图像拼接</h2><h3 id="RANSAC"><a href="#RANSAC" class="headerlink" title="RANSAC"></a>RANSAC</h3><p>​    RANSAC是“RANdom SAmple Consensus（随机抽样一致）”的缩写。它可以从一组包含“局外点”的观测数据集中，通过迭代方式估计数学模型的参数，解决3D重建中的位置确定问题，图像匹配、全景拼接</p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>​    采用迭代的方式从一组包含outliers的数据中估算数学模型的参数。核心思想是随机性和假设性，<strong>随机性</strong>是根据正确数据出现的概率去随机选取抽样数据，<strong>假设性</strong>是假设选取出的抽样数据都是正确数据。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>​    是大范围模型匹配问题的一个普遍意义上的方法，且运用简单，计算快</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>​    只能计算outliers不多的情况（投票机制可以解决outliers高的情况）</p><h4 id="基本步骤-1"><a href="#基本步骤-1" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>随机选择一些点作为样本</li><li>计算选出的样本应该使用的变换矩阵</li><li>把刚才没有选中的点代入建立的模型，判断有多少点符合，误差是否小于阈值</li><li>比较匹配数量是否为当前最优解，如果是，则更新当前最优集，并更新迭代次数</li><li><p>重复多次，如果迭代次数大于K（k由最优的inliers的点集计算得到），则退出，否则迭代次数+1</p><p><img src="/images/cv/review/image-20200113121953066.png" alt="image-20200113121953066" style="zoom:55%;" /></p></li></ol><h4 id="成功概率"><a href="#成功概率" class="headerlink" title="成功概率"></a>成功概率</h4><p> <img src="/images/cv/review/image-20200113123402472.png" alt="image-20200113123402472" style="zoom: 52%;" /></p><h3 id="图像拼接-1"><a href="#图像拼接-1" class="headerlink" title="图像拼接"></a>图像拼接</h3><h4 id="基本步骤-2"><a href="#基本步骤-2" class="headerlink" title="基本步骤"></a>基本步骤</h4><ul><li>Detect key points SIFT特征提取</li><li>Build the SIFT descriptors 建立SIFT描述子</li><li>Match SIFT descriptors 特征点匹配（knn）</li><li>Fitting the transformation（RANSAC计算Homography矩阵，进行变换）</li><li>Image Blending 图像融合</li></ul><hr><h2 id="物体识别"><a href="#物体识别" class="headerlink" title="物体识别"></a>物体识别</h2><h3 id="Visual-Recognition"><a href="#Visual-Recognition" class="headerlink" title="Visual Recognition"></a>Visual Recognition</h3><h4 id="基本任务"><a href="#基本任务" class="headerlink" title="基本任务"></a>基本任务</h4><ul><li>图片和视频的分类</li><li>检测和定位物体/图片分割</li><li>估计语义和几何属性</li><li>对人类活动和事件进行分类</li></ul><h4 id="挑战因素"><a href="#挑战因素" class="headerlink" title="挑战因素"></a>挑战因素</h4><ul><li>视角变换</li><li>光线变化</li><li>尺度变化</li><li>物体形变</li><li>物体遮挡</li><li>背景凌乱</li><li>内部类别多样</li></ul><h3 id="基于词袋（BoW）的物体分布"><a href="#基于词袋（BoW）的物体分布" class="headerlink" title="基于词袋（BoW）的物体分布"></a>基于词袋（BoW）的物体分布</h3><h4 id="BoW（bag-of-words）"><a href="#BoW（bag-of-words）" class="headerlink" title="BoW（bag-of-words）"></a>BoW（bag-of-words）</h4><p>​    图像中的单词被定义为一个图像块的特征向量，图像的Bow模型即图像中所有图像块的特征向量得到的直方图</p><h4 id="基本步骤-3"><a href="#基本步骤-3" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>特征提取和表示（grid），每个特征为一个质点</li><li>通过对质点聚类建立字典（k 聚类），得到k个聚类中心，聚类中心就是词袋中的单词，所有聚类中心就是特征直方图的基</li><li>将图片用直方图的基表示出来，这样就可以得到关于图片的特征直方图。该直方图与单词的顺序没有关系，而是每个单词在图片中出现的频率</li><li>将新的图片获取质点，然后映射到直方图上进行聚类</li></ol><hr><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><h3 id="深度网络学习"><a href="#深度网络学习" class="headerlink" title="深度网络学习"></a>深度网络学习</h3><h4 id="end-to-end-学习"><a href="#end-to-end-学习" class="headerlink" title="end-to-end 学习"></a>end-to-end 学习</h4><p>​    raw inputs to predictions    </p><p>​    从输入端（输入数据）到输出端会得到一个预测结果，与真实结果相比较会得到一个误差，这个误差会在模型中的每一层传递（反向传播），每一层的表示都会根据这个误差来做调整，直到模型收敛或达到预期的效果才结束</p><p>​    端到端指的是直接输入原始数据，让模型自己去学习特征，最后输出结果。中间不再需要人工的参与，就像一个工厂，送进去玉米，最后出来爆米花，中间的流程我们一律不参与。</p><h4 id="数学本质"><a href="#数学本质" class="headerlink" title="数学本质"></a>数学本质</h4><p>​    通过不断尝试引入各种参量，最终得到允许误差范围内的解，并通过引入参量系数，最终得到最优解。不断地更新参数 W 和 b 的值从而使损失函数最小化。（给定结构，求解连接关系的权重）</p><h4 id="常用基本方法"><a href="#常用基本方法" class="headerlink" title="常用基本方法"></a>常用基本方法</h4><p>​    梯度下降法</p><h3 id="CNN-卷积神经网络"><a href="#CNN-卷积神经网络" class="headerlink" title="CNN 卷积神经网络"></a>CNN 卷积神经网络</h3><h4 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h4><p>​    卷积层的作用是提取图像的各种特征，是卷积核在上一级输入层上通过逐一滑动窗口计算而得，卷积核中的每一个参数都相当于传统神经网络中的权值参数，与对应的局部像素相连接，将卷积核的各个参数与对应的局部像素值相乘之和，（通常还要再加上一个偏置参数），得到卷积层上的结果。</p><h4 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h4><p>​    池化层的作用是对原始特征信号进行抽象，从而大幅度减少训练参数，另外还可以减轻模型过拟合的程度。池化/采样的方式通常有以下两种：</p><ul><li>Max-Pooling: 选择Pooling窗口中的最大值作为采样值；</li><li>Mean-Pooling: 将Pooling窗口中的所有值相加取平均，以平均值作为采样值；</li></ul><h4 id="相关计算"><a href="#相关计算" class="headerlink" title="相关计算"></a>相关计算</h4><p><img src="/images/cv/review/image-20200113133116285.png" alt="image-20200113133116285" style="zoom: 50%;" /></p><p><img src="/images/cv/review/image-20200113134709704.png" alt="image-20200113134709704" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113134308475.png" alt="image-20200113134308475" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113135434147.png" alt="image-20200113135434147" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113140708120.png" alt="image-20200113140708120" style="zoom: 50%;" /></p><h3 id="BP算法"><a href="#BP算法" class="headerlink" title="BP算法"></a>BP算法</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>​    误差反向传播是将输出误差以某种形式通过隐层向输入层逐层反传，并将误差分摊给各层的所有单元，从而获得各层的误差信号，此误差信号即作为修正单元权值的依据。这种信号正向传播与误差反向传播的各层权值调整过程周而复始的进行，权值不断调整的过程，也就是网络学习训练的过程，此过程一直进行到网络输出的误差减少到可接受的程度，或进行到预先设定的学习次数为止<br>​    使用简单的方法有效的减少了计算量<br>​    仅用于计算<strong>梯度</strong></p><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><p><img src="/images/cv/review/image-20200113144125836.png" alt="image-20200113144125836" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113144152695.png" alt="image-20200113144152695" style="zoom: 67%;" /></p><p><img src="/images/cv/review/image-20200113144351924.png" alt="image-20200113144351924" style="zoom: 50%;" /></p><h4 id="梯度算法-vs-BP算法"><a href="#梯度算法-vs-BP算法" class="headerlink" title="梯度算法 vs BP算法"></a>梯度算法 vs BP算法</h4><p>​    通过梯度下降算法，求取每个参数的偏导数，更新参数实现反向传播以此来让我们的模型更能准确的预测问题。</p><p>​    BP算法由信号的正向传播和误差的反向传播两个过程组成。</p><p>​    正向传播时，输入样本从输入层进入网络，经隐层逐层传递至输出层，如果输出层的实际输出与期望输出(导师信号)不同，则转至误差反向传播；如果输出层的实际输出与期望输出(导师信号)相同，结束学习算法。</p><p>​    反向传播时，将输出误差(期望输出与实际输出之差)按原通路反传计算，通过隐层反向，直至输入层，在反传过程中将误差分摊给各层的各个单元，获得各层各单元的误差信号，并将其作为修正各单元权值的根据。这一计算过程使用梯度下降法完成，在不停地调整各层神经元的权值和阈值后，使误差信号减小到最低限度。</p><hr><h2 id="光流"><a href="#光流" class="headerlink" title="光流"></a>光流</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><p>​    给定两张图像H和I，评估从H到I的像素运动，解决的是像素对应的问题</p><h4 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h4><ul><li>brightness constancy 亮度恒定</li><li>spatial coherence 空间相干</li><li>small motion 细微运动</li></ul><h4 id="约束公式"><a href="#约束公式" class="headerlink" title="约束公式"></a>约束公式</h4><p><img src="/images/cv/review/image-20200113144747201.png" alt="image-20200113144747201" style="zoom:60%;" /></p><h4 id="可靠位置"><a href="#可靠位置" class="headerlink" title="可靠位置"></a>可靠位置</h4><p>​    纹理复杂区域，梯度比较大且方向不同，求出来的特征值比较大，光流比较可靠</p><hr><h2 id="相机模型"><a href="#相机模型" class="headerlink" title="相机模型"></a>相机模型</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><h4 id="景深"><a href="#景深" class="headerlink" title="景深"></a>景深</h4><p>​    相机镜头能够取得清晰图像的成像所测定的被摄物体前后范围距离</p><h4 id="光圈"><a href="#光圈" class="headerlink" title="光圈"></a>光圈</h4><p>​    镜头中，用来控制光线透过镜头，进入机身内感光面光量的装置</p><h4 id="焦距"><a href="#焦距" class="headerlink" title="焦距"></a>焦距</h4><p>​    从镜片中心到底片等成像平面的距离</p><h4 id="视场"><a href="#视场" class="headerlink" title="视场"></a>视场</h4><p>​    摄像头能够观察到的最大范围</p><h4 id="光圈vs景深"><a href="#光圈vs景深" class="headerlink" title="光圈vs景深"></a>光圈vs景深</h4><p>​    较小的光圈对应较大的景深</p><p>​    但是较小的光圈限制了光线的进入，因此需要增加曝光</p><p><img src="/images/cv/review/image-20200113145059481.png" alt="image-20200113145059481" style="zoom:67%;" /></p><h4 id="焦距vs视场"><a href="#焦距vs视场" class="headerlink" title="焦距vs视场"></a>焦距vs视场</h4><p>​    焦距越短，视场角越大，放大倍率越小，拍摄范围越大，拍摄画面中的人越小</p><p><img src="/images/cv/review/image-20200113145150381.png" alt="image-20200113145150381" style="zoom:50%;" /></p><h3 id="理想的针孔相机模型"><a href="#理想的针孔相机模型" class="headerlink" title="理想的针孔相机模型"></a>理想的针孔相机模型</h3><h4 id="基本投影公式"><a href="#基本投影公式" class="headerlink" title="基本投影公式"></a>基本投影公式</h4><p><img src="/images/cv/review/image-20200113145534415.png" alt="image-20200113145534415" style="zoom: 50%;" /></p><p><img src="/images/cv/review/image-20200113145752100.png" alt="image-20200113145752100" style="zoom: 50%;" /></p><h4 id="齐次坐标下的透视投影"><a href="#齐次坐标下的透视投影" class="headerlink" title="齐次坐标下的透视投影"></a>齐次坐标下的透视投影</h4><p><img src="/images/cv/review/image-20200113150049514.png" alt="image-20200113150049514" style="zoom:50%;" /></p><p><img src="/images/cv/review/image-20200113152207666.png" alt="image-20200113152207666" style="zoom:67%;" /></p><h4 id="齐次坐标表示的好处"><a href="#齐次坐标表示的好处" class="headerlink" title="齐次坐标表示的好处"></a>齐次坐标表示的好处</h4><ul><li>齐次坐标可以表示无穷远处的点</li><li>把各种变换都统一了起来，即把缩放，旋转，平移等变换都统一起来，都表示成一连串的矩阵相乘的形式。保证了形式上的线性一致性</li><li>合并矩阵运算中的乘法和加法</li></ul><h4 id="内参"><a href="#内参" class="headerlink" title="内参"></a>内参</h4><p> <img src="/images/cv/review/image-20200113151253172.png" alt="image-20200113151253172" style="zoom: 55%;" /></p><h4 id="内参矩阵"><a href="#内参矩阵" class="headerlink" title="内参矩阵"></a>内参矩阵</h4><p> <img src="/images/cv/review/image-20200113152411976.png" alt="image-20200113152411976" style="zoom:70%;" /></p><h3 id="畸变"><a href="#畸变" class="headerlink" title="畸变"></a>畸变</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li><p>径向畸变</p><p>不完美的镜头，镜片的不理想，镜头的几何形状，光圈位置<br>↑ 概括成透镜几何性质和孔径位置<br>远离透镜中心的地方比靠近中心的地方更加弯曲</p></li><li><p>切向畸变</p><p>由于CMOS等感光元件摆放倾斜，没有平行于图像平面<br>越靠近中间，畸变越小</p></li></ul><h4 id="径向畸变类型"><a href="#径向畸变类型" class="headerlink" title="径向畸变类型"></a>径向畸变类型</h4><ul><li>枕形畸变：中间向外凸起</li><li>桶形畸变：中间向内凹陷</li></ul><p><img src="/images/cv/review/image-20200113152834059.png" alt="image-20200113152834059" style="zoom:80%;" /></p><h3 id="外参"><a href="#外参" class="headerlink" title="外参"></a>外参</h3><p> <img src="/images/cv/review/image-20200113153500792.png" alt="image-20200113153500792" style="zoom: 55%;" /></p><p>​    前三个指的是旋转参数，后三个指的是平移参数</p><p><img src="/images/cv/review/image-20200113153730043.png" alt="image-20200113153730043"></p><p><img src="/images/cv/review/image-20200113153656265.png" alt="image-20200113153656265" style="zoom:75%;" /></p><h3 id="内参、外参、畸变参数在成像阶段中的角色"><a href="#内参、外参、畸变参数在成像阶段中的角色" class="headerlink" title="内参、外参、畸变参数在成像阶段中的角色"></a>内参、外参、畸变参数在成像阶段中的角色</h3><ol><li>第一步是从世界坐标系转为相机坐标系，这一步是从三维点到三维点的转换，包括R，t等参数（相机外参）</li><li>第二步是从相机坐标系转为成像平面坐标系（像素坐标系），这一步是三维点到二维点的转换，包括K等参数（相机内参）</li><li>最后再用到畸变参数</li></ol><p><img src="/images/cv/review/image-20200113153949770.png" alt="image-20200113153949770" style="zoom: 50%;" /></p><p><img src="/images/cv/review/image-20200113154011459.png" alt="image-20200113154011459" style="zoom: 67%;" /></p><hr><h2 id="相机定标"><a href="#相机定标" class="headerlink" title="相机定标"></a>相机定标</h2><h3 id="一般的相机定标"><a href="#一般的相机定标" class="headerlink" title="一般的相机定标"></a>一般的相机定标</h3><h4 id="要求解的参数"><a href="#要求解的参数" class="headerlink" title="要求解的参数"></a>要求解的参数</h4><p>​    畸变参数，内参，外参</p><h4 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h4><p>​    已知：给定标定物体的N个角点，K个视角（棋盘格子两个点可以得出四个等式）</p><p>​    求解：Distortion coeffients , intrinsic para, extrinsic para。N个点K个视角可以列出2NK个等式，会带来6K+4个参数。每次会变的是外参，而内参和畸变参数是不变的，所以只需要2NK&gt;6K+4即可</p><h3 id="基于Homography的相机定标"><a href="#基于Homography的相机定标" class="headerlink" title="基于Homography的相机定标"></a>基于Homography的相机定标</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>​    三维标定物可由单幅图像进行标定，标定精度较高，但高精密三维标定物的加工和维护较困<br>难。平面型标定物比三维标定物制作简单，精度易保证，可以使用于任意的摄像机模型，标<br>定精度高</p><h4 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h4><ul><li>获取标定物体网格的角点在坐标系的位置</li><li>找到图片的角点</li><li>根据图像空间坐标系到世界坐标系列出等式</li><li>求解相机参数</li></ul><h4 id="自由度"><a href="#自由度" class="headerlink" title="自由度"></a>自由度</h4><p>​    9个参数，8个自由度，求解至少需要4个点，8个等式</p><hr><h2 id="立体视觉"><a href="#立体视觉" class="headerlink" title="立体视觉"></a>立体视觉</h2><h3 id="三角测量基本原理"><a href="#三角测量基本原理" class="headerlink" title="三角测量基本原理"></a>三角测量基本原理</h3><p><img src="/images/cv/review/image-20200113154944320.png" alt="image-20200113154944320" style="zoom:80%;" /></p><h4 id="Triangulation公式"><a href="#Triangulation公式" class="headerlink" title="Triangulation公式"></a>Triangulation公式</h4><p><img src="/images/cv/review/image-20200113160018238.png" alt="image-20200113160018238" style="zoom:55%;" /></p><h4 id="基本步骤-4"><a href="#基本步骤-4" class="headerlink" title="基本步骤"></a>基本步骤</h4><ul><li><p>Undistortion</p><p>remove distortions -&gt; undistorted images 恢复失真，消除畸变</p></li><li><p>Rectification<br>adjust cameras -&gt; the two images row-aligned 矫正相机，使图像在同一个平面上</p></li><li><p>Correspondence<br>find the same features in the two images -&gt; disparity 在两张图中找到对应的相同特征</p></li><li><p>Reprojection<br>triangulation -&gt; a depth map 三角测量</p></li></ul><hr><h2 id="结构光三维成像"><a href="#结构光三维成像" class="headerlink" title="结构光三维成像"></a>结构光三维成像</h2><h3 id="结构光三维成像系统的构成"><a href="#结构光三维成像系统的构成" class="headerlink" title="结构光三维成像系统的构成"></a>结构光三维成像系统的构成</h3><p>​    一个结构光三维成像系统主要由三个部分组成：结构光投影仪（一台或多台），CCD相机（一台或多<br>台），以及深度信息重建系统</p><h3 id="利用结构光获取三维数据的基本原理"><a href="#利用结构光获取三维数据的基本原理" class="headerlink" title="利用结构光获取三维数据的基本原理"></a>利用结构光获取三维数据的基本原理</h3><ul><li>观测对象坐标(x,y,z) ?</li><li>成像坐标(x’,y’)</li><li>投影角度θ.</li><li>投影仪与镜头的距离b</li><li>焦距f</li></ul><p><img src="/images/cv/review/image-20200113160439763.png" alt="image-20200113160439763" style="zoom:67%;" /></p><p><img src="/images/cv/review/image-20200113160704395.png" alt="image-20200113160704395" style="zoom:67%;" /></p><h3 id="ICP问题"><a href="#ICP问题" class="headerlink" title="ICP问题"></a>ICP问题</h3><h4 id="解决的问题-1"><a href="#解决的问题-1" class="headerlink" title="解决的问题"></a>解决的问题</h4><p>​    ICP（Iterative Closest Point）是根据前后两帧图像中匹配好的特征点在相机坐标系下的三维坐标，求解相机帧间运动的一种算法。</p><p>​    迭代最近点方法（用于多个摄像机的配准问题，即把多个扫描结果拼接在一起形成对扫描对象的完整描述）计算两组数据（两帧图像）间的旋转平移量，使之形成最佳匹配</p><p>​    registeration点云配准问题</p><h4 id="基本步骤-5"><a href="#基本步骤-5" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>​    给定两个三维点集X与Y，将Y配准到X：</p><ol><li>计算Y中的每一个点在X中的对应最近点</li><li>求使上述对应点对的平均距离最小的刚体变换，获得刚体变换参数（平移参数和旋转参数）</li><li>对Y应用上一步求得的刚体变换（平移和旋转），更新Y</li><li>如果X与Y的对应点对平均距离大于阈值，回到1，否则停止计算</li></ol><hr><h2 id="图像分割"><a href="#图像分割" class="headerlink" title="图像分割"></a>图像分割</h2><h3 id="基于k-means聚类的图像分割"><a href="#基于k-means聚类的图像分割" class="headerlink" title="基于k-means聚类的图像分割"></a>基于k-means聚类的图像分割</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><ul><li>对相似的点进行分类，并用一个符号表示</li><li>迭代的将点归类到最近的聚类中心上</li></ul><h4 id="基本步骤-6"><a href="#基本步骤-6" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>随机选择K个聚类中心</li><li>对图像上所有点，根据其与聚类中心的距离，将其划分到距离最近对应的中心的聚类簇</li><li>重新计算每一簇的均值来更新中心（簇内均值）</li><li>重复2，3步，直到no points are re-assigned</li></ol><h3 id="基于Mean-Shift的图像分割"><a href="#基于Mean-Shift的图像分割" class="headerlink" title="基于Mean Shift的图像分割"></a>基于Mean Shift的图像分割</h3><h4 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h4><p>​    假设不同簇类的数据集符合不同的概率密度分布,找到任一样本点密度增大的最快方向(最快方向的含义就是Mean Shift),样本密度高的区域对应于该分布的最大值,这些样本点最终会在局部密度最大值收敛,且收敛到相同局部最大值的点被认为是同一簇类的成员。</p><h4 id="基本步骤-7"><a href="#基本步骤-7" class="headerlink" title="基本步骤"></a>基本步骤</h4><ol><li>Choose kernel and bandwidth</li><li>For each point<ul><li>center a window on that point</li><li>compute the mean of the data in the search window</li><li>center the search window at the new mean location</li><li>Repeat (b, c) until convergence</li></ul></li><li>Assign points that lead to nearby modes to the same cluster</li></ol><h4 id="与k-means相比的好处"><a href="#与k-means相比的好处" class="headerlink" title="与k-means相比的好处"></a>与k-means相比的好处</h4><ul><li>Good general-purpose segmentation</li><li>Flexible in number and shape of regions</li><li>Robust to outliers</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;h3 id=&quot;格式塔法则&quot;&gt;&lt;a href=&quot;#格式塔法则&quot; class=&quot;headerlink&quot; title=&quot;格式塔法则&quot;&gt;&lt;/a&gt;格式塔法
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Computer Vision" scheme="https://iris-cyy.github.io/categories/Notes/Computer-Vision/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="CV" scheme="https://iris-cyy.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>【Java】String、StringBuffer &amp; StringBuilder</title>
    <link href="https://iris-cyy.github.io//Notes/Java/2020-02-03/java_stringbuffer/"/>
    <id>https://iris-cyy.github.io//Notes/Java/2020-02-03/java_stringbuffer/</id>
    <published>2020-02-03T03:49:20.000Z</published>
    <updated>2020-02-03T03:54:56.589Z</updated>
    
    <content type="html"><![CDATA[<p>在JAVA中，对字符串的操作可以通过<code>String</code> 、<code>StringBuffer</code>、<code>StringBuilder</code>来进行。三者虽然功能相似，但在实际开发中，不同场景下使用三者的性能会存在一定差异，三者各有其较适宜使用的场景。本文将通过分析三者的源代码，分析主要数据组织及功能实现上的区别、设计方式的影响，并分析三者分别适合使用的场景。</p><h2 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h2><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="主要结构"><a href="#主要结构" class="headerlink" title="主要结构"></a>主要结构</h4><p>​    String类的结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] value;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span> coder;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> COMPACT_STRINGS;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">       COMPACT_STRINGS = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields =</span><br><span class="line">       <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br><span class="line">       </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    String类被final修饰，说明它不可被继承。</p><p>​    String的值由<code>byte[] value</code>来存储，即String的本质是一个byte的数组。被final修饰，说明String是个不可变类，即存储的值不可改变。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>​    String类提供的构造函数有很多种，在下面进行一些简单的分析：</p><ol><li>无参构造，创建空字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = <span class="string">""</span>.coder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>提供一个String作为参数，进行深拷贝</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = original.coder;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>提供一个字符数组作为参数，构造新的String</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(value, <span class="number">0</span>, value.length, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>通过一个现有数组中截取一段子数组，构造新的String</li></ol><p>​    数组可能是字符或者各种形式的编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[], <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(value, offset, count, rangeCheck(value, offset, count));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">int</span>[] codePoints, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    checkBoundsOffCount(offset, count, codePoints.length);</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">        <span class="keyword">this</span>.coder = <span class="string">""</span>.coder;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (COMPACT_STRINGS) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] val = StringLatin1.toBytes(codePoints, offset, count);</span><br><span class="line">        <span class="keyword">if</span> (val != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.coder = LATIN1;</span><br><span class="line">            <span class="keyword">this</span>.value = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.coder = UTF16;</span><br><span class="line">    <span class="keyword">this</span>.value = StringUTF16.toBytes(codePoints, offset, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charsetName == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charsetName"</span>);</span><br><span class="line">    checkBoundsOffCount(offset, length, bytes.length);</span><br><span class="line">    StringCoding.Result ret =</span><br><span class="line">        StringCoding.decode(charsetName, bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = ret.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = ret.coder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length, Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"charset"</span>);</span><br><span class="line">    checkBoundsOffCount(offset, length, bytes.length);</span><br><span class="line">    StringCoding.Result ret =</span><br><span class="line">        StringCoding.decode(charset, bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = ret.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = ret.coder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charsetName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], Charset charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length, charset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span> bytes[], <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    checkBoundsOffCount(offset, length, bytes.length);</span><br><span class="line">    StringCoding.Result ret = StringCoding.decode(bytes, offset, length);</span><br><span class="line">    <span class="keyword">this</span>.value = ret.value;</span><br><span class="line">    <span class="keyword">this</span>.coder = ret.coder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>通过byte数组或者StringBuffer、StringBuilder来构造新的String</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuffer buffer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(buffer.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(builder, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>长度</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length &gt;&gt; coder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>判断是否为空</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>取某位置的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">        <span class="keyword">return</span> StringLatin1.charAt(value, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUTF16.charAt(value, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>判断两个字符串是否相等</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String aString = (String)anObject;</span><br><span class="line">        <span class="keyword">if</span> (coder() == aString.coder()) &#123;</span><br><span class="line">            <span class="keyword">return</span> isLatin1() ? StringLatin1.equals(value, aString.value)</span><br><span class="line">                              : StringUTF16.equals(value, aString.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>比较两个字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String anotherString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> v1[] = value;</span><br><span class="line">    <span class="keyword">byte</span> v2[] = anotherString.value;</span><br><span class="line">    <span class="keyword">if</span> (coder() == anotherString.coder()) &#123;</span><br><span class="line">        <span class="keyword">return</span> isLatin1() ? StringLatin1.compareTo(v1, v2)</span><br><span class="line">                          : StringUTF16.compareTo(v1, v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.compareToUTF16(v1, v2)</span><br><span class="line">                      : StringUTF16.compareToLatin1(v1, v2);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>判断起始/终结字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> toffset)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Note: toffset might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> (toffset &lt; <span class="number">0</span> || toffset &gt; length() - prefix.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">byte</span> ta[] = value;</span><br><span class="line">    <span class="keyword">byte</span> pa[] = prefix.value;</span><br><span class="line">    <span class="keyword">int</span> po = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pc = pa.length;</span><br><span class="line">    <span class="keyword">if</span> (coder() == prefix.coder()) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = isLatin1() ? toffset : toffset &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (po &lt; pc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLatin1()) &#123;  <span class="comment">// &amp;&amp; pcoder == UTF16</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// coder == UTF16 &amp;&amp; pcoder == LATIN1)</span></span><br><span class="line">        <span class="keyword">while</span> (po &lt; pc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUTF16.getChar(ta, toffset++) != (pa[po++] &amp; <span class="number">0xff</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> startsWith(prefix, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> startsWith(suffix, length() - suffix.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>找某字符的下标</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(ch, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (coder() == str.coder()) &#123;</span><br><span class="line">        <span class="keyword">return</span> isLatin1() ? StringLatin1.indexOf(value, str.value)</span><br><span class="line">                          : StringUTF16.indexOf(value, str.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (coder() == LATIN1) &#123;  <span class="comment">// str.coder == UTF16</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StringUTF16.indexOfLatin1(value, str.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(value, coder(), length(), str, fromIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">byte</span> srcCoder, <span class="keyword">int</span> srcCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                   String tgtStr, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] tgt    = tgtStr.value;</span><br><span class="line">    <span class="keyword">byte</span> tgtCoder = tgtStr.coder();</span><br><span class="line">    <span class="keyword">int</span> tgtCount  = tgtStr.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fromIndex &gt;= srcCount) &#123;</span><br><span class="line">        <span class="keyword">return</span> (tgtCount == <span class="number">0</span> ? srcCount : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fromIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tgtCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fromIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tgtCount &gt; srcCount) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (srcCoder == tgtCoder) &#123;</span><br><span class="line">        <span class="keyword">return</span> srcCoder == LATIN1</span><br><span class="line">            ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)</span><br><span class="line">            : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (srcCoder == LATIN1) &#123;    <span class="comment">//  &amp;&amp; tgtCoder == UTF16</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// srcCoder == UTF16 &amp;&amp; tgtCoder == LATIN1) &#123;</span></span><br><span class="line">    <span class="keyword">return</span> StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>取子串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = length() - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)</span><br><span class="line">                      : StringUTF16.newString(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = length();</span><br><span class="line">    checkBoundsBeginEnd(beginIndex, endIndex, length);</span><br><span class="line">    <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex == <span class="number">0</span> &amp;&amp; endIndex == length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)</span><br><span class="line">                      : StringUTF16.newString(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>将String中的指定内容进行替换，需要注意的是，由于String不可变，这种”替换”实际上是新建了一个字符串进行返回，而非改变原来的字符串。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (oldChar != newChar) &#123;</span><br><span class="line">        String ret = isLatin1() ? StringLatin1.replace(value, oldChar, newChar)</span><br><span class="line">                                : StringUTF16.replace(value, oldChar, newChar);</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractStringBuilder类"><a href="#AbstractStringBuilder类" class="headerlink" title="AbstractStringBuilder类"></a>AbstractStringBuilder类</h3><p>​    分析源码发现，StringBuilder类和StringBuffer类都继承自AbstractStringBuilder父类，故先分析父类的结构和主要功能。</p><h4 id="主要结构-1"><a href="#主要结构-1" class="headerlink" title="主要结构"></a>主要结构</h4><p>​    与String类一样，使用byte数组来存储字符串内容。增加count变量记录字符串的实际长度。</p><p>​    另一个与String不同的点在于，AbstractStringBuilder是一个可变的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123; </span><br><span class="line"><span class="keyword">byte</span>[] value;</span><br><span class="line">    <span class="keyword">byte</span> coder;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><p>​    有参构造通过传入字符数组的容量作为参数，构造指定容量的字符数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AbstractStringBuilder() &#123;</span><br><span class="line">    value = EMPTYVALUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (COMPACT_STRINGS) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">byte</span>[capacity];</span><br><span class="line">        coder = LATIN1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value = StringUTF16.newBytesFor(capacity);</span><br><span class="line">        coder = UTF16;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>字符串间比较</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(AbstractStringBuilder another)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == another) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span> val1[] = value;</span><br><span class="line">    <span class="keyword">byte</span> val2[] = another.value;</span><br><span class="line">    <span class="keyword">int</span> count1 = <span class="keyword">this</span>.count;</span><br><span class="line">    <span class="keyword">int</span> count2 = another.count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coder == another.coder) &#123;</span><br><span class="line">        <span class="keyword">return</span> isLatin1() ? StringLatin1.compareTo(val1, val2, count1, count2)</span><br><span class="line">                          : StringUTF16.compareTo(val1, val2, count1, count2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isLatin1() ? StringLatin1.compareToUTF16(val1, val2, count1, count2)</span><br><span class="line">                      : StringUTF16.compareToLatin1(val1, val2, count1, count2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>获取字符串长度，由于count变量被用于记录字符串长度，因此只要返回count值即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>由于构造的字符串可变，源码中提供改变字符串所需的函数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于保证容量至少与给定的最小值相等</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minimumCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minimumCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ensureCapacityInternal(minimumCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于扩大字符串容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">newCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = value.length &gt;&gt; coder;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> SAFE_BOUND = MAX_ARRAY_SIZE &gt;&gt; coder;</span><br><span class="line">    <span class="keyword">return</span> (newCapacity &lt;= <span class="number">0</span> || SAFE_BOUND - newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        ? hugeCapacity(minCapacity)</span><br><span class="line">        : newCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于将容量减小至已用容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = count &lt;&lt; coder;</span><br><span class="line">    <span class="keyword">if</span> (length &lt; value.length) &#123;</span><br><span class="line">        value = Arrays.copyOf(value, length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newLength &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(newLength);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureCapacityInternal(newLength);</span><br><span class="line">    <span class="keyword">if</span> (count &lt; newLength) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">            StringLatin1.fillNull(value, count, newLength);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            StringUTF16.fillNull(value, count, newLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count = newLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>返回某一下标处的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkIndex(index, count);</span><br><span class="line">    <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>)(value[index] &amp; <span class="number">0xff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StringUTF16.charAt(value, index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>改变某一下标处的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    checkIndex(index, count);</span><br><span class="line">    <span class="keyword">if</span> (isLatin1() &amp;&amp; StringLatin1.canEncode(ch)) &#123;</span><br><span class="line">        value[index] = (<span class="keyword">byte</span>)ch;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">            inflate();</span><br><span class="line">        &#125;</span><br><span class="line">        StringUTF16.putCharSB(value, index, ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>在现有字符串后面添加新的字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> appendNull();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    ensureCapacityInternal(count + len);</span><br><span class="line">    putStringAt(count, str);</span><br><span class="line">    count += len;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//各种形式的重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(Object obj)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(StringBuffer sb)</span> </span></span><br><span class="line"><span class="function">AbstractStringBuilder <span class="title">append</span><span class="params">(AbstractStringBuilder asb)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(CharSequence s)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span>[] str)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> offset, <span class="keyword">int</span> len)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">int</span> i)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">long</span> l)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br></pre></td></tr></table></figure><ol start="7"><li>替换，此处的替换与String类中的不同，并非返回新的字符串，而是在原有字符串基础上进行改变并返回</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="keyword">this</span>.count;</span><br><span class="line">    <span class="keyword">if</span> (end &gt; count) &#123;</span><br><span class="line">        end = count;</span><br><span class="line">    &#125;</span><br><span class="line">    checkRangeSIOOBE(start, end, count);</span><br><span class="line">    <span class="keyword">int</span> len = str.length();</span><br><span class="line">    <span class="keyword">int</span> newCount = count + len - (end - start);</span><br><span class="line">    ensureCapacityInternal(newCount);</span><br><span class="line">    shift(end, newCount - count);</span><br><span class="line">    <span class="keyword">this</span>.count = newCount;</span><br><span class="line">    putStringAt(start, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>插入/删除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span>[] str, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    checkOffset(index, count);</span><br><span class="line">    checkRangeSIOOBE(offset, offset + len, str.length);</span><br><span class="line">    ensureCapacityInternal(count + len);</span><br><span class="line">    shift(index, len);</span><br><span class="line">    count += len;</span><br><span class="line">    putCharsAt(index, str, offset, offset + len);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一些重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, Object obj)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, String str)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">char</span>[] str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> dstOffset, CharSequence s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> dstOffset, CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">boolean</span> b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">int</span> i)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">long</span> l)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">double</span> d)</span></span></span><br></pre></td></tr></table></figure><ol start="9"><li>返回子串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> substring(start, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    checkRangeSIOOBE(start, end, count);</span><br><span class="line">    <span class="keyword">if</span> (isLatin1()) &#123;</span><br><span class="line">        <span class="keyword">return</span> StringLatin1.newString(value, start, end - start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StringUTF16.newString(value, start, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h3><h4 id="主要结构-2"><a href="#主要结构-2" class="headerlink" title="主要结构"></a>主要结构</h4><p>​    StringBuilder类继承于AbstractStringBuilder，不同于String，是一个可变类。其主要结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">StringBuilder</span>&gt;, <span class="title">CharSequence</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4383685877147921099L</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数-2"><a href="#构造函数-2" class="headerlink" title="构造函数"></a>构造函数</h4><p>​    StringBuilder的构造函数大多调用父类的接口完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(CharSequence seq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(seq.length() + <span class="number">16</span>);</span><br><span class="line">    append(seq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><p>​    StringBuilder的方法（append、insert等）大多调用父类接口，因此代码很短，实现较为方便。这里不再赘述其代码实现方法。</p><h3 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h3><h4 id="主要结构-3"><a href="#主要结构-3" class="headerlink" title="主要结构"></a>主要结构</h4><p>​    和StringBuilder一样，StringBuffer也继承于AbstractStringBuilder类，也是可变类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">StringBuffer</span>&gt;, <span class="title">CharSequence</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">transient</span> String toStringCache;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3388685877147921107L</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数-3"><a href="#构造函数-3" class="headerlink" title="构造函数"></a>构造函数</h4><p>​    StringBuffer的构造函数形式和StringBuilder几乎完全一样，都是以继承父类为主</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(CharSequence seq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(seq.length() + <span class="number">16</span>);</span><br><span class="line">    append(seq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h4><p>​    StringBuffer与StringBuilder的主要方法结构都非常相似，不同点在于StringBuffer的方法前都有<code>synchronized</code>关键字作为修饰。即，StringBuffer类的方法每次只有一个线程可以访问，实现了线程安全。</p><h2 id="String、StringBuffer、StringBuilder的对比"><a href="#String、StringBuffer、StringBuilder的对比" class="headerlink" title="String、StringBuffer、StringBuilder的对比"></a>String、StringBuffer、StringBuilder的对比</h2><p>​    在分析完源代码之后，可以得出三者的主要区别如下：</p><p>​    String为不可变类，即其值为一个常量，不可以被改变。其所在的内存区域为常量池。</p><p>​    StringBuilder为可变类，其值可以通过已定义的函数接口发生改变，分配的内存区域为堆。</p><p>​    StringBuffer为可变类，定义的方法每次只能由一个线程访问，实现线程安全，分配的内存区域为堆。</p><p>​    三者都不可以被继承。</p><p>​    由于三者结构和功能存在区别，它们适合的场景也有一定区别。</p><p>​    由于每次对String的值进行改变时（例如连接、替换等），JVM将会生成一个新的字符串，将原来String的名字链接到新的字符串上，并且回收原有字符串。而在对StringBuffer和StringBuilder进行操作时，只是简单改变其自身的值。这导致了改变字符串时，String的性能和效率显著低于另外两个类。</p><p>​    因此，String适合的场景为，对少量字符串进行操作，并且操作较少的情况。StringBuffer和StringBuilder比较适合对字符串进行复杂操作的场景。其中StringBuffer由于实现线程安全，比较适合在多线程的场景中使用，而StringBuilder在单线程场景中使用效率会比较高。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"Welcome to Java"</span>;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"Welcome to Java"</span>); </span><br><span class="line">String s3 = <span class="string">"Welcome to Java"</span>;</span><br><span class="line">System.out.println(<span class="string">"s1 == s2 is "</span> + (s1 == s2)); </span><br><span class="line">System.out.println(<span class="string">"s1 == s3 is "</span> + (s1 == s3));</span><br></pre></td></tr></table></figure><p>Q: 为什么s1\==s2 返回false，而s1==s3返回true?</p><p>A: 由于String的对象存储在常量池中，s1在常量池中对应”Welcome to Java”，创建s2时由于使用new，创建了一个新的常量，与s1所对应常量不为同一个，故返回false。而s3被直接对应到常量池中”Welcome to Java”，与s1对应常量相同，故返回true。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在JAVA中，对字符串的操作可以通过&lt;code&gt;String&lt;/code&gt; 、&lt;code&gt;StringBuffer&lt;/code&gt;、&lt;code&gt;StringBuilder&lt;/code&gt;来进行。三者虽然功能相似，但在实际开发中，不同场景下使用三者的性能会存在一定差异，三者各有其
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="Java" scheme="https://iris-cyy.github.io/categories/Notes/Java/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="Java" scheme="https://iris-cyy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>About git</title>
    <link href="https://iris-cyy.github.io//Tricks/2020-02-02/git/"/>
    <id>https://iris-cyy.github.io//Tricks/2020-02-02/git/</id>
    <published>2020-02-02T09:24:16.000Z</published>
    <updated>2020-02-02T09:33:32.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用git来上传文件"><a href="#使用git来上传文件" class="headerlink" title="使用git来上传文件"></a>使用git来上传文件</h2><ol><li><p>在github上create reposity</p></li><li><p>建立本地仓库</p><p>在本地项目根目录下，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>会发现目录中含有了一个<code>.git</code>文件夹</p></li><li><p>将本地仓库与github远程仓库进行关联</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/... （reposity的链接）</span><br></pre></td></tr></table></figure></li><li><p>同步reposity中已有的文件到本地（例如README）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure></li><li><p>添加文件到仓库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure><p>如果使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>则会当前目录下的所有文件添加到仓库中</p></li><li><p>将add的文件提交到仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m "upload" （""中可以是自定义的注释语句）</span><br></pre></td></tr></table></figure></li><li><p>上传代码到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用git来上传文件&quot;&gt;&lt;a href=&quot;#使用git来上传文件&quot; class=&quot;headerlink&quot; title=&quot;使用git来上传文件&quot;&gt;&lt;/a&gt;使用git来上传文件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在github上create reposity&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Tricks" scheme="https://iris-cyy.github.io/categories/Tricks/"/>
    
    
      <category term="Tricks" scheme="https://iris-cyy.github.io/tags/Tricks/"/>
    
      <category term="git" scheme="https://iris-cyy.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java Maze</title>
    <link href="https://iris-cyy.github.io//Projects/2020-02-02/java_maze/"/>
    <id>https://iris-cyy.github.io//Projects/2020-02-02/java_maze/</id>
    <published>2020-02-02T08:54:23.000Z</published>
    <updated>2020-02-03T03:55:17.297Z</updated>
    
    <content type="html"><![CDATA[<p>本次开发的是一个基于Socket编程、GUI编程、多线程编程等技术的网络程序，实现的是两个玩家联机比赛走迷宫的功能。</p><h2 id="设计说明"><a href="#设计说明" class="headerlink" title="设计说明"></a>设计说明</h2><p>本程序采用Java程序设计语言，在Eclipse平台下编辑、编译与调试。通过Socket编程技术实现客户端之间、客户端与服务器之间的通信，通过GUI编程技术实现窗口显示，通过多线程技术实现多用户同时使用。</p><p>具体实现的功能如下：</p><ol><li><p>使用基本的Client-Server模型。用户使用Client端进行连接时，将会跳出弹窗提示输入服务器的IP地址和自定义的用户名与Server端连接。如果服务器未开启，将跳出错误提示。</p></li><li><p>当两个用户都完成连接之后，显示完整地图，比赛开始。角色将出现在地图右上角，游戏的终点在地图左下角。窗口的左边显示自己的地图，右边显示对方的游戏状态。</p></li><li><p>用户可以通过方向键控制角色移动，角色不能穿越障碍物。</p></li><li><p>比赛过程中可以看到对方的当前位置、移动信息、比赛进度等。</p></li><li><p>当有一方先到达终点，比赛结束。胜负方可以看到各自的胜负信息。</p></li></ol><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h3 id="功能模块设计"><a href="#功能模块设计" class="headerlink" title="功能模块设计"></a>功能模块设计</h3><p>本程序需实现的主要功能有：</p><ol><li><p>使用Socket进行通信，</p></li><li><p>根据从bib中提取得到的文献元数据链接，访问网页并获取详细信息</p></li><li><p>从元数据链接中访问PDF下载链接，下载指定文献的PDF文档</p></li><li><p>根据文献详细信息的各字段建立索引</p></li><li><p>建立搜索引擎，根据用户输入的字段类别和关键字，搜索相关信息</p></li></ol><p>程序的总体功能如图1所示：</p><p> <img src="/images/projects/java-maze/clip_image002.gif" alt="img"></p><center> 图1 总体功能图 </center><h3 id="流程图设计"><a href="#流程图设计" class="headerlink" title="流程图设计"></a>流程图设计</h3><p>程序总体流程如图2所示：</p><p><img src="/images/projects/java-maze/clip_image004.gif" alt="img"></p><center> 图2 总体流程图 </center><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h3 id="GUI图形显示"><a href="#GUI图形显示" class="headerlink" title="GUI图形显示"></a>GUI图形显示</h3><p>在本项目中，使用java的图形界面组件来实现地图和角色的显示、角色位置的刷新以及弹窗的显示。要注意的是，在JFrame组件的显示时，在相同位置上进行组件叠加时，只能够显示添加的第一个组件，这给角色的位置刷新带来一定难度和格式限制。</p><p>其具体实现如下所示：</p><p>地图的显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">"test"</span>);  </span><br><span class="line"><span class="keyword">static</span> JPanel mainScreen=<span class="keyword">new</span> JPanel();  </span><br><span class="line"><span class="keyword">static</span> JLabel player, map_label, bound, map2, player2;  </span><br><span class="line">      </span><br><span class="line"><span class="keyword">static</span> ImageIcon player_img = <span class="keyword">new</span> ImageIcon(<span class="string">"img\\player.gif"</span>);  </span><br><span class="line"><span class="keyword">static</span> ImageIcon map_img = <span class="keyword">new</span> ImageIcon(<span class="string">"img\\map.png"</span>);  </span><br><span class="line"><span class="keyword">static</span> ImageIcon bound_img = <span class="keyword">new</span> ImageIcon(<span class="string">"img\\bound.png"</span>);  </span><br><span class="line">  </span><br><span class="line">frame.setBounds(<span class="number">100</span>,<span class="number">100</span>,GAME_WIDTH, GAME_HEIGHT);  </span><br><span class="line">mainScreen.setLayout(<span class="keyword">null</span>);  </span><br><span class="line">map_label = <span class="keyword">new</span> JLabel();  </span><br><span class="line">map_label.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>);  </span><br><span class="line">setIcon(map_img, map_label);  </span><br><span class="line">mainScreen.add(map_label);  </span><br><span class="line">bound = <span class="keyword">new</span> JLabel();  </span><br><span class="line">bound.setBounds(<span class="number">800</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">800</span>);  </span><br><span class="line">setIcon(bound_img, bound);  </span><br><span class="line">mainScreen.add(bound);  </span><br><span class="line">  </span><br><span class="line">frame.add(mainScreen);  </span><br><span class="line">frame.setVisible(<span class="keyword">true</span>);  </span><br><span class="line">frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);</span><br></pre></td></tr></table></figure><p>角色位置的刷新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">player = <span class="keyword">new</span> JLabel();  </span><br><span class="line">player.setBounds(player_posi*<span class="number">40</span>, player_posj*<span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>);  </span><br><span class="line">setIcon(player_img, player);  </span><br><span class="line">mainScreen.add(player);  </span><br><span class="line">  </span><br><span class="line">player.setLocation(posi*<span class="number">40</span>, posj*<span class="number">40</span>);  </span><br><span class="line">setIcon(player_img, player);  </span><br><span class="line">mainScreen.remove(map_label);  </span><br><span class="line">mainScreen.add(map_label);</span><br></pre></td></tr></table></figure><p>弹窗显示：</p><p>在本次项目中，使用弹窗来输入连接的IP和用户名信息，并在游戏结束之后使用弹窗来提示游戏结果。实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">JOptionPane.showMessageDialog(frame, <span class="string">"YOU WIN!!"</span>, <span class="string">"Message"</span>, JOptionPane.INFORMATION_MESSAGE);  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span></span>&#123;  </span><br><span class="line">    Button b = <span class="keyword">new</span> Button(<span class="string">"connect to server"</span>);  </span><br><span class="line">    TextField serverIP = <span class="keyword">new</span> TextField(<span class="string">"127.0.0.1"</span>, <span class="number">15</span>);<span class="comment">//服务器的IP地址  </span></span><br><span class="line">    TextField userName = <span class="keyword">new</span> TextField(<span class="string">""</span>, <span class="number">8</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConDialog</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(Client.<span class="keyword">this</span>, <span class="keyword">true</span>);  </span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">new</span> FlowLayout());  </span><br><span class="line">        <span class="keyword">this</span>.add(<span class="keyword">new</span> Label(<span class="string">"server IP:"</span>));  </span><br><span class="line">        <span class="keyword">this</span>.add(serverIP);  </span><br><span class="line">        <span class="keyword">this</span>.add(<span class="keyword">new</span> Label(<span class="string">"user name:"</span>));  </span><br><span class="line">        <span class="keyword">this</span>.add(userName);  </span><br><span class="line">        <span class="keyword">this</span>.add(b);  </span><br><span class="line">        <span class="keyword">this</span>.setLocation(<span class="number">500</span>, <span class="number">400</span>);  </span><br><span class="line">        <span class="keyword">this</span>.pack();  </span><br><span class="line">        <span class="keyword">this</span>.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;  </span><br><span class="line">                setVisible(<span class="keyword">false</span>);  </span><br><span class="line">                System.exit(<span class="number">0</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        b.addActionListener(<span class="keyword">new</span> ActionListener() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </span><br><span class="line">                String IP = serverIP.getText().trim();  </span><br><span class="line">                nc.connect(IP);  </span><br><span class="line">                setVisible(<span class="keyword">false</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="游戏逻辑"><a href="#游戏逻辑" class="headerlink" title="游戏逻辑"></a>游戏逻辑</h3><p>实现迷宫的游戏逻辑较为简单，将地图信息使用二维数组进行存储。在角色进行移动时，读取角色下一个位置的地图信息，如果存在障碍物，将无法通过，否则将能够继续通过。在角色进行移动之后，在窗口中刷新角色位置。如果先于对方角色移动到终点，则获胜，游戏结束。</p><h3 id="Socket连接"><a href="#Socket连接" class="headerlink" title="Socket连接"></a>Socket连接</h3><p>网络相关的模块分成两部分，一部分是连接，另一部分是通信。</p><p>连接部分，客户端填写要连接的IP地址，作为TCP报文段中的字段，然后通过TCP连接上服务器, 并把自己的UDP端口号发送给服务器。服务器通过TCP和客户端连上后收到客户端的UDP端口号信息, 并将客户端的IP地址和UDP端口号封装成一个Client对象, 保存在容器中。</p><p>因为服务器收到链路层帧后会提取出网络层数据报, 源地址的IP地址在IP数据报的首部字段中, Java对这一提取过程进行了封装, 所以我们能够直接在Java的api中获取源地址的IP。</p><p>服务器封装完Client对象后, 为客户端的主机分配一个id号, 这个id号将用于往后游戏的网络传输中进行标识。</p><p>同时服务器也会把自己的UDP端口号发送客户端, 因为服务器自身会开启一条UDP线程, 用于接收转发UDP包。</p><p>客户端收到坦克id后设置到自己的主战坦克的id字段中. 并保存服务器的UDP端口号。</p><p>这部分的实现方式如下：</p><p>客户端部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String ip)</span></span>&#123;  </span><br><span class="line">    serverIP = ip;  </span><br><span class="line">    Socket s = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        ds = <span class="keyword">new</span> DatagramSocket(UDP_PORT);<span class="comment">//创建UDP套接字  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            s = <span class="keyword">new</span> Socket(ip, Server.TCP_PORT);<span class="comment">//创建TCP套接字  </span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e1)&#123;  </span><br><span class="line">            client.getServerNotStartDialog().setVisible(<span class="keyword">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(s.getOutputStream());  </span><br><span class="line">        dos.writeInt(UDP_PORT);<span class="comment">//向服务器发送自己的UDP端口号  </span></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();<span class="comment">//获得自己的id号  </span></span><br><span class="line">        <span class="keyword">this</span>.serverUDPPort = dis.readInt();<span class="comment">//获得服务器转发客户端消息的UDP端口号  </span></span><br><span class="line">        client.getMe().setId(id);<span class="comment">//设置坦克的id号  </span></span><br><span class="line">        System.out.println(<span class="string">"connect to server successfully..."</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            <span class="keyword">if</span>(s != <span class="keyword">null</span>) s.close();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPThread()).start();<span class="comment">//开启客户端UDP线程, 向服务器发送或接收游戏数据</span></span><br><span class="line">  </span><br><span class="line">    connectMsg msg = <span class="keyword">new</span> connectMsg(client.getMe());  </span><br><span class="line">    send(msg);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPThread()).start();  </span><br><span class="line">    ServerSocket ss = <span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        ss = <span class="keyword">new</span> ServerSocket(TCP_PORT);<span class="comment">//在TCP欢迎套接字上监听客户端连接  </span></span><br><span class="line">       System.out.println(<span class="string">"Server has started..."</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">        Socket s = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            s = ss.accept();<span class="comment">//给客户但分配专属TCP套接字  </span></span><br><span class="line">            System.out.println(<span class="string">"A client has connected..."</span>);  </span><br><span class="line">            DataInputStream dis = <span class="keyword">new</span> DataInputStream(s.getInputStream());  </span><br><span class="line">            <span class="keyword">int</span> UDP_PORT = dis.readInt();<span class="comment">//记录客户端UDP端口  </span></span><br><span class="line">            Client client = <span class="keyword">new</span> Client(s.getInetAddress().getHostAddress(), UDP_PORT, ID);<span class="comment">//创建Client对象  </span></span><br><span class="line">            clients.add(client);<span class="comment">//添加进客户端容器  </span></span><br><span class="line">  </span><br><span class="line">            DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(s.getOutputStream());  </span><br><span class="line">            dos.writeInt(ID++);<span class="comment">//向客户端分配id号  </span></span><br><span class="line">            dos.writeInt(Server.UDP_PORT);<span class="comment">//告诉客户端自己的UDP端口号  </span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span>(s != <span class="keyword">null</span>) s.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h3><p>Socket通信通过自定义应用层的协议实现，每个应用层协议有消息类型和消息数据两个部分组成，不同的协议数据格式不同。</p><p>在本项目中，总共有四种传递协议，分别对应游戏逻辑中的连接、移动、获胜（其中连接部分需要两个协议，新加入的玩家通知已存在的玩家，已存在的玩家给新玩家提供响应，从而分别在两者的地图上添加对方的信息）。</p><p>在本项目中，设计Msg接口，定义应用层协议的格式，每个协议在此基础上定义具体的实现类，通过多态进行实现。</p><p>Msg接口的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Msg</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECT_MSG = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVE_MSG = <span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WIN_MSG = <span class="number">3</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECT_TO_ORI_MSG = <span class="number">4</span>;  </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接部分的协议，新用户发送的连接信息用connectMSG类进行实现，消息数据包含用户id、用户名字段。在新用户连接成功后进行发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span></span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"connect_msg_sent"</span>);  </span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">88</span>);  </span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        dos.writeInt(msgType);  </span><br><span class="line">        dos.writeInt(me.getId());  </span><br><span class="line">        dos.writeUTF(me.getName());  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">byte</span>[] buf = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">new</span> InetSocketAddress(IP, UDP_Port));  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();  </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">this</span>.client.getMe().getId())&#123;  </span><br><span class="line">           <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"connect_msg_received"</span>);  </span><br><span class="line">        String Name = dis.readUTF();  </span><br><span class="line">        client.getMe().generatePlayer2(<span class="number">18</span>, <span class="number">1</span>);  </span><br><span class="line">        connectToOriMsg msg = <span class="keyword">new</span> connectToOriMsg(client.getMe());  </span><br><span class="line">        client.getNc().send(msg);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已有用户的响应信息用connectToOriMsg进行实现，协议格式实现方式与connectMsg类似，包含用户id和用户名两个字段，在已有用户收到新用户的连接信息之后发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span></span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"connect_ori_sent"</span>);  </span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">88</span>);  </span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        dos.writeInt(msgType);  </span><br><span class="line">        dos.writeInt(me.getId());  </span><br><span class="line">        dos.writeUTF(me.getName());    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">byte</span>[] buf = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">new</span> InetSocketAddress(IP, UDP_Port));  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();  </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">this</span>.client.getMe().getId())&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        String Name = dis.readUTF();  </span><br><span class="line">            System.out.println(<span class="string">"connect_ori_received"</span>);  </span><br><span class="line">            client.getMe().generatePlayer2(<span class="number">18</span>, <span class="number">1</span>);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移动的信息通过MoveMsg协议进行传输，每个用户在操纵角色进行移动之后，要像对手发送信息报告角色的新位置，并在对方的地图上刷新角色位置。该协议数据包含用户id、角色新位置的水平、垂直坐标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span> </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"["</span>+id+<span class="string">"]"</span>+<span class="string">"move_msg_sent: "</span>+posi+ <span class="string">" "</span> + posj);  </span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">30</span>);  </span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        dos.writeInt(msgType);  </span><br><span class="line">        dos.writeInt(id);  </span><br><span class="line">        dos.writeInt(posi);  </span><br><span class="line">        dos.writeInt(posj);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">byte</span>[] buf = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">new</span> InetSocketAddress(IP, UDP_Port));  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();  </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">this</span>.client.getMe().getId())&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">int</span> posi = dis.readInt();  </span><br><span class="line">        <span class="keyword">int</span> posj = dis.readInt();  </span><br><span class="line">        System.out.println(<span class="string">"["</span>+id+<span class="string">"]"</span>+<span class="string">"move_msg_received: "</span>+posi+<span class="string">" "</span>+posj);  </span><br><span class="line">        client.getMe().reGeneratePlayer2(posi, posj);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递获胜信息的协议在WinMsg中定义。当一方角色移动到终点时，发送获胜信息，并在当前窗口中弹窗提示获胜。另一方的客户端接收到对方的获胜信息后，弹窗提示失败信息。游戏结束。该协议中的数据仅包含获胜者的用户id。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramSocket ds, String IP, <span class="keyword">int</span> UDP_Port)</span> </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"move_win_sent"</span>);  </span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">88</span>);  </span><br><span class="line">    DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        dos.writeInt(msgType);  </span><br><span class="line">        dos.writeInt(id);    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">byte</span>[] buf = baos.toByteArray();  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buf, buf.length, <span class="keyword">new</span> InetSocketAddress(IP, UDP_Port));  </span><br><span class="line">        ds.send(dp);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(DataInputStream dis)</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> id = dis.readInt();  </span><br><span class="line">        <span class="keyword">if</span>(id == <span class="keyword">this</span>.client.getMe().getId())&#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(<span class="string">"win_msg_received"</span>);  </span><br><span class="line">        client.getMe().lose();  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试与运行"><a href="#测试与运行" class="headerlink" title="测试与运行"></a>测试与运行</h2><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><p>在程序代码基本完成后，经过不断的调试与修改，能够完成上述功能。</p><p>运行客户端会跳出连接提示输入服务器IP和用户名进行连接：</p><p><img src="/images/projects/java-maze/clip_image006.gif" alt="img"></p><p>连接成功后客户端和服务器的命令行提示如下所示：</p><p>客户端1：</p><p><img src="/images/projects/java-maze/clip_image008.gif" alt="img"></p><p>客户端2：</p><p><img src="/images/projects/java-maze/clip_image010.gif" alt="img"></p><p>服务器：</p><p><img src="/images/projects/java-maze/clip_image012.gif" alt="img"></p><p>服务器端可视化情况如下：</p><p><img src="/images/projects/java-maze/clip_image014.gif" alt="img"></p><h3 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h3><p>游戏过程的测试如下所示：</p><p>如果服务器未开启将提示连接错误：</p><p><img src="/images/projects/java-maze/clip_image016.gif" alt="img"></p><p>连接成功后将等待另一个用户连接，此时的游戏界面如下：</p><p><img src="/images/projects/java-maze/clip_image018.gif" alt="img"></p><p>左边是自己的地图，在对方用户连接成功后，将在右边显示对方的游戏界面，游戏开始的初始状态如下所示：</p><p><img src="/images/projects/java-maze/clip_image020.gif" alt="img"></p><p>游戏进行一段时间后，左边是自己的游戏状态，右边是对方的游戏状态：</p><p><img src="/images/projects/java-maze/clip_image022.gif" alt="img"></p><p>率先到达终点的用户将获得获胜提示：</p><p><img src="/images/projects/java-maze/clip_image024.gif" alt="img"></p><p>与此同时在对方的游戏界面将提示失败信息：</p><p><img src="/images/projects/java-maze/clip_image026.gif" alt="img"></p><p><br></p><hr><p>完整代码请见<a href="https://github.com/Iris-cyy/Java-Maze/" target="_blank" rel="noopener">github</a>，欢迎star :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本次开发的是一个基于Socket编程、GUI编程、多线程编程等技术的网络程序，实现的是两个玩家联机比赛走迷宫的功能。&lt;/p&gt;
&lt;h2 id=&quot;设计说明&quot;&gt;&lt;a href=&quot;#设计说明&quot; class=&quot;headerlink&quot; title=&quot;设计说明&quot;&gt;&lt;/a&gt;设计说明&lt;/h2
      
    
    </summary>
    
      <category term="Projects" scheme="https://iris-cyy.github.io/categories/Projects/"/>
    
    
      <category term="Projects" scheme="https://iris-cyy.github.io/tags/Projects/"/>
    
      <category term="Java" scheme="https://iris-cyy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Crawler</title>
    <link href="https://iris-cyy.github.io//Projects/2020-02-02/java_crawler/"/>
    <id>https://iris-cyy.github.io//Projects/2020-02-02/java_crawler/</id>
    <published>2020-02-02T08:23:06.000Z</published>
    <updated>2020-02-03T03:55:28.565Z</updated>
    
    <content type="html"><![CDATA[<p>本次开发的是一个学术搜索引擎，可以根据关键词从数据库中搜索相关内容，实现搜索引擎的基本功能。本程序采用Java程序设计语言，在Eclipse平台下编辑、编译与调试。通过爬虫技术获得来源于ACL学术网站<a href="https://www.aclweb.org/anthology/" target="_blank" rel="noopener">https://www.aclweb.org/anthology/</a>的相关文献信息，基于此建立搜索引擎。</p><p>这个搜索引擎项目中用到了Jsoup爬虫、Lucene搜索引擎等技术，也综合了Java的文件读入输出、异常判断、jar包的引用等等。由于整个项目所需要用到的数据集较大，总共有53745篇文献，每一篇都要从bib中读取信息、访问对应url，并下载其中500篇PDF，工作量浩大，整个数据集的获取所需的时间非常长。在整个爬取过程中遇到了很多异常，例如，刚开始爬取的时候，常常会遇到连接超时或者读取超时的问题导致程序终止；在访问的过程中发现bib文件所提供的url链接有多种格式，有一些是网页，而另一些是PDF链接。在查找了资料之后，逐一解决了这些问题。编写代码延长判定“timeout”的时长，并让访问失败时尝试再次访问而不会直接退出并终止。同时在终止程序时输出终止的位置（已访问的数量），下一次可以手动设置爬取的起点，不用每次都从头开始。</p><h2 id="设计说明"><a href="#设计说明" class="headerlink" title="设计说明"></a>设计说明</h2><p>具体实现的功能如下：</p><ol><li><p>解析包含53745篇文献基本信息的BibText格式文件，得到文献结构化信息，如标题、作者等。</p></li><li><p>根据BibText中所给的URL链接，访问文献元数据网页，使用Jsoup工具抓取摘要等其它在BibText中未包含的信息</p></li><li><p>从文献元数据网页上访问下载PDF文件的链接，并下载PDF文件</p></li><li><p>利用Lucene为扩充后的详细信息中各字段建立索引</p></li><li><p>建立搜索引擎，用户通过命令行进行交互，根据提示输入要检索的字段以及关键词，获得相关程度排序最高的5篇文献，将这5篇文献的标题、作者、网页链接依次输出在命令行。</p></li></ol><p>项目中使用的jar包如下所示：</p><blockquote><p>IKAnalyzer2012_FF.jar<br>jsoup-1.12.1.jar<br>lucene-core-4.10.0.jar<br>lucene-queries-4.10.0.jar<br>lucene-queryparser-4.10.0.jar</p></blockquote><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h3 id="功能模块设计"><a href="#功能模块设计" class="headerlink" title="功能模块设计"></a>功能模块设计</h3><p>本程序需实现的主要功能有：</p><ol><li><p>解析bib文件，提取标题、作者等基本信息</p></li><li><p>根据从bib中提取得到的文献元数据链接，访问网页并获取详细信息</p></li><li><p>从元数据链接中访问PDF下载链接，下载指定文献的PDF文档</p></li><li><p>根据文献详细信息的各字段建立索引</p></li><li><p>建立搜索引擎，根据用户输入的字段类别和关键字，搜索相关信息</p></li></ol><p>程序的总体功能如图1所示：</p><p><img src="/images/projects/java-crawler/image-20200202162837279.png" width=95%></p><center> 图1 总体功能图 </center><h3 id="流程图设计"><a href="#流程图设计" class="headerlink" title="流程图设计"></a>流程图设计</h3><p>程序总体流程如图2所示：</p><p><img src="/images/projects/java-crawler/image-20200202162928108.png" width=60%></p><center> 图2 总体流程图 </center><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><h3 id="BibText解析"><a href="#BibText解析" class="headerlink" title="BibText解析"></a>BibText解析</h3><p>在anthology.bib文件中，汇总了53745篇文献的基本信息，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@inproceedings&#123;sanacore-etal-2019-semantic,</span><br><span class="line">    title &#x3D; &quot;Semantic descriptions of &#123;F&#125;rench derivational relations in a families-and-paradigms framework&quot;,</span><br><span class="line">    author &#x3D; &quot;Sanacore, Daniele  and</span><br><span class="line">      Hathout, Nabil  and</span><br><span class="line">      Namer, Fiammetta&quot;,</span><br><span class="line">    booktitle &#x3D; &quot;Proceedings of the Second International Workshop on Resources and Tools for Derivational Morphology&quot;,</span><br><span class="line">    month &#x3D; &quot;19--20 &quot; # sep,</span><br><span class="line">    year &#x3D; &quot;2019&quot;,</span><br><span class="line">    address &#x3D; &quot;Prague, Czechia&quot;,</span><br><span class="line">    publisher &#x3D; &quot;Charles University, Faculty of Mathematics and Physics, Institute of Formal and Applied Linguistics&quot;,</span><br><span class="line">    url &#x3D; &quot;https:&#x2F;&#x2F;www.aclweb.org&#x2F;anthology&#x2F;W19-8503&quot;,</span><br><span class="line">    pages &#x3D; &quot;15--24&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据格式进行读取，具体方法如下：</p><ol><li><p>若读入行的第一个字符为“@”，表示一个新的文献开始</p></li><li><p>若读入行的第一个字符为“}”，表示一个文献结束</p></li><li><p>在bib中的信息中，只需要获取并存储title, author, url字段的内容。因为除了title和author之外的信息，都在网页中得到显示，并且存储格式一致，直接从网页中爬取较为方便。其中需要注意的是，一篇文章可能有多个作者，多作者的信息在bib文件中分行存储。在进行读取时，将分行的信息合并为同一个字段内容进行存储。</p></li></ol><h3 id="Jsoup爬虫"><a href="#Jsoup爬虫" class="headerlink" title="Jsoup爬虫"></a>Jsoup爬虫</h3><p>根据从bib文件中获取的url信息，访问文献所在链接，并利用Jsoup工具对页面进行解析。</p><p>需要注意的是，bib中的url信息分为两部分，一部分为网页的元数据链接，另一部分为以“<a href="http://doi.org/”开头的PDF下载链接。对于前一部分url，使用Jsoup工具访问链接之后爬取信息；而对于后一部分url，链接指提供下载功能，因此直接使用bib中信息建立索引，若在下载范围内，则访问链接进行下载。" target="_blank" rel="noopener">http://doi.org/”开头的PDF下载链接。对于前一部分url，使用Jsoup工具访问链接之后爬取信息；而对于后一部分url，链接指提供下载功能，因此直接使用bib中信息建立索引，若在下载范围内，则访问链接进行下载。</a></p><p>考虑到可能会存在连接超时导致访问失败的问题，在代码中进行解决。思路是，如果访问失败，将停顿1s之后再次尝试访问。如果对该链接访问失败次数达到20次，说明可能是网络存在问题，将输出异常信息，并输出当前正在进行爬取的链接的编号（1-53745），方便下一次继续爬取（下一次只需要从当前出错的位置开始继续爬取即可，不必从头开始）。</p><p>这部分的实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;  </span><br><span class="line">   <span class="keyword">try</span> &#123;  </span><br><span class="line">      <span class="comment">//获取文献链接页面的内容  </span></span><br><span class="line">      document = Jsoup.connect(url).get();  </span><br><span class="line">      errnum = <span class="number">0</span>;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">      <span class="comment">//如果连接出错次数少于20次，停顿1s之后再次尝试连接  </span></span><br><span class="line">      <span class="comment">//若多于20次，抛出异常信息并终止运行  </span></span><br><span class="line">      <span class="keyword">if</span>(errnum &lt; <span class="number">20</span>) &#123;  </span><br><span class="line">          errnum++;  </span><br><span class="line">          Thread.sleep(<span class="number">1000</span>);  </span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">          System.out.println(<span class="string">"Current cnt = "</span> + cnt);  </span><br><span class="line">          e.printStackTrace();  </span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成对网页的解析之后，继续使用Jsoup工具访问网页中存储了相关信息的部分，获得需要的内容。</p><p>观察网页源代码结构，示例如下：</p><p><img src="/images/projects/java-crawler/image-20200202163506263.png" width=70%></p><p>含有摘要的文献，结构如下：</p><p><img src="/images/projects/java-crawler/image-20200202163536099.png" alt="image-20200202163536099"></p><p>根据此结构，可以编写代码访问并获取相关内容。</p><p>使用String类型变量infot和infov分别存储当前获得的字段属性名与属性值，使用<code>Vector&lt;String&gt;</code>类型变量infoType和infoValue分别存储当前文献拥有的全部字段属性以及与之对应的值。</p><p>该部分的实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择网页中需要的信息所在的位置  </span></span><br><span class="line">content = document.select(<span class="string">".col-lg-10.order-2"</span>);  </span><br><span class="line"><span class="comment">//获取详细信息  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; !content.select(<span class="string">"dt:nth-child("</span> + i + <span class="string">")"</span>).text().trim().equals(<span class="string">""</span>); i+=<span class="number">2</span>)&#123;  </span><br><span class="line">    infot = content.select(<span class="string">"dt:nth-child("</span> + i + <span class="string">")"</span>).text();  </span><br><span class="line">    infov = content.select(<span class="string">"dd:nth-child("</span> + (i+<span class="number">1</span>) + <span class="string">")"</span>).text();  </span><br><span class="line">    infoType.add(infot.substring(<span class="number">0</span>, infot.length()-<span class="number">1</span>).toLowerCase());  </span><br><span class="line">    infoValue.add(infov);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//获取摘要  </span></span><br><span class="line"><span class="keyword">if</span>(content.select(<span class="string">"div &gt; div"</span>).hasText()) &#123;  </span><br><span class="line">    infoType.add(<span class="string">"abstract"</span>);  </span><br><span class="line">    infov = content.select(<span class="string">"div &gt; div"</span>).text().substring(<span class="number">1</span>).trim();  </span><br><span class="line">    infoValue.add(infov);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下载PDF文件"><a href="#下载PDF文件" class="headerlink" title="下载PDF文件"></a>下载PDF文件</h3><p>根据bib中获取的url值可以很容易得到对应pdf文件所在的网页链接。编写Download模块通过输出字节流的方式下载对应pdf文件。</p><p>Download模块的实现方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">byte</span>[] readInputStream(InputStream inputStream) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];  </span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;  </span><br><span class="line">    ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();  </span><br><span class="line">    <span class="keyword">while</span>((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;  </span><br><span class="line">        bos.write(buffer, <span class="number">0</span>, len);  </span><br><span class="line">    &#125;  </span><br><span class="line">    bos.close();  </span><br><span class="line">    <span class="keyword">return</span> bos.toByteArray();  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">downLoadByUrl</span><span class="params">(String urlStr,String fileName,String savePath)</span> <span class="keyword">throws</span> IOException</span>&#123;  </span><br><span class="line">    URL url = <span class="keyword">new</span> URL(urlStr);  </span><br><span class="line">    HttpURLConnection conn = (HttpURLConnection)url.openConnection();  </span><br><span class="line">    conn.setConnectTimeout(<span class="number">5</span>*<span class="number">1000</span>);  </span><br><span class="line">    conn.setRequestProperty(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)"</span>);  </span><br><span class="line">    InputStream inputStream = conn.getInputStream();  </span><br><span class="line">    <span class="keyword">byte</span>[] getData = readInputStream(inputStream);  </span><br><span class="line">     </span><br><span class="line">    File saveDir = <span class="keyword">new</span> File(savePath);  </span><br><span class="line">    <span class="keyword">if</span>(!saveDir.exists())&#123;  </span><br><span class="line">        saveDir.mkdir();  </span><br><span class="line">    &#125;  </span><br><span class="line">    File file = <span class="keyword">new</span> File(saveDir+File.separator+fileName);  </span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);  </span><br><span class="line">    fos.write(getData);  </span><br><span class="line">    <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">        fos.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">        inputStream.close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>搜索引擎的部分在SearchEngine模块中实现。</p><p>在获取网页链接的同时对每个文献的信息创建索引，然后根据输入的字段名和关键词进行查找，输出相关度最高的十条搜索结果的标题、作者和链接。</p><p>创建索引的部分原理与格式与demo一致，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(String filePath, Essay essay)</span></span>&#123;  </span><br><span class="line">    File f=<span class="keyword">new</span> File(filePath);  </span><br><span class="line">    IndexWriter iwr=<span class="keyword">null</span>;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        Directory dir=FSDirectory.open(f);  </span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();  </span><br><span class="line">        IndexWriterConfig conf=<span class="keyword">new</span> IndexWriterConfig(Version.LUCENE_4_10_0,analyzer);  </span><br><span class="line">        iwr=<span class="keyword">new</span> IndexWriter(dir,conf);<span class="comment">//建立IndexWriter。固定套路  </span></span><br><span class="line">        Document doc = getDocument(essay.getInfoType(), essay.getInfoValue());  </span><br><span class="line">        iwr.addDocument(doc);  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        iwr.close();  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Document <span class="title">getDocument</span><span class="params">(Vector&lt;String&gt; infoType, Vector&lt;String&gt; infoValue)</span></span>&#123;  </span><br><span class="line">    Document doc=<span class="keyword">new</span> Document();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;infoType.size(); i++) &#123;  </span><br><span class="line">        Field f = <span class="keyword">new</span> TextField(infoType.get(i), infoValue.get(i), Field.Store.YES);  </span><br><span class="line">        doc.add(f);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> doc;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索部分实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(String filePath, String queryStr, String queryField)</span></span>&#123;  </span><br><span class="line">    File f=<span class="keyword">new</span> File(filePath);  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        IndexSearcher searcher=<span class="keyword">new</span> IndexSearcher(DirectoryReader.open(FSDirectory.open(f)));  </span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> IKAnalyzer();  </span><br><span class="line">        QueryParser parser = <span class="keyword">new</span> QueryParser(Version.LUCENE_4_10_0, queryField, analyzer);  </span><br><span class="line">        Query query=parser.parse(queryStr);  </span><br><span class="line">        TopDocs hits=searcher.search(query,<span class="number">10</span>);  </span><br><span class="line">        <span class="keyword">for</span>(ScoreDoc doc:hits.scoreDocs)&#123;  </span><br><span class="line">            Document d=searcher.doc(doc.doc);  </span><br><span class="line">            System.out.println(<span class="string">"Title: "</span> + d.get(<span class="string">"title"</span>));  </span><br><span class="line">            System.out.println(<span class="string">"Author: "</span> + d.get(<span class="string">"author"</span>));  </span><br><span class="line">            System.out.println(<span class="string">"URL: "</span> + d.get(<span class="string">"url"</span>));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ParseException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试与运行"><a href="#测试与运行" class="headerlink" title="测试与运行"></a>测试与运行</h2><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><p>在程序代码基本完成后，经过不断的调试与修改，能够完成上述功能。由于数据量较大，建立数据库的过程耗费了较多时间。最终完成了数据库的建立、PDF文件的下载、搜索引擎的建立，并对搜索引擎的功能进行了测试。</p><p>从网页链接爬取数据集并建立索引：</p><p><img src="/images/projects/java-crawler/image-20200202164115866.png" width=30%></p><p>下载PDF：</p><p><img src="/images/projects/java-crawler/image-20200202164146367.png" width=33%></p><h3 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h3><p>完成索引的建立之后，测试搜索引擎功能如下：</p><h4 id="Anthology-id"><a href="#Anthology-id" class="headerlink" title="Anthology id"></a>Anthology id</h4><p><img src="/images/projects/java-crawler/image-20200202164253175.png" alt="image-20200202164253175"></p><h4 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h4><p><img src="/images/projects/java-crawler/image-20200202164318666.png" width=80%></p><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p><img src="/images/projects/java-crawler/image-20200202164409163.png" alt="image-20200202164409163"></p><p> <br></p><hr><p>完整代码请见<a href="https://github.com/Iris-cyy/Java-Crawler" target="_blank" rel="noopener">github</a>，欢迎star :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本次开发的是一个学术搜索引擎，可以根据关键词从数据库中搜索相关内容，实现搜索引擎的基本功能。本程序采用Java程序设计语言，在Eclipse平台下编辑、编译与调试。通过爬虫技术获得来源于ACL学术网站&lt;a href=&quot;https://www.aclweb.org/antho
      
    
    </summary>
    
      <category term="Projects" scheme="https://iris-cyy.github.io/categories/Projects/"/>
    
    
      <category term="Projects" scheme="https://iris-cyy.github.io/tags/Projects/"/>
    
      <category term="Java" scheme="https://iris-cyy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MUA Interpreter</title>
    <link href="https://iris-cyy.github.io//Projects/2020-02-01/mua_interpreter/"/>
    <id>https://iris-cyy.github.io//Projects/2020-02-01/mua_interpreter/</id>
    <published>2020-02-01T08:31:20.000Z</published>
    <updated>2020-02-03T03:55:39.757Z</updated>
    
    <content type="html"><![CDATA[<p>MUA是ZJU编程语言原理（Principle of Programming Language）课程中用到的编程语言。本项目要做的工作是使用JAVA语言完成一个MUA语言的解释器，通过命令行与用户进行交互，解析并运行用户输入的代码。</p><p>本项目仅能够针对课程的测试点实现基本要求，但还有很多部分需要完善（例如在遇见具有语法错误的代码时，不能进行解析，而是整个程序会报错，函数的参数数量有限制，save和load的实际操作，etc.），以及有很多部分可以优化（例如各class的构造，其实有一些可以去掉），会在后续进行更新。</p><p>以下是对于该语言基本语法以及解析器实现方式的说明。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>首先要注意的是，MUA是一个解释型语言，但是和Python不同，MUA语言中，空格、tab、换行等不能标记一个语句的结束，或者分支情况。</p><h3 id="基本数据类型value"><a href="#基本数据类型value" class="headerlink" title="基本数据类型value"></a>基本数据类型value</h3><p>数字number，字word，表list，布尔bool</p><ul><li>数字的字面量以[0~9]或’-‘开头，不区分整数，浮点数</li><li>字的字面量以双引号<code>&quot;</code> 开头，不含空格，采用Unicode编码。在 <code>&quot;</code> 后的任何内容，直到空格（包括空格、tab和回车）为止的字符（不含空格），都是这个字的一部分，包括其中可能有的 <code>&quot;</code> 和 <code>[]</code> 等符号</li><li>表的字面量量以方括号 <code>[]</code> 包含，其中的元素以空格分隔；元素可是任意类型；元素类型可不一致；<ul><li>表的第一个元素和<code>[</code>之间，以及最后一个元素和<code>]</code>之间不需要由空格分隔</li><li>表中的字不需要<code>&quot;</code>引导</li><li>这是一个有三层表的字面量的例子：<code>[a [b [c d] e]]</code></li></ul></li><li>布尔量只有两个值： <code>true</code> 和 <code>false</code></li><li>数字和布尔量在计算时可以被看作是字的特殊形式，即在字面量和变量中的字，当其中的内容是数字或布尔量时，总是可以根据需要自动被转换成数字或布尔量</li></ul><h3 id="名字name"><a href="#名字name" class="headerlink" title="名字name"></a>名字name</h3><p>一个以字母开头，只含有字母和数字及下划线的字，可以用做名字，名字区分大小写。</p><p>函数名和变量名都算是name</p><p>word只有在作为name使用时需要加<code>&quot;</code>（例如在<code>make</code>、<code>save</code>、<code>print</code>、<code>isname</code>以及字表操作等等），其他时候（比如在list中，调用函数时，print里面的输出等等）不需要用<code>&quot;</code>。</p><h3 id="基本操作operation"><a href="#基本操作operation" class="headerlink" title="基本操作operation"></a>基本操作operation</h3><p>基本形式：操作名 参数</p><p>操作名是一个名字，与参数间以空格分隔。参数可以有多个，多个参数间以空格分隔。每个操作所需的参数数量是确定的，所以不需要括号或语句结束符号。有的操作有返回值，有的没有。</p><p>一个程序就是操作的序列。</p><p>基本操作有：</p><ul><li><p><code>//</code> ：注释，从//到行末均为注释</p></li><li><p><code>make &lt;name&gt; &lt;value&gt;</code> ： 将value绑定到name上，绑定后的名字位于命名空间。此文档中的基本操作的名字不能重新命名</p><blockquote><p>make “b “a  –&gt;  thing “b == a, thing :b == value of a</p></blockquote></li><li><p><code>thing &lt;name&gt;</code> ：返回word所绑定的值</p></li><li><p><code>:&lt;name&gt;</code> ：与thing相同</p><blockquote><p>:a  ==  thing “a</p></blockquote></li><li><p><code>erase &lt;name&gt;</code> ：清除word所绑定的值</p></li><li><p><code>isname &lt;word&gt;</code> ：返回word是否是一个名字，true/false</p><blockquote><p>isname “a</p></blockquote></li><li><p><code>print &lt;value&gt;</code> ：输出value</p><blockquote><p>print “a  –&gt;  a<br>print 1  –&gt;  1<br>print true  –&gt;  true<br>print :a  –&gt;  6 （如果前面make “a 6）<br>print [a b c]  –&gt;  a b c</p></blockquote></li><li><p><code>read</code> ：返回一个从标准输入读取的数字或字</p></li><li><p>运算符operator</p><ul><li><code>add</code> , <code>sub</code>, <code>mul</code> , <code>div</code> , <code>mod</code> ： <code>&lt;operator&gt; &lt;number&gt; &lt;number&gt;</code></li><li><code>eq</code> , <code>gt</code> , <code>lt</code> ： <code>&lt;operator&gt; &lt;number|word&gt; &lt;number|word&gt;</code></li><li><code>and</code> , <code>or</code> ： <code>&lt;operator&gt; &lt;bool&gt; &lt;bool&gt;</code></li><li><code>not</code> ： <code>not &lt;bool&gt;</code></li></ul></li></ul><ul><li><p><code>readlist</code> ：返回一个从标准输入读取的一行，构成一个表，行中每个以空格分隔的部分是list的一个元素</p><ul><li>用<code>readlist</code>读入的只可能是单层的表</li></ul></li></ul><ul><li><code>repeat &lt;number&gt; &lt;list&gt;</code> ：运行list中的代码number次</li></ul><h3 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><code>make &lt;name&gt; [&lt;list1&gt; &lt;list2&gt;]</code>，其中</p><ul><li>name为函数名</li><li>list1为参数表</li><li>list2为操作表</li></ul><p>以下为函数定义的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make &quot;prt [</span><br><span class="line">[a]</span><br><span class="line">[print :a]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p><code>&lt;functionName&gt; &lt;arglist&gt;</code>，其中：</p><ul><li><code>&lt;functionName&gt;</code>为make中定义的函数名，不需要双引号<code>&quot;</code></li><li><code>&lt;arglist&gt;</code>是参数表<code>&lt;arglist&gt;</code>中的值和函数定义时的<code>&lt;list1&gt;</code>中名字进行一一对应绑定</li></ul><p>以下为函数调用的例子：<code>prt &quot;hello</code></p><h4 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h4><ul><li><p>在函数中访问（读取）变量的值的时候，首先访问本地，如果本地不存在，则访问全局</p></li><li><p>在函数中做 <code>make</code> 时，永远只写本地：</p><ul><li>检查本函数内是否存在这个名字，如果存在，则对已有的变量赋值；</li><li>否，则在本地定义⼀个新的变量</li></ul></li></ul><h4 id="函数相关的操作"><a href="#函数相关的操作" class="headerlink" title="函数相关的操作"></a>函数相关的操作</h4><ul><li><p><code>output &lt;value&gt;</code> ：设定value为返回给调用者的值，但是不停止执行</p></li><li><p><code>stop</code> ：停止执行</p></li><li><code>export</code> ：将本地make的值输出到全局<ul><li>如果全局没有这个变量，则增加⼀个全局变量</li><li>如果全局已经有了同名的变量，则替换全部变量的值</li></ul></li></ul><h3 id="表达式计算"><a href="#表达式计算" class="headerlink" title="表达式计算"></a>表达式计算</h3><p>允许使用以下运算符对数字进行计算：<code>+-*/%()</code></p><p>为了方便便识别，要求表达式的外⾯面必须有括号<code>()</code>包围。</p><p>支持负数</p><blockquote><p> (5+-2)   –&gt;  3.0</p></blockquote><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul><li><code>if &lt;bool&gt; &lt;list1&gt; &lt;list2&gt;</code> ：如果bool为真，则执行list1，否则执行list2。list均可以为空表</li><li><code>isnumber &lt;value&gt;</code> ：返回value是否是数字</li><li><code>isword &lt;value&gt;</code> ：返回value是否是字</li><li><code>islist &lt;value&gt;</code> ：返回value是否是表</li><li><code>isbool &lt;value&gt;</code> ：返回value是否是布尔量</li><li><code>isempty &lt;word|list&gt;</code> : 返回word或list是否是空</li></ul><h3 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h3><ul><li><code>random &lt;number&gt;</code> ：返回[0,number)的一个随机数</li><li><code>sqrt &lt;number&gt;</code> ：返回number的平方根</li><li><code>int &lt;number&gt;</code> : floor the int</li></ul><h3 id="字表处理"><a href="#字表处理" class="headerlink" title="字表处理"></a>字表处理</h3><ul><li><p><code>word &lt;word&gt; &lt;word|number|bool&gt;</code> ：将两个word合并为一个word，第二个值可以是word、number或bool</p></li><li><p><code>sentence &lt;value1&gt; &lt;value2&gt;</code> ：将value1和value2合并成一个表，两个值的元素并列，value1的在value2的前面</p><blockquote><p>返回结果为list<br>sentence “a “b  -&gt;  a b<br>sentence [a] [b]  -&gt;  a b<br>sentence “a [b] -&gt;  a b<br>sentence [a [b c]  d] [x y]  -&gt;  a [b c] d x y</p></blockquote></li><li><p><code>list &lt;value1&gt; &lt;value2&gt;</code> ：将两个值合并为一个表，如果值为表，则不打开这个表</p><blockquote><p>list “a “b -&gt; a b<br>list [a] [b] -&gt; [a] [b]</p></blockquote></li><li><p><code>join &lt;list&gt; &lt;value&gt;</code> ：将value作为list的最后一个元素加入到list中（如果value是表，则整个value成为表的最后一个元素）</p><blockquote><p>join [a b] “c  -&gt;  a b c<br>join [a b] [c]  -&gt;  a b [c]<br>join [a b] first [c]  -&gt;  a b c</p></blockquote></li><li><p><code>first &lt;word|list&gt;</code> ：返回word的第一个字符，或list的第一个元素</p><blockquote><p>first “abc  -&gt;  a (word)<br>first [a b c]  -&gt;  a (word)<br>first [[a] b]  -&gt;  a (list)<br>first “123  -&gt;  1 (word)<br>islist first []  -&gt;  true<br>isempty first []  -&gt;  true</p></blockquote></li><li><p><code>last &lt;word|list&gt;</code> ：返回word的最后一个字符，list的最后一个元素</p></li><li><p><code>butfirst &lt;word|list&gt;</code> ：返回除第一个元素外剩下的表，或除第一个字符外剩下的字</p><blockquote><p>注意返回是list<br>islist butfirst [a b c]  -&gt;  true<br>islist butfirst [a b]  -&gt;  true</p></blockquote></li><li><p><code>butlast &lt;word|list&gt;</code> ：返回除最后一个元素外剩下的表，或除最后一个字符外剩下的字</p></li></ul><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><ul><li><p><code>wait &lt;number&gt;</code> ：等待number个ms</p></li><li><p><code>save &lt;word&gt;</code> ：保存当前命名空间在word文件中</p><blockquote><p>save “a.mua</p></blockquote></li><li><p><code>load &lt;word&gt;</code> ：从word文件中装载内容，加入当前命名空间</p></li><li><p><code>erall</code> ：清除当前命名空间的全部内容</p></li><li><p><code>poall</code> ：列出当前命名空间的全部名字</p></li></ul><h3 id="既有名字"><a href="#既有名字" class="headerlink" title="既有名字"></a>既有名字</h3><p>系统提供了一些常⽤用的量量，或可以由其他操作实现但是常用的操作，作为固有的名字。这些名字是可以被删除（erase）的。</p><ul><li><code>pi</code> ：3.14159</li><li><code>run &lt;list&gt;</code> ：运行list中的代码</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>项目中创建的class介绍如下：</p><h4 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h4><p>MUA语句中的每个单词都是一个<code>command</code>，包含<code>number</code>、<code>bool</code>、<code>list</code>、<code>word</code>、<code>operator</code>、<code>expression</code>、<code>file</code>几个类别，具有名字、类别、值（针对number、bool、list、expression，根据类别不同有不同类型的值）几个属性（其中list会被看成一个整体）。</p><blockquote><p> 例如语句 if eq thing “a 6 [print :a] [print 0]</p><table><thead><tr><th>name</th><th>type</th><th>value</th></tr></thead><tbody><tr><td>if</td><td>operation</td><td>/</td></tr><tr><td>eq</td><td>operation</td><td>/</td></tr><tr><td>thing</td><td>operation</td><td>/</td></tr><tr><td>“a</td><td>word</td><td>/</td></tr><tr><td>6</td><td>number</td><td>6 (double)</td></tr><tr><td>[print :a]</td><td>list</td><td>[print :a] (String)</td></tr><tr><td>[print 0]</td><td>list</td><td>[print 0] (String)</td></tr></tbody></table></blockquote><p><code>command</code>的构造可以有三种方式，构造一个空的command、提供name和type（在构造时根据name判断并填充value）、提供name（构造时根据name判断并填充type和value），具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">command()&#123;&#125;</span><br><span class="line"></span><br><span class="line">command(String name, String type)&#123;</span><br><span class="line">    commandName = name;</span><br><span class="line">    commandType = type;</span><br><span class="line">    setCommandValue(commandType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">command(String name)&#123;</span><br><span class="line">    commandName = name;</span><br><span class="line">    analyzeType(name);</span><br><span class="line">    setCommandValue(commandType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>analyzeType</code>是用于根据name判断command类型的方法，setCommandValue是根据name和type设置value的方法。这两个方法的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analyzeType</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> firstChar = name.charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>( (firstChar &gt;= <span class="string">'0'</span> &amp;&amp; firstChar &lt;= <span class="string">'9'</span>) || firstChar == <span class="string">'-'</span>) &#123;</span><br><span class="line">        <span class="comment">//number eg.6</span></span><br><span class="line">        commandType = <span class="string">"number"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(firstChar == <span class="string">'"'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(isNumber(name.substring(<span class="number">1</span>))) &#123;</span><br><span class="line">            <span class="comment">//number eg."6</span></span><br><span class="line">            commandName = name.substring(<span class="number">1</span>);</span><br><span class="line">            commandType = <span class="string">"number"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//word eg."ab</span></span><br><span class="line">            commandType = <span class="string">"word"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(name.equals(<span class="string">"true"</span>) || name.equals(<span class="string">"false"</span>)) &#123;</span><br><span class="line">        <span class="comment">//boolean (true/false)</span></span><br><span class="line">        commandType = <span class="string">"bool"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(firstChar == <span class="string">'['</span>)&#123;</span><br><span class="line">        <span class="comment">//list</span></span><br><span class="line">        commandType = <span class="string">"list"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(firstChar == <span class="string">'('</span>) &#123;</span><br><span class="line">        <span class="comment">//expression</span></span><br><span class="line">        commandType = <span class="string">"expression"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(name.indexOf(<span class="string">'.'</span>) != -<span class="number">1</span> &amp;&amp; name.trim().substring(name.indexOf(<span class="string">'.'</span>)).equals(<span class="string">".mua"</span>)) &#123;</span><br><span class="line">        commandType = <span class="string">"file"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//operator</span></span><br><span class="line">        commandType = <span class="string">"operator"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommandValue</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type.equals(<span class="string">"number"</span>)) &#123;</span><br><span class="line">        numValue = Double.valueOf(commandName);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"bool"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(commandName.equals(<span class="string">"true"</span>)) &#123;</span><br><span class="line">            boolValue = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            boolValue = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        listString = commandName.substring(<span class="number">1</span>, commandName.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"expression"</span>)) &#123;</span><br><span class="line">        exprString = commandName.substring(<span class="number">1</span>, commandName.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="commandStack"><a href="#commandStack" class="headerlink" title="commandStack"></a><code>commandStack</code></h4><p>输入的MUA语句会被作为一个<code>commandStack</code>类存储起来，顾名思义，<code>commandStack</code>是一个由很多<code>command</code>组成的stack，通过<code>Vector</code>来组织。例如<code>if eq thing &quot;a 6 [print :a] [print 0]</code>将会被分为七个<code>command</code>，存储在一个<code>commandStack</code>里。</p><p><code>commandStack</code>的构造包括空白构造、根据一个MUA语句进行构造两种方式，实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">commandStack()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//put a line of commands into stack</span></span><br><span class="line">commandStack(String line)&#123;</span><br><span class="line">    line = line.replace(<span class="string">":"</span>, <span class="string">"thing \""</span>).trim();</span><br><span class="line">    <span class="keyword">while</span>(!line.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        command newCom;</span><br><span class="line">        <span class="keyword">if</span>(line.charAt(<span class="number">0</span>) == <span class="string">'['</span>) &#123;</span><br><span class="line">            <span class="comment">//list</span></span><br><span class="line">            <span class="keyword">int</span> comp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(line.charAt(i) == <span class="string">'['</span>) &#123;</span><br><span class="line">                    comp--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(line.charAt(i) == <span class="string">']'</span>) &#123;</span><br><span class="line">                    comp++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(comp == <span class="number">0</span>) &#123;</span><br><span class="line">                    newCom = <span class="keyword">new</span> command((line.substring(<span class="number">0</span>, i+<span class="number">1</span>)).trim());</span><br><span class="line">                    commands.addElement(newCom);</span><br><span class="line">                    <span class="keyword">if</span>(i == line.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                        line = <span class="string">""</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        line = line.substring(i+<span class="number">1</span>).trim();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(line.charAt(<span class="number">0</span>) == <span class="string">'('</span>) &#123;</span><br><span class="line">            <span class="comment">//expression</span></span><br><span class="line">            <span class="keyword">int</span> comp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(line.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">                    comp--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(line.charAt(i) == <span class="string">')'</span>) &#123;</span><br><span class="line">                    comp++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(comp == <span class="number">0</span>) &#123;</span><br><span class="line">                    newCom = <span class="keyword">new</span> command((line.substring(<span class="number">0</span>, i+<span class="number">1</span>)).trim());</span><br><span class="line">                    commands.addElement(newCom);</span><br><span class="line">                    <span class="keyword">if</span>(i == line.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                        line = <span class="string">""</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        line = line.substring(i+<span class="number">1</span>).trim();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(line.indexOf(<span class="string">' '</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//more than one command left</span></span><br><span class="line">            newCom = <span class="keyword">new</span> command(line.substring(<span class="number">0</span>, line.indexOf(<span class="string">' '</span>)).trim());</span><br><span class="line">            commands.addElement(newCom); </span><br><span class="line">            line = line.substring(line.indexOf(<span class="string">' '</span>)+<span class="number">1</span>).trim(); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newCom = <span class="keyword">new</span> command(line);</span><br><span class="line">            commands.addElement(newCom);</span><br><span class="line">            line = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>commandStack</code>的方法仿照<code>Vector</code>，包含<code>get(index)</code>、<code>setElementAt(newCommand, index)</code>、<code>insertElementAt(newCommand, index)</code>、<code>removeElementAt(index)</code>、<code>subStack(begin, end)</code>、<code>subStack(begin)</code>，便于操作。</p><h4 id="variable"><a href="#variable" class="headerlink" title="variable"></a><code>variable</code></h4><p>变量。每个被<code>make</code>过的<code>word</code>都会被作为一个变量存储起来，包含<code>number</code>、<code>bool</code>、<code>word</code>、<code>list</code>几个类别，具有名字、类别、值（不同类别有不同类型的值）几个属性。每一种类别的变量都有一个单独的构造函数，此外还有拷贝构造，以及未赋值的变量构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//empty variable</span></span><br><span class="line">variable(String name)&#123;</span><br><span class="line">    varName = name;</span><br><span class="line">    varType = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//eg. make "a 6</span></span><br><span class="line">variable(String name, <span class="keyword">double</span> value)&#123;</span><br><span class="line">    varName = name;</span><br><span class="line">    numValue = value;</span><br><span class="line">    varType = <span class="string">"number"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//eg. make "a true</span></span><br><span class="line">variable(String name, <span class="keyword">boolean</span> bool)&#123;</span><br><span class="line">    varName = name;</span><br><span class="line">    boolValue = bool;</span><br><span class="line">    varType = <span class="string">"bool"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//eg. make "b "a, varType of b is word</span></span><br><span class="line">variable(String name, String str)&#123;</span><br><span class="line">    varName = name;</span><br><span class="line">    <span class="keyword">if</span>(str.charAt(<span class="number">0</span>) == <span class="string">'['</span>) &#123;</span><br><span class="line">        changeListStr(str);</span><br><span class="line">        varType = <span class="string">"list"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        wordName = str;</span><br><span class="line">        varType = <span class="string">"word"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//copy construction</span></span><br><span class="line">variable(variable <span class="keyword">var</span>) &#123;</span><br><span class="line">    varName = <span class="keyword">var</span>.getName();</span><br><span class="line">    varType = <span class="keyword">var</span>.getType();</span><br><span class="line">    <span class="keyword">if</span>(varType == <span class="string">"number"</span>) &#123;</span><br><span class="line">        numValue = <span class="keyword">var</span>.getNumValue();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(varType == <span class="string">"bool"</span>) &#123;</span><br><span class="line">        boolValue = <span class="keyword">var</span>.getBoolValue();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        wordName = <span class="keyword">var</span>.getWordName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有<code>getValue()</code>、<code>chageValue(newValue)</code>方法，可以用于获取和改变变量的值</p><h4 id="varStack"><a href="#varStack" class="headerlink" title="varStack"></a><code>varStack</code></h4><p><code>varStack</code> 即 <code>variable</code>组成的 stack，存储当前命名空间下的所有变量，整个程序会有一个全局的<code>varStack</code>，每个函数都有其对应的局部的<code>varStack</code>，使用<code>Vector</code>来管理。</p><p>含有<code>isname</code>方法，用于判断当前变量空间是否含有对应名字的变量。</p><p>含有往<code>varStack</code>中添加<code>variable</code>的方法，有<code>add(variable)</code>、<code>add(name)</code>、<code>add(name, value)</code>几种方式，要注意的是，如果在栈中有与新添加的变量同名的变量，则进行覆盖。</p><p>可以根据name来移除变量（<code>remove(name)</code>）、获取变量的值（<code>getValue(name)</code>）、查找对应变量（<code>find(name)</code>）。</p><p>此外，包含仿照<code>Vector</code>的方法，<code>size()</code> <code>removeElementAt(index)</code> 。</p><h4 id="function"><a href="#function" class="headerlink" title="function"></a><code>function</code></h4><p>函数。包含名字、变量列表、操作列表（分别用stack来存当前函数对应的<code>variable</code>和<code>commandStack</code>，每一句操作都是一个commandStack）</p><p>除了空白构造和拷贝构造之外，可以通过提供名字、变量列表、操作列表来构造，其中，变量列表和操作列表以<code>String</code>输入，在构造时存储在对应stack中，通过<code>Vector</code>来管理</p><h4 id="funcStack"><a href="#funcStack" class="headerlink" title="funcStack"></a><code>funcStack</code></h4><p><code>funcStack</code> 即<code>function</code>组成的 stack，存储所有的函数</p><h4 id="exprMember"><a href="#exprMember" class="headerlink" title="exprMember"></a><code>exprMember</code></h4><p>表达式中的每个成员，包含名字、类型（number/operator）、值（针对number）三个属性</p><h4 id="expression"><a href="#expression" class="headerlink" title="expression"></a><code>expression</code></h4><p>用stack存储一整句表达式，可以通过操作stack来进行运算。</p><p>要注意的是，<code>-</code>可能有减法和负数两种含义，要在构造时进行判断，如果为减法，<code>exprMember</code>的类型将是<code>operator</code>，如果是负数，则与其后面的数字一起组成新的数值，类型是<code>number</code>。</p><p>将一整句表达式拆开并存储为由<code>exprMember</code>组成的stack的构造如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">expression(String expr)&#123;</span><br><span class="line">    exprMember newMem;</span><br><span class="line">    expr = expr.trim();</span><br><span class="line">    <span class="keyword">while</span>(!expr.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(expr.charAt(<span class="number">0</span>)))&#123;</span><br><span class="line">            <span class="keyword">if</span>(expr.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, <span class="number">1</span>), <span class="string">"number"</span>);</span><br><span class="line">                members.add(newMem);</span><br><span class="line">                expr = expr.substring(<span class="number">1</span>).trim();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;expr.length(); i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!Character.isDigit(expr.charAt(i)) &amp;&amp; expr.charAt(i) != <span class="string">'.'</span> || i == expr.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i == expr.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                            newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, i+<span class="number">1</span>), <span class="string">"number"</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, i), <span class="string">"number"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        members.add(newMem);</span><br><span class="line">                        expr = expr.substring(i).trim();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(expr.charAt(<span class="number">0</span>) == <span class="string">'-'</span> &amp;&amp; (members.size() == <span class="number">0</span> || members.get(members.size()-<span class="number">1</span>).getType() == <span class="string">"operator"</span>)) &#123;</span><br><span class="line">            <span class="comment">//judge whether the '-' represents negative or minus</span></span><br><span class="line">            <span class="comment">//if it is negative, do it first</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;expr.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!Character.isDigit(expr.charAt(i))) &#123;</span><br><span class="line">                    newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, i), <span class="string">"number"</span>);</span><br><span class="line">                    members.add(newMem);</span><br><span class="line">                    expr = expr.substring(i).trim();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            newMem = <span class="keyword">new</span> exprMember(expr.substring(<span class="number">0</span>, <span class="number">1</span>), <span class="string">"operator"</span>);</span><br><span class="line">            members.add(newMem);</span><br><span class="line">            expr = expr.substring(<span class="number">1</span>).trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体实现"><a href="#整体实现" class="headerlink" title="整体实现"></a>整体实现</h3><p>整体的实现通过栈进行，分析<code>commandStack</code>中各<code>command</code>的属性，对其中的<code>operator</code>进行对应操作，取出<code>operator</code>以及对应的操作数，操作完之后把结果放回栈中。</p><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>为方便后续处理，在通过MUA语句构造<code>commandStack</code>时，将所有的<code>：</code>都替换成<code>thing &quot;</code>。</p><h4 id="读入MUA语句"><a href="#读入MUA语句" class="headerlink" title="读入MUA语句"></a>读入MUA语句</h4><p>读入时跳过所有注释</p><p>读入时要注意的是判断是否读完一整句话，如果没有读完（list或者expression，或者一句话的操作数不足），需要继续读下一行，拼起来作为完整的语句。</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>由于可能会出现多个语句在同一行的情况，因此只能从前往后运行。</p><p>判断当前operator的操作数是否被运算完全，即后面的对应数量的<code>command</code>是否都不是<code>operator</code>类型。如果都不是，说明一个语句已完全，则运行当前<code>operator</code>，否则，递归判断遇到的下一个<code>operator</code>。</p><h4 id="函数运行"><a href="#函数运行" class="headerlink" title="函数运行"></a>函数运行</h4><p>函数运行时，先按照变量列表，使用传递给函数的参数对函数变量空间的对应变量进行值改变，然后依次运行操作列表中的操作。通过依次调用<code>funcStack</code>和<code>function</code>中负责运行函数的方法进行运行。</p><p>需要注意的是：</p><ul><li><p>如果在操纵列表中出现<code>stop</code>，直接返回。</p></li><li><p>为了实现递归操作，在运行函数时使用拷贝构造函数，构造一个完全相同的新函数再运行，而非直接操作原来的函数。</p></li></ul><p>实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(func.isFunc(<span class="string">"\""</span> + oper_command.get(begin_index).getCommandName())) &#123;</span><br><span class="line">    String funcName = <span class="string">"\""</span> + oper_command.get(begin_index).getCommandName();</span><br><span class="line">    String funcVars = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//pass parameters to the function in order</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;func.funcVarNum(funcName); i++) &#123;</span><br><span class="line">        funcVars += oper_command.get(begin_index+i+<span class="number">1</span>).getCommandName() + <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    commandStack funcVarStack = <span class="keyword">new</span> commandStack(funcVars);</span><br><span class="line">    <span class="comment">//run the function</span></span><br><span class="line">    retstr = func.runFunc(funcName, funcVarStack);</span><br><span class="line">    <span class="keyword">if</span>(retstr.equals(<span class="string">""</span>) || retstr.equals(<span class="string">"STOP!!!!"</span>)) &#123;</span><br><span class="line">        <span class="comment">//no output or is stopped (in case of recursion) </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=func.funcVarNum(funcName); i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            oper_command.removeElementAt(begin_index+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(retstr);</span><br><span class="line">        oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=func.funcVarNum(funcName); i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">            oper_command.removeElementAt(begin_index+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>funcStack</code>中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">runFunc</span><span class="params">(String funcName, commandStack funcVarStack)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String ret = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//find the newly created function to run</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=functions.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(functions.get(i).getName().equals(funcName)) &#123;</span><br><span class="line">            <span class="comment">//create a same function to run (in case of recursion)</span></span><br><span class="line">            function new_func = <span class="keyword">new</span> function(functions.get(i));</span><br><span class="line">            ret = new_func.run(funcVarStack);</span><br><span class="line">            <span class="keyword">if</span>(ret == <span class="string">"STOP!!!!"</span>) &#123;</span><br><span class="line">                <span class="comment">//the function is stopped </span></span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>function</code>中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">(commandStack funcVarStack)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String ret = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> var_index = <span class="number">0</span>;</span><br><span class="line">    String varName = <span class="string">""</span>;</span><br><span class="line">    String varValue = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//passing parameters</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;getVarNum(); i++) &#123;</span><br><span class="line">        varName = funcVariable.get(i).getName();</span><br><span class="line">        varValue = funcVarStack.get(i).getCommandName();</span><br><span class="line">        funcVariable.get(i).changeValue(varValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//run each operations in order</span></span><br><span class="line">    commandStack nextComStack;</span><br><span class="line">    <span class="keyword">while</span>(funcOperation.size()!=<span class="number">0</span>) &#123;</span><br><span class="line">        nextComStack = funcOperation.get(<span class="number">0</span>);</span><br><span class="line">        ret = CommandAnalyze.judge(nextComStack, funcVariable, <span class="number">0</span>);</span><br><span class="line">        funcOperation.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//if the function is stopped</span></span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="string">"STOP!!!!"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表达式运算"><a href="#表达式运算" class="headerlink" title="表达式运算"></a>表达式运算</h4><p>为方便起见，在表达式运算中与<code>commandStack</code>中的处理相反，将所有<code>thing &quot;</code>都替换成<code>:</code>来操作。</p><p>表达式运算的几个特殊情况：</p><ul><li>处理内部含有<code>()</code>的表达式，通过递归进行</li><li>含有变量的表达式，检测到下一个字符是<code>+-*/%</code>中的一个，或者到达表达式结尾，则说明变量名结束。根据检测到的变量名，在变量空间中用对应的数值来替代</li><li>含有函数的表达式，检测函数名的方式与检测变量名类似。先运行对应函数，然后再将运算得到的值替代表达式中的函数名，运算表达式。</li></ul><p>实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">manageExpression</span><span class="params">(String expression, varStack vars)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//expression with()</span></span><br><span class="line">    expression = expression.trim();</span><br><span class="line">    expression = expression.substring(<span class="number">1</span>, expression.length()-<span class="number">1</span>);</span><br><span class="line">    expression = expression.replace(<span class="string">"thing \""</span>, <span class="string">":"</span>);</span><br><span class="line">    String result = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">//contains (), recursive</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expression.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(expression.charAt(i) == <span class="string">'('</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> comp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;expression.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(expression.charAt(j) == <span class="string">'('</span>) &#123;</span><br><span class="line">                    comp--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(expression.charAt(j) == <span class="string">')'</span>) &#123;</span><br><span class="line">                    comp++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(comp == <span class="number">0</span>) &#123;</span><br><span class="line">                    String newExp = expression.substring(i, j+<span class="number">1</span>);</span><br><span class="line">                    result = manageExpression(newExp, vars);</span><br><span class="line">                    expression = expression.substring(<span class="number">0</span>, i) + result + expression.substring(j+<span class="number">1</span>);</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//vars</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expression.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(expression.charAt(i) == <span class="string">':'</span>) &#123;</span><br><span class="line">            String varName;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;expression.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(isOper(expression.charAt(j)) || j == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                        varName = <span class="string">"\""</span> + expression.substring(i+<span class="number">1</span>, j+<span class="number">1</span>).trim();</span><br><span class="line">                        expression = expression.substring(<span class="number">0</span>,i) + vars.getValue(varName);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        varName = <span class="string">"\""</span> + expression.substring(i+<span class="number">1</span>, j).trim();</span><br><span class="line">                        expression = expression.substring(<span class="number">0</span>,i) + vars.getValue(varName) + expression.substring(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//function</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expression.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Character.isDigit(expression.charAt(i)) &amp;&amp; !isOper(expression.charAt(i)) &amp;&amp; expression.charAt(i) != <span class="string">' '</span> &amp;&amp; expression.charAt(i) != <span class="string">'.'</span>) &#123;</span><br><span class="line">            String funcName;</span><br><span class="line">            String retstr;</span><br><span class="line">            commandStack funcVarStack;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;expression.length();  j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(expression.charAt(j) == <span class="string">' '</span>) &#123;</span><br><span class="line">                    funcName = <span class="string">"\""</span> + expression.substring(i, j);</span><br><span class="line">                    <span class="comment">//single variable</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>; k&lt;expression.length(); k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(expression.charAt(k) == <span class="string">' '</span> || k == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(k == expression.length()-<span class="number">1</span>) &#123;</span><br><span class="line">                                funcVarStack = <span class="keyword">new</span> commandStack(expression.substring(j+<span class="number">1</span>, k+<span class="number">1</span>));</span><br><span class="line">                                retstr = func.runFunc(funcName, funcVarStack);</span><br><span class="line">                                expression = expression.substring(<span class="number">0</span>,i) + retstr;</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                funcVarStack = <span class="keyword">new</span> commandStack(expression.substring(j+<span class="number">1</span>, k+<span class="number">1</span>));</span><br><span class="line">                                retstr = func.runFunc(funcName, funcVarStack);</span><br><span class="line">                                expression = expression.substring(<span class="number">0</span>,i) + retstr + expression.substring(k);</span><br><span class="line">                            &#125;</span><br><span class="line">                            i--;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    expression expr = <span class="keyword">new</span> expression(expression);</span><br><span class="line">    result = expr.calculate();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>calculate()</code>是<code>expression</code>类中的方法，原理是通过<code>expression</code>中构造的栈进行运算，按顺序取<code>operator</code>，同时取出它两边的<code>number</code>作为operand进行运算，然后将新的值放回到栈中。由于表达式中只有<code>+-*/%</code>几种运算符，就根据优先级顺序，先处理<code>*/%</code>，再处理<code>+-</code>。</p><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="make-lt-name-gt-lt-value-gt-或make-lt-name-gt-lt-list1-gt-lt-list2-gt"><a href="#make-lt-name-gt-lt-value-gt-或make-lt-name-gt-lt-list1-gt-lt-list2-gt" class="headerlink" title="make &lt;name&gt; &lt;value&gt;或make &lt;name&gt; [&lt;list1&gt; &lt;list2&gt;]"></a><code>make &lt;name&gt; &lt;value&gt;</code>或<code>make &lt;name&gt; [&lt;list1&gt; &lt;list2&gt;]</code></h5><p>如果定义的是函数，创建新的函数并加入函数栈中。如果定义的是变量，创建新的变量并加入当前变量空间的变量栈中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"make"</span>:</span><br><span class="line">    command next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    command next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"list"</span>)) &#123;</span><br><span class="line">        <span class="comment">//if the second operand is a list, the first operand is the name of a function</span></span><br><span class="line">        <span class="comment">//add the function to stack</span></span><br><span class="line">        func.add(next1.getCommandName(), next2.getCommandName());</span><br><span class="line">        <span class="comment">//store the number of operands of the new function</span></span><br><span class="line">        <span class="keyword">if</span>(func.funcVarNum(next1.getCommandName()) == <span class="number">1</span>) &#123;</span><br><span class="line">            oneOperand.add(next1.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(func.funcVarNum(next1.getCommandName()) == <span class="number">2</span>) &#123;</span><br><span class="line">            twoOperand.add(next1.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(func.funcVarNum(next1.getCommandName()) == <span class="number">3</span>) &#123;</span><br><span class="line">            threeOperand.add(next1.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(func.funcVarNum(next1.getCommandName()) == <span class="number">0</span>) &#123;</span><br><span class="line">            noOperand.add(next1.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        <span class="comment">//eg. make "b "a -&gt; thing "b == a, thing :b == value of a</span></span><br><span class="line">        oper_var.add(next1.getCommandName(), next2.getCommandName());</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"number"</span>)) &#123;</span><br><span class="line">        <span class="comment">//eg. make "a 6 -&gt; put 6 in a</span></span><br><span class="line">        oper_var.add(next1.getCommandName(), next2.getNumValue());</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        oper_var.add(next1.getCommandName(), next2.getListString());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//eg. make "a true</span></span><br><span class="line">        oper_var.add(next1.getCommandName(), next2.getBoolValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//remove the used commands</span></span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="thing-lt-name-gt"><a href="#thing-lt-name-gt" class="headerlink" title="thing &lt;name&gt;"></a><code>thing &lt;name&gt;</code></h5><p>从变量栈中取出对应变量的值并取代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"thing"</span>:</span><br><span class="line">    command next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//get the next command </span></span><br><span class="line">    newCom = <span class="keyword">new</span> command(oper_var.getValue(next.getCommandName()), oper_var.getType(next.getCommandName()));</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="erase-lt-name-gt"><a href="#erase-lt-name-gt" class="headerlink" title="erase &lt;name&gt;"></a><code>erase &lt;name&gt;</code></h5><p>从变量栈中删掉对应名字的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"erase"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//remove the next command</span></span><br><span class="line">    oper_var.remove(next.getCommandName());</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="isname-lt-word-gt"><a href="#isname-lt-word-gt" class="headerlink" title="isname &lt;word&gt;"></a><code>isname &lt;word&gt;</code></h5><p>在变量栈和函数栈中都进行查找，如果当前word存在于变量栈或函数栈中，则为name</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"isname"</span>:</span><br><span class="line">    String result;</span><br><span class="line">    <span class="comment">//is a variable or a function, true, else, false</span></span><br><span class="line">    <span class="keyword">if</span>((oper_var.isname(oper_command.get(begin_index+<span class="number">1</span>).getCommandName()).equals(<span class="string">"true"</span>)) || (func.isFunc(oper_command.get(begin_index+<span class="number">1</span>).getCommandName())) ) &#123;</span><br><span class="line">        result = <span class="string">"true"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="string">"false"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newCom = <span class="keyword">new</span> command(result, <span class="string">"bool"</span>);</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="print-lt-value-gt"><a href="#print-lt-value-gt" class="headerlink" title="print &lt;value&gt;"></a><code>print &lt;value&gt;</code></h5><p>输出，要注意不同格式的输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"print"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        <span class="comment">//print a word, eg. print "a --&gt; a</span></span><br><span class="line">        System.out.println(next.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"list"</span>)) &#123;</span><br><span class="line">        System.out.println(next.getCommandName().trim().substring(<span class="number">1</span>, next.getCommandName().trim().length()-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//print number or bool, etc, eg. print 1</span></span><br><span class="line">        System.out.println(next.getCommandName());</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="read"><a href="#read" class="headerlink" title="read"></a><code>read</code></h5><p>返回从标准输入读取的数字或字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"read"</span>:</span><br><span class="line">    <span class="comment">//read in a number/word, classify it</span></span><br><span class="line">    <span class="keyword">if</span>(scan.hasNext()) &#123;</span><br><span class="line">        String input = scan.nextLine();</span><br><span class="line">        <span class="keyword">if</span>(isNumber(input)) &#123;</span><br><span class="line">            newCom = <span class="keyword">new</span> command(input.trim(), <span class="string">"number"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            newCom = <span class="keyword">new</span> command(<span class="string">'"'</span>+input.trim(), <span class="string">"word"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="readlist"><a href="#readlist" class="headerlink" title="readlist"></a><code>readlist</code></h5><p>读入单层的表</p><p>这里好像没做对，后续更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"readlist"</span>:</span><br><span class="line">    <span class="comment">//read in a list (single layer, in one line)</span></span><br><span class="line">    <span class="keyword">if</span>(scan.hasNext()) &#123;</span><br><span class="line">        String input = scan.nextLine();</span><br><span class="line">        newCom =<span class="keyword">new</span> command(input.trim(), <span class="string">"list"</span>);</span><br><span class="line">        oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="repeat-lt-number-gt-lt-list-gt"><a href="#repeat-lt-number-gt-lt-list-gt" class="headerlink" title="repeat &lt;number&gt; &lt;list&gt;"></a><code>repeat &lt;number&gt; &lt;list&gt;</code></h5><p>将<code>&lt;list&gt;</code>中的内容作为一个新的<code>commandStack</code>，进行循环操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"repeat"</span>:</span><br><span class="line">    <span class="comment">//loop</span></span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(!next1.getCommandType().equals(<span class="string">"number"</span>) || !next2.getCommandType().equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        System.out.println(<span class="string">"ERROR: repeat &lt;number&gt; &lt;list&gt;!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> repeatNum = (<span class="keyword">int</span>) next1.getNumValue(); <span class="comment">//loop times</span></span><br><span class="line">    <span class="keyword">int</span> repeatCnt = <span class="number">0</span>; <span class="comment">//the number of execution already take place</span></span><br><span class="line">    commandStack newComStack;</span><br><span class="line">    <span class="keyword">while</span>(repeatCnt != repeatNum) &#123;</span><br><span class="line">        <span class="comment">//create a new stack to store commands in the list, and run again</span></span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(next2.getListString());</span><br><span class="line">        retstr = judge(newComStack, oper_var, <span class="number">0</span>);</span><br><span class="line">        repeatCnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h5><p>包括add、sub、mul、div、mod，以add为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    newCom = <span class="keyword">new</span> command(next1.getNumValue()+next2.getNumValue()+<span class="string">""</span>, <span class="string">"number"</span>);</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h5><p>包括eq、gt、lt，以eq为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"eq"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(next1.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(next1.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(oper_var.getNumValue(next1.getCommandName()) == oper_var.getNumValue(next2.getCommandName()))&#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oper_var.getNumValue(next1.getCommandName()) == next2.getNumValue())&#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(next1.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(next1.getNumValue() == oper_var.getNumValue(next2.getCommandName()))&#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(next1.getNumValue() == next2.getNumValue())&#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h5><p>包括and、or、not，以and为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"and"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(next1.getBoolValue() &amp;&amp; next2.getBoolValue()) &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"true"</span>, <span class="string">"bool"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"false"</span>, <span class="string">"bool"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="if-lt-bool-gt-lt-list1-gt-lt-list2-gt"><a href="#if-lt-bool-gt-lt-list1-gt-lt-list2-gt" class="headerlink" title="if &lt;bool&gt; &lt;list1&gt; &lt;list2&gt;"></a><code>if &lt;bool&gt; &lt;list1&gt; &lt;list2&gt;</code></h5><p>根据条件是<code>true</code>或者<code>false</code>判断运行哪个<code>&lt;list&gt;</code>，将对应<code>&lt;list&gt;</code>中的操作作为一个新的<code>commandStack</code>进行运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"if"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    command list1 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    command list2 = oper_command.get(begin_index+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(next1.getCommandName().equals(<span class="string">"true"</span>)) &#123;</span><br><span class="line">        <span class="comment">//run the commands in list1</span></span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(list1.getListString());</span><br><span class="line">        retstr = judge(newComStack, oper_var, <span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//run the commands in list2</span></span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(list2.getListString());</span><br><span class="line">        retstr = judge(newComStack, oper_var, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">3</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="run-lt-list-gt"><a href="#run-lt-list-gt" class="headerlink" title="run &lt;list&gt;"></a><code>run &lt;list&gt;</code></h5><p>同<code>if</code>和<code>repeat</code>中的做法，将<code>&lt;list&gt;</code>视作新的<code>commandStack</code>进行运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"run"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    newComStack = <span class="keyword">new</span> commandStack(next.getListString());</span><br><span class="line">    retstr = judge(newComStack, oper_var, <span class="number">0</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="判断-1"><a href="#判断-1" class="headerlink" title="判断"></a>判断</h5><p>包括<code>isnumber</code>, <code>isword</code>, <code>islist</code>, <code>isbool</code>, <code>isempty</code>，即判断下一个<code>command</code>的类别即可，以<code>isnumber</code>为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"isnumber"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next1.getCommandType().equals(<span class="string">"number"</span>))&#123;</span><br><span class="line">        result = <span class="string">"true"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="string">"false"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newCom = <span class="keyword">new</span> command(result, <span class="string">"bool"</span>);</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="字表合并"><a href="#字表合并" class="headerlink" title="字表合并"></a>字表合并</h5><p>包括<code>word</code>, <code>sentence</code>, <code>list</code>, <code>join</code>，将后面两个字/表合并为新的表，以<code>word</code>为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"word"</span>:</span><br><span class="line">    next1 = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    next2 = oper_command.get(begin_index+<span class="number">2</span>);</span><br><span class="line">    String newword;</span><br><span class="line">    <span class="keyword">if</span>(next2.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        newword = next1.getCommandName().substring(<span class="number">1</span>) + next2.getCommandName().substring(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newword = next1.getCommandName().substring(<span class="number">1</span>) + next2.getCommandName();</span><br><span class="line">    &#125;</span><br><span class="line">    newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + newword);</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">2</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="字表提取"><a href="#字表提取" class="headerlink" title="字表提取"></a>字表提取</h5><p><code>first</code>, <code>butfirst</code>, <code>last</code>, <code>butlast</code>，提取出对应位置的字/表，按照要求进行处理之后放回栈。以<code>first</code>和<code>butfirst</code>为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"first"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        <span class="comment">//first "abc -&gt; a (word)</span></span><br><span class="line">        newCom = <span class="keyword">new</span> command(next.getCommandName().substring(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        <span class="comment">//first [a b c] -&gt; a (word)</span></span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(next.getCommandName().trim().substring(<span class="number">1</span>, next.getCommandName().trim().length()-<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//in the above example, a is recognized as an operator, not a word. but it should be a word</span></span><br><span class="line">        <span class="keyword">if</span>(newComStack.get(<span class="number">0</span>).getCommandType().equals(<span class="string">"operator"</span>)) &#123;</span><br><span class="line">            <span class="comment">//it should be a word</span></span><br><span class="line">            newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + newComStack.get(<span class="number">0</span>).getCommandName());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//first [[a] b] -&gt; [a] (list)</span></span><br><span class="line">            newCom = newComStack.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//first "123 -&gt; 1 (word)</span></span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + next.getCommandName().substring(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"butfirst"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"word"</span>)) &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + next.getCommandName().substring(<span class="number">2</span>, next.getCommandName().trim().length()));</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(next.getCommandType().equals(<span class="string">"list"</span>))&#123;</span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(next.getCommandName().trim().substring(<span class="number">1</span>, next.getCommandName().trim().length()-<span class="number">1</span>));</span><br><span class="line">        newStr = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;newComStack.size(); i++) &#123;</span><br><span class="line">                newCom = newComStack.get(i);</span><br><span class="line">                newStr += newCom.getCommandName() + <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newCom = <span class="keyword">new</span> command(<span class="string">"["</span> + newStr + <span class="string">"]"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        newCom = <span class="keyword">new</span> command(<span class="string">"\""</span> + next.getCommandName().substring(<span class="number">1</span>, next.getCommandName().trim().length()));</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.setElementAt(newCom, begin_index);</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="save-lt-word-gt"><a href="#save-lt-word-gt" class="headerlink" title="save &lt;word&gt;"></a><code>save &lt;word&gt;</code></h5><p>用了取巧的方式，只保存当前空间的变量和函数，而不是将所有代码都保存下来。可能要改。</p><p>将变量和函数变成对应<code>make</code>格式的MUA语句进行输出和保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"save"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    File fout = <span class="keyword">new</span> File(next.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">    FileWriter fw = <span class="keyword">new</span> FileWriter(fout);</span><br><span class="line"></span><br><span class="line">    variable currentVar;</span><br><span class="line">    function currentFunc;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;oper_var.size(); i++) &#123;</span><br><span class="line">        currentVar = oper_var.get(i);</span><br><span class="line">        newStr = <span class="string">"make "</span> + currentVar.getName() + <span class="string">" "</span> + currentVar.getValue() + <span class="string">"\n"</span>;</span><br><span class="line">        fw.write(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;func.size(); i++) &#123;</span><br><span class="line">        currentFunc = func.get(i);</span><br><span class="line">        newStr = <span class="string">"make "</span> + currentFunc.getName() + <span class="string">" [["</span> + currentFunc.getVarList() + <span class="string">"] ["</span> + currentFunc.getOperList() + <span class="string">"]]\n"</span>;</span><br><span class="line">        fw.write(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">    fw.close();</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="load-lt-word-gt"><a href="#load-lt-word-gt" class="headerlink" title="load &lt;word&gt;"></a><code>load &lt;word&gt;</code></h5><p>读取对应文件，依次运行其中的语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"load"</span>:</span><br><span class="line">    next = oper_command.get(begin_index+<span class="number">1</span>);</span><br><span class="line">    FileReader fr = <span class="keyword">new</span> FileReader(next.getCommandName().substring(<span class="number">1</span>));</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">    <span class="keyword">while</span>((newStr = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        newComStack = <span class="keyword">new</span> commandStack(newStr);</span><br><span class="line">        judge(newComStack, <span class="keyword">var</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index+<span class="number">1</span>);</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="erall"><a href="#erall" class="headerlink" title="erall"></a><code>erall</code></h5><p>清空变量栈和函数栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"erall"</span>:</span><br><span class="line">    <span class="keyword">while</span>(oper_var.size()!=<span class="number">0</span>) &#123;</span><br><span class="line">        oper_var.removeElementAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(func.size()!=<span class="number">0</span>) &#123;</span><br><span class="line">        func.removeElementAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h5 id="poall"><a href="#poall" class="headerlink" title="poall"></a><code>poall</code></h5><p>列出变量栈和函数栈的全部内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"poall"</span>:</span><br><span class="line">    System.out.print(<span class="string">"variables: "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;oper_var.size(); i++) &#123;</span><br><span class="line">        System.out.print(oper_var.get(i).getName());</span><br><span class="line">        <span class="keyword">if</span>(i != oper_var.size()-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.print(<span class="string">"functions: "</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;func.size(); i++) &#123;</span><br><span class="line">        System.out.print(func.get(i).getName());</span><br><span class="line">        <span class="keyword">if</span>(i != func.size()-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    oper_command.removeElementAt(begin_index);</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><br></p><hr><p>完整代码请见<a href="https://github.com/Iris-cyy/MUA-Interpreter/" target="_blank" rel="noopener">github</a>，欢迎star :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MUA是ZJU编程语言原理（Principle of Programming Language）课程中用到的编程语言。本项目要做的工作是使用JAVA语言完成一个MUA语言的解释器，通过命令行与用户进行交互，解析并运行用户输入的代码。&lt;/p&gt;
&lt;p&gt;本项目仅能够针对课程的测试
      
    
    </summary>
    
      <category term="Projects" scheme="https://iris-cyy.github.io/categories/Projects/"/>
    
    
      <category term="Projects" scheme="https://iris-cyy.github.io/tags/Projects/"/>
    
      <category term="Java" scheme="https://iris-cyy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1003 Emergency</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-01-29/pat_1003/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-01-29/pat_1003/</id>
    <published>2020-01-29T08:29:00.000Z</published>
    <updated>2020-01-31T12:39:52.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: $N (≤500)$ - the number of cities (and the cities are numbered from 0 to $N$−1), $M$ - the number of roads, $C_1$ and $C_2$ - the cities that you are currently in and that you must save, respectively. The next line contains <em>N</em> integers, where the $i$-th integer is the number of rescue teams in the $i$-th city. Then $M$ lines follow, each describes a road with three integers $c_1$, $c_2$ and $L$, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from $C_1$ to $C_2$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line two numbers: the number of different shortest paths between $C_1$ and $C_2​$, and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>5 6 0 2<br>1 2 1 5 3<br>0 1 1<br>0 2 2<br>0 3 1<br>1 2 1<br>2 4 1<br>3 4 1</p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>2 4</p></blockquote><p><br></p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这是图算法里最短路径问题的变形。</p><p>因为节点数不太大，所以用邻接矩阵来存储路径（其实是懒得动脑）。</p><p>并且因为懒得动脑不想写Dijkstra，就用dfs来遍历，遍历到目的地之后比较路径长度和救援队数量，满足条件则更新对应变量。如果不是目的地则继续往前搜索直到搜不到新的节点。</p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> M; <span class="comment">//number of roads</span></span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">//number of cities</span></span><br><span class="line"><span class="keyword">int</span> C1, C2; <span class="comment">//outset, desitination</span></span><br><span class="line"><span class="keyword">int</span> rt_num[MAXN]; <span class="comment">//number of rescue teams in each city</span></span><br><span class="line"><span class="keyword">int</span> road[MAXN][MAXN]; <span class="comment">//Adjacency matrix</span></span><br><span class="line"><span class="keyword">int</span> visited[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> shortest_path;</span><br><span class="line"><span class="keyword">int</span> max_rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    M = N = C1 = C2 = cnt = max_rt = <span class="number">0</span>;</span><br><span class="line">    shortest_path = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXN; i++)&#123;</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">        rt_num[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;MAXN; j++)&#123;</span><br><span class="line">            road[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> <span class="built_in">point</span>, <span class="keyword">int</span> length, <span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    visited[<span class="built_in">point</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(length &gt; shortest_path)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">point</span> == C2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; shortest_path)&#123;</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">            shortest_path = length;</span><br><span class="line">            max_rt = rt;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == shortest_path)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(rt &gt; max_rt)&#123;</span><br><span class="line">                max_rt = rt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(road[<span class="built_in">point</span>][i] != INF &amp;&amp; visited[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                dfs(i, length+road[<span class="built_in">point</span>][i], rt+rt_num[i]);</span><br><span class="line">                visited[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; C1 &gt;&gt; C2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; rt_num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> start, <span class="built_in">end</span>, length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; start &gt;&gt; <span class="built_in">end</span> &gt;&gt; length;</span><br><span class="line">        road[start][<span class="built_in">end</span>] = length;</span><br><span class="line">        road[<span class="built_in">end</span>][start] = length;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(C1, <span class="number">0</span>, rt_num[C1]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">" "</span> &lt;&lt; max_rt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;As an emergency rescue team leader of a city, you 
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT】目录</title>
    <link href="https://iris-cyy.github.io//PAT/index/2020-01-29/pat_index/"/>
    <id>https://iris-cyy.github.io//PAT/index/2020-01-29/pat_index/</id>
    <published>2020-01-29T07:34:25.000Z</published>
    <updated>2020-02-04T14:20:17.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PAT-甲级"><a href="#PAT-甲级" class="headerlink" title="PAT 甲级"></a>PAT 甲级</h2><table><thead><tr><th style="text-align:center">No.</th><th style="text-align:center">题目</th><th style="text-align:center">Intro</th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">1001</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-26/pat_1001/">A+B Fromat</a></td><td style="text-align:center">字符串</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center">1002</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-28/pat_1002/">A+B for Polynomials</a></td><td style="text-align:center">多项式求和</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center">1003</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-01-29/pat_1003/">Emergency</a></td><td style="text-align:center">图，最短路径</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center">1004</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-02-04/pat_1004/">Counting Leaves</a></td><td style="text-align:center">树，层序遍历</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center">1005</td><td style="text-align:center"><a href="https://iris-cyy.github.io/PAT/Advanced/2020-02-04/pat_1005/">Spell It Right</a></td><td style="text-align:center">字符串</td><td style="text-align:center"></td><td style="text-align:center">c++</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PAT-甲级&quot;&gt;&lt;a href=&quot;#PAT-甲级&quot; class=&quot;headerlink&quot; title=&quot;PAT 甲级&quot;&gt;&lt;/a&gt;PAT 甲级&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;No.&lt;/t
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="index" scheme="https://iris-cyy.github.io/categories/PAT/index/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【PAT-Advanced】1002 A+B for Polynomials</title>
    <link href="https://iris-cyy.github.io//PAT/Advanced/2020-01-28/pat_1002/"/>
    <id>https://iris-cyy.github.io//PAT/Advanced/2020-01-28/pat_1002/</id>
    <published>2020-01-28T12:22:18.000Z</published>
    <updated>2020-01-29T07:35:57.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>This time, you are supposed to find <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: $K \; N_1 \; a_{N_1} \; N_2 \; a_{N_2} \; … \; N_K \; a_{N_K}$, where $K$ is the number of nonzero terms in the polynomial, $N_i$ and $a_{N_i} (i=1,2,⋯,K)$ are the exponents and coefficients, respectively. It is given that $1≤K≤10$，$0≤N_K&lt;⋯&lt;N_2&lt;N_1≤1000$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><blockquote><p>2  1  2.4  0  3.2<br>2  2  1.5  1  0.5   </p></blockquote><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><blockquote><p>3  2  1.5  1  2.9  0  3.2</p></blockquote><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>使用数组来存储结果多项式的信息，数组的下标为指数，值为系数。</p><p>题目中要求保留两位小数，方法如下：</p><p><code>cout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(1) &lt;&lt; ...</code></p><p>实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> poly[MAX];</span><br><span class="line">    <span class="keyword">int</span> first = MAX;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAX; i++)&#123;</span><br><span class="line">        poly[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n1, n2;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span>;</span><br><span class="line">    <span class="keyword">double</span> coe;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n1; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; <span class="built_in">exp</span> &gt;&gt; coe;</span><br><span class="line">        poly[<span class="built_in">exp</span>] += coe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n2; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; <span class="built_in">exp</span> &gt;&gt; coe;</span><br><span class="line">        poly[<span class="built_in">exp</span>] += coe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=MAX<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first == MAX)&#123;</span><br><span class="line">                first = i;</span><br><span class="line">            &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">if</span>(cnt != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=first; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(poly[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; poly[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;This time, you are supposed to find &lt;em&gt;A&lt;/em&gt;+&lt;em
      
    
    </summary>
    
      <category term="PAT" scheme="https://iris-cyy.github.io/categories/PAT/"/>
    
      <category term="Advanced" scheme="https://iris-cyy.github.io/categories/PAT/Advanced/"/>
    
    
      <category term="PAT" scheme="https://iris-cyy.github.io/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】External Sorting</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/external_sort/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/external_sort/</id>
    <published>2020-01-27T04:56:59.000Z</published>
    <updated>2020-01-27T05:02:45.386Z</updated>
    
    <content type="html"><![CDATA[<p>number of passes: $1+ \lceil log_2 (N/M) \rceil$<br>seek time: O(number of passes)</p><p><strong>a k-way merge</strong><br>number of passes: $1+ \lceil log_k (N/M) \rceil$<br>require 2k tapes</p><p><strong>polyphase merge</strong><br>require k+1 tapes</p><p><strong>Huffman tree</strong><br>Total merge time = O ( the weighted external path length )</p><p>If the number of runs is a Fibonacci number $F_N$, then the best way to distribute them is to split them into $F_{N–1}$ and $F_{N–2}$ .<br>For a k-way merge, $F_N^{(k)} = F_{N-1}^{(k)}+F_{N-2}^{(k)}$, where $F_N^{(k)}=0 ; (0 \leq N \leq k-2), F_{k-1}^{(k)}=1$<br><br></p><hr><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><ol><li><p><img src="/images/ads/external-sort/ex1.png" alt="ex1"></p></li><li></li></ol><p><img src="/images/ads/external-sort/ex2.png" alt="ex2"></p><p>hardware</p><p>外部排序主要开销在I/O上</p><ol start="3"><li><p><img src="/images/ads/external-sort/ex3.png" alt="ex3"></p></li></ol><p>$\lceil 1+log_2(100,000,000 \times 256 \div 128 \div 10^6) \rceil = 9$ </p><ol start="4"><li><p><img src="/images/ads/external-sort/ex4.png" alt="ex4"></p></li></ol><p>Huffman tree，每次挑最短的两条链合并</p><ol start="5"><li><p><img src="/images/ads/external-sort/ex5.png" alt="ex5"></p></li></ol><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/ailunlee/article/details/84548950" target="_blank" rel="noopener">https://blog.csdn.net/ailunlee/article/details/84548950</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;number of passes: $1+ \lceil log_2 (N/M) \rceil$&lt;br&gt;seek time: O(number of passes)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a k-way merge&lt;/strong&gt;&lt;br&gt;number of pas
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Splay Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/splay/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/splay/</id>
    <published>2020-01-27T04:55:12.000Z</published>
    <updated>2020-01-27T04:56:30.527Z</updated>
    
    <content type="html"><![CDATA[<p>  将被查找的节点置于根的位置</p><p><img src="/images/ads/splay/sp1.png" alt="sp1"></p><h2 id="deletion"><a href="#deletion" class="headerlink" title="deletion"></a>deletion</h2><ul><li>find x</li><li>remove x</li><li>findmax ( $T_L$ )</li><li>make $T_R$ the right child of the root of $T_L$</li></ul><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51512589" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51512589</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  将被查找的节点置于根的位置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ads/splay/sp1.png&quot; alt=&quot;sp1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;deletion&quot;&gt;&lt;a href=&quot;#deletion&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Amortized Analysis</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/amortized/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/amortized/</id>
    <published>2020-01-27T04:52:51.000Z</published>
    <updated>2020-01-27T04:54:44.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/ads/amortizedam1.png" alt="am1"></p><ul><li>聚合分析</li><li>核算法</li><li>势能法<br>$\hat c_i - c_i = credit = \Phi (D_i)- \Phi (D_{i-1})$<br>$\sum \hat c_i = \sum c_i + \Phi(D-i) - \Phi(D_{i-1})$</li></ul><p>合并两个skew heap摊还时间为O(logN)<br><br></p><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p><img src="/images/ads/amortized/ex1.png" alt="ex1"><br>C<br>A light child has at most half weight of its parents. Thus if there are k light nodes not including x along the path from x to y, $w(y) \leq w(x)/2^k$ ( $k \leq log \frac{w(x)}{w(y)}$ )<br>$\Phi$ = the total number of right heavy nodes it contains<br>By lemma 2, any path in a skew heap contains only O(logn) light nodes<br>Any heavy node on such a path is converted from right to left by causing a drop of one in the potential<br>Two heaps $h_1$ and $h_2$, containing $n_1$ and $n_2$ items<br>$n = n_1 + n_2$<br>By lemma 1, the total number of light nodes is at most $2 \lfloor logn \rfloor -1$<br>Let $k_1$ and $k_2$ be the number of heavy nodes on the right path of $h_1$ and $h_2$, and $k_3$ be the number of nodes that become right heavy children of nodes on the merge path.<br>By lemma 2, $k_3 \leq \lfloor logn \rfloor$<br>the number of node on the merge path is at most<br>$c_i \leq 2+ \lfloor logn_1 \rfloor + k_1 + \lfloor logn_2 \rfloor + k_2 \leq  1 + 2 \lfloor logn \rfloor + k_1 + k_2$<br>The increase in the potential caused by the merge is $\Delta \Phi = k_3 - k_2 - k_1 = \lfloor logn \rfloor - k_1 - k_2$<br>This the amortized is at most $3 \lfloor logn \rfloor + 1​$</p><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51517446" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51517446</a></p><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/ads/amortizedam1.png&quot; alt=&quot;am1&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;聚合分析&lt;/li&gt;
&lt;li&gt;核算法&lt;/li&gt;
&lt;li&gt;势能法&lt;br&gt;$\hat c_i - c_i = credit = \Phi (D_i)- 
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】Red-Black Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/rbtree/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/rbtree/</id>
    <published>2020-01-27T04:44:12.000Z</published>
    <updated>2020-01-27T04:52:23.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A red-black tree is a binary search tree that satisfies the following red-black properties:</p><p>(1)  Every node is either red or black.</p><p>(2)  The root is black.</p><p>(3)  Every leaf (NIL) is black.</p><p>(4)  If a node is red, then both its children are black.</p><p>(5)  For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.</p><p>The <strong>black-height</strong> of any node x, denoted by bh(x), is the number of black nodes on any simple path from x (x not included) down to a leaf.  bh(Tree) = bh(root).</p><p><strong>A red-black tree with n internal nodes has height at most 2log(n+1).</strong></p><p>红黑树没有左右子树高度差小于等于1的条件！</p><p><img src="/images/ads/rbTree/rb1.png" alt="rb1"></p><h2 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h2><p>考虑它的叔叔，维护的主要是颜色（性质4）<br>bottom-up</p><p>情况1：N为红，P为红（GP一定为黑），U为红。<br>令X = T.root,在向下遍历的过程中，我们如果遇到X.right.color = x.left.color = RED时我们将x与它孩子的颜色翻转，即把x涂成红色，把x.right和x.left涂成黑色。如果x的父亲为黑色，没有违反性质；如果x的父亲为红色，那么可以把x当成新插入的红色结点N，那么只需要处理情况2即可。</p><p>情况2：N，P都为红（GP一定为黑)，U为黑<br>此情况可分为镜像的四种，可通过旋转转为如下<br><img src="/images/ads/rbTree/rb2.png" width=10%><br>通过交换GP与P的颜色，然后调用right_rotate(T,GP)，此时不再违反任何性质。<br><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RB-INSERT-FIXUP(T,z)</span></span><br><span class="line"><span class="keyword">while</span> z.p.color == RED </span><br><span class="line">  <span class="keyword">if</span> z.p == z.p.p.left</span><br><span class="line">    y = z.p.p.right </span><br><span class="line">    <span class="keyword">if</span> y.color == RED</span><br><span class="line">      z.p.color = BLACK   <span class="comment">//case 1</span></span><br><span class="line">      y.color = BLACK     <span class="comment">//case 1</span></span><br><span class="line">      z.p.p.color = RED   <span class="comment">//case 1</span></span><br><span class="line">      z = z.p.p           <span class="comment">//case 1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> z == z.p.right</span><br><span class="line">      z = z.p             <span class="comment">//case 2</span></span><br><span class="line">      LEFT-ROTATE(T,z)    <span class="comment">//case 2</span></span><br><span class="line">    z.p.color = BLACK     <span class="comment">//case 3</span></span><br><span class="line">    z.p.p.color = RED     <span class="comment">//case 3</span></span><br><span class="line">    RIGHT-ROTATE(T,z.p.p) <span class="comment">//case 3</span></span><br><span class="line">  <span class="keyword">else</span> (same as then clause with <span class="string">"right"</span> <span class="keyword">and</span> <span class="string">"left"</span> exchanged</span><br><span class="line">T.root.color = BLACK</span><br></pre></td></tr></table></figure><p><img src="/images/ads/rbTree/rb3.png" alt="rb3"></p><p>(a) A node z after insertion. Because both z and its parent z.p are red, a violation of property 4 occurs. Since z’s uncle y is red, case 1 in the code applies. We recolor nodes and move the pointer z up the tree, resulting in the tree shown in (b). Once again, z and its parent are both red, but z’s uncle y is black. Since z is the right child of z.p, case 2 applies. We perform a left rotation, and the tree that results is shown in (c). Now, z is the left child of its parent, and case 3 applies. Recoloring and right rotation yield the tree in (d), which is a legal red-black tree.</p><p><strong>Time Complexity: O(log n)</strong></p><h2 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h2><p>考虑它的兄弟,维护的主要是黑色结点数量（性质5）。<br>top-down<br><strong>Time complexity: O(log n)</strong><br><img src="/images/ads/rbTree/rb4.png" alt="rb4"></p><br><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED      0    <span class="comment">// 红色节点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLACK    1    <span class="comment">// 黑色节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> color;        <span class="comment">// 颜色(RED 或 BLACK)</span></span><br><span class="line">    Type   key;                    <span class="comment">// 关键字(键值)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">left</span>;</span>    <span class="comment">// 左孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">right</span>;</span>    <span class="comment">// 右孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">parent</span>;</span>    <span class="comment">// 父结点</span></span><br><span class="line">&#125;Node, *RBTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的根</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span>&#123;</span></span><br><span class="line">    Node *node;</span><br><span class="line">&#125;RBRoot;</span><br></pre></td></tr></table></figure><h3 id="left-rotation"><a href="#left-rotation" class="headerlink" title="left-rotation"></a>left-rotation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(x)进行左旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左旋示意图(对节点x进行左旋)：</span></span><br><span class="line"><span class="comment"> *      px                              px</span></span><br><span class="line"><span class="comment"> *     /                               /</span></span><br><span class="line"><span class="comment"> *    x                               y                </span></span><br><span class="line"><span class="comment"> *   /  \      --(左旋)--&gt;           / \                #</span></span><br><span class="line"><span class="comment"> *  lx   y                          x  ry     </span></span><br><span class="line"><span class="comment"> *     /   \                       /  \</span></span><br><span class="line"><span class="comment"> *    ly   ry                     lx  ly  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_left_rotate</span><span class="params">(RBRoot *root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x的右孩子为y</span></span><br><span class="line">    Node *y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></span><br><span class="line">    <span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        y-&gt;left-&gt;parent = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></span><br><span class="line">    y-&gt;parent = x-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = y;            // 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">        root-&gt;node = y;            <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;parent-&gt;left == x)</span><br><span class="line">            x-&gt;parent-&gt;left = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x-&gt;parent-&gt;right = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 “x” 设为 “y的左孩子”</span></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    <span class="comment">// 将 “x的父节点” 设为 “y”</span></span><br><span class="line">    x-&gt;parent = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="right-rotation"><a href="#right-rotation" class="headerlink" title="right-rotation"></a>right-rotation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(y)进行右旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 右旋示意图(对节点y进行左旋)：</span></span><br><span class="line"><span class="comment"> *            py                               py</span></span><br><span class="line"><span class="comment"> *           /                                /</span></span><br><span class="line"><span class="comment"> *          y                                x                  </span></span><br><span class="line"><span class="comment"> *         /  \      --(右旋)--&gt;            /  \                     #</span></span><br><span class="line"><span class="comment"> *        x   ry                           lx   y  </span></span><br><span class="line"><span class="comment"> *       / \                                   / \                   #</span></span><br><span class="line"><span class="comment"> *      lx  rx                                rx  ry</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_right_rotate</span><span class="params">(RBRoot *root, Node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x是当前节点的左孩子。</span></span><br><span class="line">    Node *x = y-&gt;left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></span><br><span class="line">    <span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></span><br><span class="line">    y-&gt;left = x-&gt;right;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        x-&gt;right-&gt;parent = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></span><br><span class="line">    x-&gt;parent = y-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;parent == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = x;            // 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">        root-&gt;node = x;            <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == y-&gt;parent-&gt;right)</span><br><span class="line">            y-&gt;parent-&gt;right = x;    <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;parent-&gt;left = x;    <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y” 设为 “x的右孩子”</span></span><br><span class="line">    x-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父节点” 设为 “x”</span></span><br><span class="line">    y-&gt;parent = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加节点：将节点(node)插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *y = <span class="literal">NULL</span>;</span><br><span class="line">    Node *x = root-&gt;node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    rb_parent(node) = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; y-&gt;key)</span><br><span class="line">            y-&gt;left = node;                <span class="comment">// 情况2：若“node所包含的值” &lt; “y所包含的值”，则将node设为“y的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;right = node;            <span class="comment">// 情况3：(“node所包含的值” &gt;= “y所包含的值”)将node设为“y的右孩子” </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;node = node;                <span class="comment">// 情况1：若y是空节点，则将node设为根</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置节点的颜色为红色</span></span><br><span class="line">    node-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></span><br><span class="line">    rbtree_insert_fixup(root, node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert-fixup"><a href="#insert-fixup" class="headerlink" title="insert-fixup"></a>insert-fixup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树插入修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert_fixup</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *parent, *gparent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></span><br><span class="line">    <span class="keyword">while</span> ((parent = rb_parent(node)) &amp;&amp; rb_is_red(parent))</span><br><span class="line">    &#123;</span><br><span class="line">        gparent = rb_parent(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若“父节点”是“祖父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">if</span> (parent == gparent-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;right;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;right == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_right_rotate(root, gparent);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span><span class="comment">//若“z的父节点”是“z的祖父节点的右孩子”</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;left;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_left_rotate(root, gparent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将根节点设为黑色</span></span><br><span class="line">    rb_set_black(root-&gt;node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     node 删除的结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbtree_delete</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *child, *parent;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></span><br><span class="line">    <span class="keyword">if</span> ( (node-&gt;left!=<span class="literal">NULL</span>) &amp;&amp; (node-&gt;right!=<span class="literal">NULL</span>) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></span><br><span class="line">        <span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></span><br><span class="line">        Node *replace = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取后继节点</span></span><br><span class="line">        replace = replace-&gt;right;</span><br><span class="line">        <span class="keyword">while</span> (replace-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            replace = replace-&gt;left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></span><br><span class="line">        <span class="keyword">if</span> (rb_parent(node))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rb_parent(node)-&gt;left == node)</span><br><span class="line">                rb_parent(node)-&gt;left = replace;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rb_parent(node)-&gt;right = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="comment">// "node节点"是根节点，更新根节点。</span></span><br><span class="line">            root-&gt;node = replace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></span><br><span class="line">        <span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></span><br><span class="line">        child = replace-&gt;right;</span><br><span class="line">        parent = rb_parent(replace);</span><br><span class="line">        <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">        color = rb_color(replace);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></span><br><span class="line">        <span class="keyword">if</span> (parent == node)</span><br><span class="line">        &#123;</span><br><span class="line">            parent = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// child不为空</span></span><br><span class="line">            <span class="keyword">if</span> (child)</span><br><span class="line">                rb_set_parent(child, parent);</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line"></span><br><span class="line">            replace-&gt;right = node-&gt;right;</span><br><span class="line">            rb_set_parent(node-&gt;right, replace);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replace-&gt;parent = node-&gt;parent;</span><br><span class="line">        replace-&gt;color = node-&gt;color;</span><br><span class="line">        replace-&gt;left = node-&gt;left;</span><br><span class="line">        node-&gt;left-&gt;parent = replace;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">            rbtree_delete_fixup(root, child, parent);</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left !=<span class="literal">NULL</span>)</span><br><span class="line">        child = node-&gt;left;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        child = node-&gt;right;</span><br><span class="line"></span><br><span class="line">    parent = node-&gt;parent;</span><br><span class="line">    <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">    color = node-&gt;color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child)</span><br><span class="line">        child-&gt;parent = parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "node节点"不是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent-&gt;right = child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root-&gt;node = child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">        rbtree_delete_fixup(root, child, parent);</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delete-fixup"><a href="#delete-fixup" class="headerlink" title="delete-fixup"></a>delete-fixup</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树删除修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 待修正的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_delete_fixup</span><span class="params">(RBRoot *root, Node *node, Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((!node || rb_is_black(node)) &amp;&amp; node != root-&gt;node)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;right;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;right || rb_is_black(other-&gt;right))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;left);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_right_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;right);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;left || rb_is_black(other-&gt;left))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是黑色，右孩子为红色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;right);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_left_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的左孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;left);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        rb_set_black(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rbtree-h"><a href="#rbtree-h" class="headerlink" title="rbtree.h"></a>rbtree.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _RED_BLACK_TREE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _RED_BLACK_TREE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED        0    <span class="comment">// 红色节点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLACK    1    <span class="comment">// 黑色节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> color;        <span class="comment">// 颜色(RED 或 BLACK)</span></span><br><span class="line">    Type   key;                    <span class="comment">// 关键字(键值)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">left</span>;</span>    <span class="comment">// 左孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">right</span>;</span>    <span class="comment">// 右孩子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RBTreeNode</span> *<span class="title">parent</span>;</span>    <span class="comment">// 父结点</span></span><br><span class="line">&#125;Node, *RBTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树的根</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span>&#123;</span></span><br><span class="line">    Node *node;</span><br><span class="line">&#125;RBRoot;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建红黑树，返回"红黑树的根"！</span></span><br><span class="line"><span class="function">RBRoot* <span class="title">create_rbtree</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁红黑树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结点插入到红黑树中。插入成功，返回0；失败返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除结点(key为节点的值)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"><span class="comment">// 中序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"><span class="comment">// 后序遍历"红黑树"</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (递归实现)查找"红黑树"中键值为key的节点。找到的话，返回0；否则，返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"><span class="comment">// (非递归实现)查找"红黑树"中键值为key的节点。找到的话，返回0；否则，返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iterative_rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回最小结点的值(将值保存到val中)。找到的话，返回0；否则返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_minimum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"><span class="comment">// 返回最大结点的值(将值保存到val中)。找到的话，返回0；否则返回-1。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_maximum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印红黑树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_rbtree</span><span class="params">(RBRoot *root)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="Rbtree-c"><a href="#Rbtree-c" class="headerlink" title="Rbtree.c"></a>Rbtree.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C语言实现的红黑树(Red Black Tree)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author skywang</span></span><br><span class="line"><span class="comment"> * @date 2013/11/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rbtree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_parent(r)   ((r)-&gt;parent)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_color(r) ((r)-&gt;color)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_is_red(r)   ((r)-&gt;color==RED)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_is_black(r)  ((r)-&gt;color==BLACK)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_black(r)  do &#123; (r)-&gt;color = BLACK; &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_red(r)  do &#123; (r)-&gt;color = RED; &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_parent(r,p)  do &#123; (r)-&gt;parent = (p); &#125; while (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rb_set_color(r,c)  do &#123; (r)-&gt;color = (c); &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建红黑树，返回"红黑树的根"！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">RBRoot* <span class="title">create_rbtree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RBRoot *root = (RBRoot *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RBRoot));</span><br><span class="line">    root-&gt;node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 前序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">        preorder(tree-&gt;left);</span><br><span class="line">        preorder(tree-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder_rbtree</span><span class="params">(RBRoot *root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        preorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 中序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inorder(tree-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">        inorder(tree-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder_rbtree</span><span class="params">(RBRoot *root)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        inorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 后序遍历"红黑树"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        postorder(tree-&gt;left);</span><br><span class="line">        postorder(tree-&gt;right);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, tree-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        postorder(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (递归实现)查找"红黑树x"中键值为key的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">search</span><span class="params">(RBTree x, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="literal">NULL</span> || x-&gt;key==key)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; x-&gt;key)</span><br><span class="line">        <span class="keyword">return</span> search(x-&gt;left, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> search(x-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        <span class="keyword">return</span> search(root-&gt;node, key)? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (非递归实现)查找"红黑树x"中键值为key的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">iterative_search</span><span class="params">(RBTree x, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((x!=<span class="literal">NULL</span>) &amp;&amp; (x-&gt;key!=key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iterative_rbtree_search</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        <span class="keyword">return</span> iterative_search(root-&gt;node, key) ? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 查找最小结点：返回tree为根结点的红黑树的最小结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">minimum</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tree-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        tree = tree-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_minimum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        node = minimum(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    *val = node-&gt;key;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 查找最大结点：返回tree为根结点的红黑树的最大结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">maximum</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(tree-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        tree = tree-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rbtree_maximum</span><span class="params">(RBRoot *root, <span class="keyword">int</span> *val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root)</span><br><span class="line">        node = maximum(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    *val = node-&gt;key;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 找结点(x)的后继结点。即，查找"红黑树中数据值大于该结点"的"最小结点"。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">rbtree_successor</span><span class="params">(RBTree x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果x存在右孩子，则"x的后继结点"为 "以其右孩子为根的子树的最小结点"。</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> minimum(x-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x没有右孩子。则x有以下两种可能：</span></span><br><span class="line">    <span class="comment">// (01) x是"一个左孩子"，则"x的后继结点"为 "它的父结点"。</span></span><br><span class="line">    <span class="comment">// (02) x是"一个右孩子"，则查找"x的最低的父结点，并且该父结点要具有左孩子"，找到的这个"最低的父结点"就是"x的后继结点"。</span></span><br><span class="line">    Node* y = x-&gt;parent;</span><br><span class="line">    <span class="keyword">while</span> ((y!=<span class="literal">NULL</span>) &amp;&amp; (x==y-&gt;right))</span><br><span class="line">    &#123;</span><br><span class="line">        x = y;</span><br><span class="line">        y = y-&gt;parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 找结点(x)的前驱结点。即，查找"红黑树中数据值小于该结点"的"最大结点"。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">rbtree_predecessor</span><span class="params">(RBTree x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果x存在左孩子，则"x的前驱结点"为 "以其左孩子为根的子树的最大结点"。</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> maximum(x-&gt;left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x没有左孩子。则x有以下两种可能：</span></span><br><span class="line">    <span class="comment">// (01) x是"一个右孩子"，则"x的前驱结点"为 "它的父结点"。</span></span><br><span class="line">    <span class="comment">// (01) x是"一个左孩子"，则查找"x的最低的父结点，并且该父结点要具有右孩子"，找到的这个"最低的父结点"就是"x的前驱结点"。</span></span><br><span class="line">    Node* y = x-&gt;parent;</span><br><span class="line">    <span class="keyword">while</span> ((y!=<span class="literal">NULL</span>) &amp;&amp; (x==y-&gt;left))</span><br><span class="line">    &#123;</span><br><span class="line">        x = y;</span><br><span class="line">        y = y-&gt;parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(x)进行左旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左旋示意图(对节点x进行左旋)：</span></span><br><span class="line"><span class="comment"> *      px                              px</span></span><br><span class="line"><span class="comment"> *     /                               /</span></span><br><span class="line"><span class="comment"> *    x                               y                </span></span><br><span class="line"><span class="comment"> *   /  \      --(左旋)--&gt;           / \                #</span></span><br><span class="line"><span class="comment"> *  lx   y                          x  ry     </span></span><br><span class="line"><span class="comment"> *     /   \                       /  \</span></span><br><span class="line"><span class="comment"> *    ly   ry                     lx  ly  </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_left_rotate</span><span class="params">(RBRoot *root, Node *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x的右孩子为y</span></span><br><span class="line">    Node *y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的左孩子” 设为 “x的右孩子”；</span></span><br><span class="line">    <span class="comment">// 如果y的左孩子非空，将 “x” 设为 “y的左孩子的父亲”</span></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        y-&gt;left-&gt;parent = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的父亲” 设为 “y的父亲”</span></span><br><span class="line">    y-&gt;parent = x-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;parent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = y;            // 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">        root-&gt;node = y;            <span class="comment">// 如果 “x的父亲” 是空节点，则将y设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x-&gt;parent-&gt;left == x)</span><br><span class="line">            x-&gt;parent-&gt;left = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x-&gt;parent-&gt;right = y;    <span class="comment">// 如果 x是它父节点的左孩子，则将y设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 “x” 设为 “y的左孩子”</span></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    <span class="comment">// 将 “x的父节点” 设为 “y”</span></span><br><span class="line">    x-&gt;parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 对红黑树的节点(y)进行右旋转</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 右旋示意图(对节点y进行左旋)：</span></span><br><span class="line"><span class="comment"> *            py                               py</span></span><br><span class="line"><span class="comment"> *           /                                /</span></span><br><span class="line"><span class="comment"> *          y                                x                  </span></span><br><span class="line"><span class="comment"> *         /  \      --(右旋)--&gt;            /  \                     #</span></span><br><span class="line"><span class="comment"> *        x   ry                           lx   y  </span></span><br><span class="line"><span class="comment"> *       / \                                   / \                   #</span></span><br><span class="line"><span class="comment"> *      lx  rx                                rx  ry</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_right_rotate</span><span class="params">(RBRoot *root, Node *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置x是当前节点的左孩子。</span></span><br><span class="line">    Node *x = y-&gt;left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “x的右孩子” 设为 “y的左孩子”；</span></span><br><span class="line">    <span class="comment">// 如果"x的右孩子"不为空的话，将 “y” 设为 “x的右孩子的父亲”</span></span><br><span class="line">    y-&gt;left = x-&gt;right;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        x-&gt;right-&gt;parent = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父亲” 设为 “x的父亲”</span></span><br><span class="line">    x-&gt;parent = y-&gt;parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;parent == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tree = x;            // 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">        root-&gt;node = x;            <span class="comment">// 如果 “y的父亲” 是空节点，则将x设为根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y == y-&gt;parent-&gt;right)</span><br><span class="line">            y-&gt;parent-&gt;right = x;    <span class="comment">// 如果 y是它父节点的右孩子，则将x设为“y的父节点的右孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;parent-&gt;left = x;    <span class="comment">// (y是它父节点的左孩子) 将x设为“x的父节点的左孩子”</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y” 设为 “x的右孩子”</span></span><br><span class="line">    x-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 “y的父节点” 设为 “x”</span></span><br><span class="line">    y-&gt;parent = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树插入修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在向红黑树中插入节点之后(失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert_fixup</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *parent, *gparent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“父节点存在，并且父节点的颜色是红色”</span></span><br><span class="line">    <span class="keyword">while</span> ((parent = rb_parent(node)) &amp;&amp; rb_is_red(parent))</span><br><span class="line">    &#123;</span><br><span class="line">        gparent = rb_parent(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若“父节点”是“祖父节点的左孩子”</span></span><br><span class="line">        <span class="keyword">if</span> (parent == gparent-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;right;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是右孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;right == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是左孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_right_rotate(root, gparent);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span><span class="comment">//若“z的父节点”是“z的祖父节点的右孩子”</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Case 1条件：叔叔节点是红色</span></span><br><span class="line">            &#123;</span><br><span class="line">                Node *uncle = gparent-&gt;left;</span><br><span class="line">                <span class="keyword">if</span> (uncle &amp;&amp; rb_is_red(uncle))</span><br><span class="line">                &#123;</span><br><span class="line">                    rb_set_black(uncle);</span><br><span class="line">                    rb_set_black(parent);</span><br><span class="line">                    rb_set_red(gparent);</span><br><span class="line">                    node = gparent;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 2条件：叔叔是黑色，且当前节点是左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            &#123;</span><br><span class="line">                Node *tmp;</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Case 3条件：叔叔是黑色，且当前节点是右孩子。</span></span><br><span class="line">            rb_set_black(parent);</span><br><span class="line">            rb_set_red(gparent);</span><br><span class="line">            rbtree_left_rotate(root, gparent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将根节点设为黑色</span></span><br><span class="line">    rb_set_black(root-&gt;node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 添加节点：将节点(node)插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 插入的结点        // 对应《算法导论》中的z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_insert</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *y = <span class="literal">NULL</span>;</span><br><span class="line">    Node *x = root-&gt;node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将红黑树当作一颗二叉查找树，将节点添加到二叉查找树中。</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    rb_parent(node) = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;key &lt; y-&gt;key)</span><br><span class="line">            y-&gt;left = node;                <span class="comment">// 情况2：若“node所包含的值” &lt; “y所包含的值”，则将node设为“y的左孩子”</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y-&gt;right = node;            <span class="comment">// 情况3：(“node所包含的值” &gt;= “y所包含的值”)将node设为“y的右孩子” </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;node = node;                <span class="comment">// 情况1：若y是空节点，则将node设为根</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 设置节点的颜色为红色</span></span><br><span class="line">    node-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将它重新修正为一颗二叉查找树</span></span><br><span class="line">    rbtree_insert_fixup(root, node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     key 是键值。</span></span><br><span class="line"><span class="comment"> *     parent 是父结点。</span></span><br><span class="line"><span class="comment"> *     left 是左孩子。</span></span><br><span class="line"><span class="comment"> *     right 是右孩子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">create_rbtree_node</span><span class="params">(Type key, Node *parent, Node *left, Node* right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    p-&gt;left = left;</span><br><span class="line">    p-&gt;right = right;</span><br><span class="line">    p-&gt;parent = parent;</span><br><span class="line">    p-&gt;color = BLACK; <span class="comment">// 默认为黑色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 新建结点(节点键值为key)，并将其插入到红黑树中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     key 插入结点的键值</span></span><br><span class="line"><span class="comment"> * 返回值：</span></span><br><span class="line"><span class="comment"> *     0，插入成功</span></span><br><span class="line"><span class="comment"> *     -1，插入失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *node;    <span class="comment">// 新建结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许插入相同键值的节点。</span></span><br><span class="line">    <span class="comment">// (若想允许插入相同键值的节点，注释掉下面两句话即可！)</span></span><br><span class="line">    <span class="keyword">if</span> (search(root-&gt;node, key) != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果新建结点失败，则返回。</span></span><br><span class="line">    <span class="keyword">if</span> ((node=create_rbtree_node(key, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    rbtree_insert(root, node);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 红黑树删除修正函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在从红黑树中删除插入节点之后(红黑树失去平衡)，再调用该函数；</span></span><br><span class="line"><span class="comment"> * 目的是将它重新塑造成一颗红黑树。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     root 红黑树的根</span></span><br><span class="line"><span class="comment"> *     node 待修正的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_delete_fixup</span><span class="params">(RBRoot *root, Node *node, Node *parent)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((!node || rb_is_black(node)) &amp;&amp; node != root-&gt;node)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;right;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;right || rb_is_black(other-&gt;right))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;left);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_right_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;right);</span><br><span class="line">                rbtree_left_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            other = parent-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (rb_is_red(other))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 1: x的兄弟w是红色的  </span></span><br><span class="line">                rb_set_black(other);</span><br><span class="line">                rb_set_red(parent);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                other = parent-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((!other-&gt;left || rb_is_black(other-&gt;left)) &amp;&amp;</span><br><span class="line">                (!other-&gt;right || rb_is_black(other-&gt;right)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Case 2: x的兄弟w是黑色，且w的俩个孩子也都是黑色的  </span></span><br><span class="line">                rb_set_red(other);</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = rb_parent(node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!other-&gt;left || rb_is_black(other-&gt;left))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Case 3: x的兄弟w是黑色的，并且w的左孩子是红色，右孩子为黑色。  </span></span><br><span class="line">                    rb_set_black(other-&gt;right);</span><br><span class="line">                    rb_set_red(other);</span><br><span class="line">                    rbtree_left_rotate(root, other);</span><br><span class="line">                    other = parent-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Case 4: x的兄弟w是黑色的；并且w的右孩子是红色的，左孩子任意颜色。</span></span><br><span class="line">                rb_set_color(other, rb_color(parent));</span><br><span class="line">                rb_set_black(parent);</span><br><span class="line">                rb_set_black(other-&gt;left);</span><br><span class="line">                rbtree_right_rotate(root, parent);</span><br><span class="line">                node = root-&gt;node;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        rb_set_black(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     node 删除的结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbtree_delete</span><span class="params">(RBRoot *root, Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *child, *parent;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被删除节点的"左右孩子都不为空"的情况。</span></span><br><span class="line">    <span class="keyword">if</span> ( (node-&gt;left!=<span class="literal">NULL</span>) &amp;&amp; (node-&gt;right!=<span class="literal">NULL</span>) ) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 被删节点的后继节点。(称为"取代节点")</span></span><br><span class="line">        <span class="comment">// 用它来取代"被删节点"的位置，然后再将"被删节点"去掉。</span></span><br><span class="line">        Node *replace = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取后继节点</span></span><br><span class="line">        replace = replace-&gt;right;</span><br><span class="line">        <span class="keyword">while</span> (replace-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            replace = replace-&gt;left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "node节点"不是根节点(只有根节点不存在父节点)</span></span><br><span class="line">        <span class="keyword">if</span> (rb_parent(node))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rb_parent(node)-&gt;left == node)</span><br><span class="line">                rb_parent(node)-&gt;left = replace;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rb_parent(node)-&gt;right = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="comment">// "node节点"是根节点，更新根节点。</span></span><br><span class="line">            root-&gt;node = replace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child是"取代节点"的右孩子，也是需要"调整的节点"。</span></span><br><span class="line">        <span class="comment">// "取代节点"肯定不存在左孩子！因为它是一个后继节点。</span></span><br><span class="line">        child = replace-&gt;right;</span><br><span class="line">        parent = rb_parent(replace);</span><br><span class="line">        <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">        color = rb_color(replace);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// "被删除节点"是"它的后继节点的父节点"</span></span><br><span class="line">        <span class="keyword">if</span> (parent == node)</span><br><span class="line">        &#123;</span><br><span class="line">            parent = replace;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// child不为空</span></span><br><span class="line">            <span class="keyword">if</span> (child)</span><br><span class="line">                rb_set_parent(child, parent);</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line"></span><br><span class="line">            replace-&gt;right = node-&gt;right;</span><br><span class="line">            rb_set_parent(node-&gt;right, replace);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        replace-&gt;parent = node-&gt;parent;</span><br><span class="line">        replace-&gt;color = node-&gt;color;</span><br><span class="line">        replace-&gt;left = node-&gt;left;</span><br><span class="line">        node-&gt;left-&gt;parent = replace;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">            rbtree_delete_fixup(root, child, parent);</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;left !=<span class="literal">NULL</span>)</span><br><span class="line">        child = node-&gt;left;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        child = node-&gt;right;</span><br><span class="line"></span><br><span class="line">    parent = node-&gt;parent;</span><br><span class="line">    <span class="comment">// 保存"取代节点"的颜色</span></span><br><span class="line">    color = node-&gt;color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child)</span><br><span class="line">        child-&gt;parent = parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// "node节点"不是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent-&gt;left == node)</span><br><span class="line">            parent-&gt;left = child;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent-&gt;right = child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root-&gt;node = child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (color == BLACK)</span><br><span class="line">        rbtree_delete_fixup(root, child, parent);</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 删除键值为key的结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> *     tree 红黑树的根结点</span></span><br><span class="line"><span class="comment"> *     key 键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_rbtree</span><span class="params">(RBRoot *root, Type key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *z, *node; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((z = search(root-&gt;node, key)) != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_delete(root, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 销毁红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_destroy</span><span class="params">(RBTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tree-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(tree-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (tree-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(tree-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>)</span><br><span class="line">        rbtree_destroy(root-&gt;node);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 打印"红黑树"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * tree       -- 红黑树的节点</span></span><br><span class="line"><span class="comment"> * key        -- 节点的键值 </span></span><br><span class="line"><span class="comment"> * direction  --  0，表示该节点是根节点;</span></span><br><span class="line"><span class="comment"> *               -1，表示该节点是它的父结点的左孩子;</span></span><br><span class="line"><span class="comment"> *                1，表示该节点是它的父结点的右孩子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbtree_print</span><span class="params">(RBTree tree, Type key, <span class="keyword">int</span> direction)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(direction==<span class="number">0</span>)    <span class="comment">// tree是根节点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d(B) is root\n"</span>, tree-&gt;key);</span><br><span class="line">        <span class="keyword">else</span>                <span class="comment">// tree是分支节点</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d(%s) is %2d's %6s child\n"</span>, tree-&gt;key, rb_is_red(tree)?<span class="string">"R"</span>:<span class="string">"B"</span>, key, direction==<span class="number">1</span>?<span class="string">"right"</span> : <span class="string">"left"</span>);</span><br><span class="line"></span><br><span class="line">        rbtree_print(tree-&gt;left, tree-&gt;key, <span class="number">-1</span>);</span><br><span class="line">        rbtree_print(tree-&gt;right,tree-&gt;key,  <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_rbtree</span><span class="params">(RBRoot *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root!=<span class="literal">NULL</span> &amp;&amp; root-&gt;node!=<span class="literal">NULL</span>)</span><br><span class="line">        rbtree_print(root-&gt;node, root-&gt;node-&gt;key, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol><li><blockquote><p>In the red-black tree that results after successively inserting the keys 41; 38; 31; 12; 19; 8 into an initially empty red-black tree, which one of the following statements is FALSE? (2分)<br>B<br>A. 38 is the root<br>B. 19 and 41 are siblings, and they are both red<br>C. 12 and 31 are siblings, and they are both black<br>D. 8 is red</p></blockquote><p><img src="../../../../../../images/ads/rbTree/ex1.png" alt="ex1"></p></li><li><blockquote><p>After deleting 15 from the red-black tree given in the figure, which one of the following statements must be FALSE? (2分)<br>C</p><img src="../../../../../../" width=20%><p>A. 11 is the parent of 17, and 11 is black<br>B. 17 is the parent of 11, and 11 is red<br>C. 11 is the parent of 17, and 11 is red<br>D. 17 is the parent of 11, and 17 is black</p></blockquote></li></ol><br><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.cnblogs.com/skywang12345/p/3624177.html" target="_blank" rel="noopener">https://www.cnblogs.com/skywang12345/p/3624177.html</a></p><p><a href="https://blog.csdn.net/weewqrer/article/details/51866488" target="_blank" rel="noopener">https://blog.csdn.net/weewqrer/article/details/51866488</a></p><p><a href="https://www.cnblogs.com/tongy0/p/5460623.html" target="_blank" rel="noopener">https://www.cnblogs.com/tongy0/p/5460623.html</a></p><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51530558" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51530558</a></p><p>《Introduction to Algorithms》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;A red-black tree is a binary search tr
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
  <entry>
    <title>【ADS】B+ Tree</title>
    <link href="https://iris-cyy.github.io//Notes/ADS/2020-01-27/bptree/"/>
    <id>https://iris-cyy.github.io//Notes/ADS/2020-01-27/bptree/</id>
    <published>2020-01-27T04:38:56.000Z</published>
    <updated>2020-01-27T04:43:26.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A B+ tree of order M is a tree with the following structural properties:<br>(1)  The root is either a leaf or has between 2 and M children.<br>(2)  All nonleaf nodes (except the root) have between $\lceil M/2 \rceil$ and M children.<br>(3)  All leaves are at the same depth.<br>Assume each nonroot leaf also has between $\lceil M/2 \rceil$ and M children<br><br></p><hr><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol><li><blockquote><p>Insert 3, 1, 4, 5, 9, 2, 6, 8, 7, 0 into an initially empty 2-3 tree (with splitting). Which one of the following statements is FALSE? (2分)<br>A<br>A. 7 and 8 are in the same node<br>B. the parent of the node containing 5 has 3 children<br>C. the first key stored in the root is 6<br>D. there are 5 leaf nodes</p></blockquote><p><img src="/images/ads/bpTree/ex1.jpeg" alt="ex1"></p></li><li></li></ol><p><img src="/images/ads/bpTree/ex2.png" alt="ex2"></p><ol start="3"><li><p><img src="/images/ads/bpTree/ex3.png" alt="ex3"></p></li></ol><br><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://www.cnblogs.com/nullzx/p/8729425.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullzx/p/8729425.html</a></p><p><a href="https://blog.csdn.net/Woolseyyy/article/details/51557672?utm_source=blogxgwz2" target="_blank" rel="noopener">https://blog.csdn.net/Woolseyyy/article/details/51557672?utm_source=blogxgwz2</a><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Definition&quot; class=&quot;headerlink&quot; title=&quot;Definition&quot;&gt;&lt;/a&gt;Definition&lt;/h2&gt;&lt;p&gt;A B+ tree of order M is a tree with th
      
    
    </summary>
    
      <category term="Notes" scheme="https://iris-cyy.github.io/categories/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/categories/Notes/ADS/"/>
    
    
      <category term="Notes" scheme="https://iris-cyy.github.io/tags/Notes/"/>
    
      <category term="ADS" scheme="https://iris-cyy.github.io/tags/ADS/"/>
    
  </entry>
  
</feed>
